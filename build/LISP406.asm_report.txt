
; ******** Source: source/LISP406.asm
     1                          ;
     2                          ; Acornsoft Lisp v4.06
     3                          ;
     4                          ; Reassembled by TobyLobster in 2023
     5                          ;
     6                          ; Made by disassembling the LISP406 binary with py8dis
     7                          ; then adding original label names and comments.
     8                          ;
     9                          ; See https://stardot.org.uk/forums/viewtopic.php?f=2&t=23053
    10                          ;
    11                          
    12                          ; Constants
    13                          AREEXT                                 = 0
    14                          CHARF                                  = 0
    15                          COLDST                                 = 0
    16                          FSUBRF                                 = 12
    17                          IMALEN                                 = 18
    18                          LISTF                                  = 128
    19                          NUMF                                   = 4
    20                          SUBRF                                  = 8
    21                          WARMST                                 = 42
    22                          WSBOT                                  = 2
    23                          osbyte_acknowledge_escape              = 126
    24                          osbyte_enter_language                  = 142
    25                          osbyte_inkey                           = 129
    26                          osbyte_read_adc_or_get_buffer_status   = 128
    27                          osbyte_read_high_order_address         = 130
    28                          osbyte_read_himem                      = 132
    29                          osbyte_read_himem_for_mode             = 133
    30                          osbyte_read_oshwm                      = 131
    31                          osbyte_read_tube_presence              = 234
    32                          osfile_load                            = 255
    33                          osfile_save                            = 0
    34                          osfind_close                           = 0
    35                          osfind_open_output                     = 128
    36                          osword_read_clock                      = 1
    37                          osword_read_interval_timer             = 3
    38                          osword_read_io_memory                  = 5
    39                          osword_read_line                       = 0
    40                          osword_read_pixel                      = 9
    41                          osword_sound                           = 7
    42                          osword_write_clock                     = 2
    43                          service_star_help_command              = 9
    44                          service_unrecognised_star_command      = 4
    45                          
    46                          ; Memory locations
    47                          GCNO    = $00
    48                          GARX    = $02
    49                          GARRY   = $03
    50                          GCA     = $04
    51                          GABBY   = $06
    52                          SA      = $07
    53                          l0009   = $09
    54                          l000a   = $0a
    55                          DISPM   = $0b
    56                          ERRCNT  = $0d
    57                          TOPBIN  = $0f
    58                          ERRNO   = $11
    59                          LINEPP  = $12
    60                          HANDLE  = $13
    61                          NBUFF   = $14
    62                          NIND    = $19
    63                          LEVEL   = $1a
    64                          OLDEXT  = $1b
    65                          END     = $1d
    66                          AA      = $1e
    67                          AB      = $20
    68                          YSAV    = $22
    69                          REP     = $23
    70                          LINENO  = $25
    71                          ARG     = $30
    72                          TVS     = $30
    73                          BINDER  = $32
    74                          TVSEXT  = $33
    75                          WSA     = $34
    76                          WSB     = $36
    77                          WSC     = $38
    78                          ARGA    = $3a
    79                          ARGB    = $3c
    80                          ARGC    = $3e
    81                          ARGD    = $40
    82                          ARGE    = $42
    83                          ACL     = $72
    84                          XTNDL   = $74
    85                          AUXL    = $76
    86                          SIGN    = $78
    87                          ARETOP  = $79
    88                          POINT   = $7a
    89                          RELBS   = $7a
    90                          ROMBS   = $7a
    91                          CELL    = $7c
    92                          RAMBS   = $7c
    93                          RELOC   = $7c
    94                          SP      = $7e
    95                          SIZE    = $82
    96                          WSD     = $83
    97                          RETADD  = $85
    98                          AD      = $87
    99                          XPR     = $89
   100                          DEPTH   = $8b
   101                          LSBUFF  = $8c
   102                          POPPY   = $8d
   103                          TERMCH  = $8e
   104                          ACIN    = $8f
   105                          ARGINF  = $90
   106                          OLDLEV  = $97
   107                          CLISTR  = $f2
   108                          BRKAD   = $fd
   109                          KBD     = $ff
   110                          brkv    = $0202
   111                          FIRST   = $0400
   112                          TUBE    = $0401
   113                          ACL40   = $0402
   114                          REM40   = $0407
   115                          AUX40   = $040c
   116                          TEMP40  = $0411
   117                          IODCB   = $0416
   118                          PWORD   = $041b
   119                          GCTIME  = $0420
   120                          TIMEW   = $0425
   121                          MODEF   = $042a
   122                          VECBOT  = $042b
   123                          IMBOT   = $042c
   124                          AREVAL  = $042d
   125                          ESCHF   = $042f
   126                          LSCHAR  = $0430
   127                          STATYP  = $0431
   128                          MEMINV  = $0432
   129                          RELOFF  = $0433
   130                          GENCNT  = $0434
   131                          OSINFO  = $0438
   132                          DL      = $0450
   133                          DH      = $0520
   134                          IMBUF   = $0600
   135                          NAMBUF  = $0600
   136                          OSWBUF  = $0600
   137                          DOSBUF  = $0700
   138                          HILISP  = $d700
   139                          osfind  = $ffce
   140                          osbput  = $ffd4
   141                          osbget  = $ffd7
   142                          osargs  = $ffda
   143                          osfile  = $ffdd
   144                          osrdch  = $ffe0
   145                          osasci  = $ffe3
   146                          oswrch  = $ffee
   147                          osword  = $fff1
   148                          osbyte  = $fff4
   149                          oscli   = $fff7
   150                          
   151                              * = $8000
   152                          
   153                          ; Standard language ROM header
   154                          entry_point
   155                          LISPST
   156                          LISVAL
   157                          ROMHDR
   158                          pydis_start
   159  8000 4c3c80                 jmp INITUR
   160                          
   161  8003 4c3481                 jmp INITSE                                     ; Service entry
   162                          
   163  8006 e2                     !byte $e2                                      ; Language, service & tube
   164  8007 12                     !byte CPYOFF-ROMHDR
   165  8008 01                     !byte 1                                        ; ROM version
   166                          TITLE
   167  8009 4c495350               !text "LISP"
   168  800d 00                     !byte 0
   169                          VERSN
   170  800e 342e3036               !text "4.06"
   171                          CPYOFF
   172  8012 00                     !byte 0
   173  8013 2843293139383320...    !text "(C)1983 Acornsoft/1979 Owl Computers"
   174  8037 00                     !byte 0
   175                          TUBOFF
   176  8038 00800000               !byte   0, $80,   0,   0                       ; Tube load addr
   177                          
   178                          
   179                              ; ******************************
   180                              ; Initialisation routine
   181                              ; ******************************
   182                          INITUR
   183  803c c901                   cmp #1                                         ; Satisfactory?
   184  803e f001                   beq CRYON
   185  8040 60                     rts
   186                          
   187                          CRYON
   188  8041 58                     cli
   189  8042 d8                     cld
   190  8043 a982                   lda #osbyte_read_high_order_address
   191  8045 20f4ff                 jsr osbyte                                     ; Find out if in tube; Read the filing system 'machine high order address'
   192  8048 8e0104                 stx TUBE
   193  804b 8a                     txa
   194  804c f003                   beq COLD
   195  804e 4c7b82                 jmp WRMCHK
   196                          
   197                          COLD
   198  8051 a983                   lda #osbyte_read_oshwm                         ; Find PAGE
   199  8053 20f4ff                 jsr osbyte                                     ; Read top of operating system RAM address (OSHWM)
   200  8056 8c2b04                 sty VECBOT
   201  8059 e000                   cpx #0
   202  805b f003                   beq PBOUND
   203  805d ee2b04                 inc VECBOT                                     ; Put on page boundary
   204                          PBOUND
   205  8060 ac2b04                 ldy VECBOT
   206  8063 c8                     iny
   207  8064 c8                     iny
   208  8065 8c2c04                 sty IMBOT
   209                          
   210                              ; ******************************
   211                              ; Now copy down into RAM
   212                              ; ******************************
   213  8068 a900                   lda #<VECTAB
   214  806a 857a                   sta ROMBS
   215  806c 857c                   sta RAMBS
   216  806e a9a4                   lda #>VECTAB
   217  8070 857b                   sta ROMBS+1
   218  8072 ad2b04                 lda VECBOT
   219  8075 857d                   sta RAMBS+1
   220  8077 a212                   ldx #IMALEN
   221  8079 200081                 jsr COPY
   222                          
   223                              ; ******************************
   224                              ; New initialisation routines
   225                              ; ******************************
   226  807c a900                   lda #0
   227  807e 8d3204                 sta MEMINV                                     ; Memory OK
   228  8081 8d2a04                 sta MODEF
   229  8084 a9f0                   lda #$f0
   230  8086 858c                   sta LSBUFF                                     ; Fudge first reads
   231  8088 a90d                   lda #$0d
   232  808a 8d3004                 sta LSCHAR
   233  808d a203                   ldx #3
   234  808f a930                   lda #'0'
   235                          LOOP5
   236  8091 9d3404                 sta GENCNT,x
   237  8094 ca                     dex
   238  8095 10fa                   bpl LOOP5
   239  8097 ad0104                 lda TUBE
   240  809a f008                   beq INTUBE
   241  809c a92a                   lda #WARMST                                    ; No more to do if in I/O
   242  809e 8d3104                 sta STATYP
   243  80a1 4c688f                 jmp INUREL
   244                          
   245                          
   246                              ; **** Copy to HILISP
   247                          INTUBE
   248  80a4 a900                   lda #<LISPST
   249  80a6 857a                   sta ROMBS
   250  80a8 a980                   lda #>LISPST
   251  80aa 857b                   sta ROMBS+1
   252  80ac a900                   lda #<HILISP
   253  80ae 857c                   sta RAMBS
   254  80b0 a9d7                   lda #>HILISP
   255  80b2 857d                   sta RAMBS+1
   256  80b4 a221                   ldx #(>LISPEN-LISVAL-1)+1
   257  80b6 200081                 jsr COPY
   258                          
   259                              ; **** Change addresses
   260  80b9 a900                   lda #<RELTAB
   261  80bb 857a                   sta RELBS
   262  80bd a9b8                   lda #>RELTAB
   263  80bf 857b                   sta RELBS+1
   264  80c1 a957                   lda #>HILISP-LISVAL
   265  80c3 201181                 jsr CHADD
   266                          
   267                              ; **** Alter vectors for tube
   268  80c6 a902                   lda #<VECTAB+2
   269  80c8 857a                   sta RELBS
   270  80ca ad2b04                 lda VECBOT
   271  80cd 857b                   sta RELBS+1
   272  80cf a000                   ldy #0
   273                          LOOP3
   274  80d1 b17a                   lda (RELBS),y
   275  80d3 18                     clc
   276  80d4 6957                   adc #>HILISP-LISVAL
   277  80d6 917a                   sta (RELBS),y
   278  80d8 a57a                   lda RELBS
   279  80da 18                     clc
   280  80db 6903                   adc #3                                         ; Next vector
   281  80dd 857a                   sta RELBS
   282  80df a57b                   lda RELBS+1
   283  80e1 6900                   adc #0
   284  80e3 857b                   sta RELBS+1
   285  80e5 cd2c04                 cmp IMBOT
   286  80e8 d0e7                   bne LOOP3
   287  80ea a900                   lda #0                                         ; Prevent warm start offer
   288  80ec 8d3104                 sta STATYP
   289                          
   290                              ; Do a *GO WRMCHK (via HILISP)
   291  80ef a97b                   lda #<HIWARM
   292  80f1 8d01d7                 sta HILISP+1
   293  80f4 a9d9                   lda #>HIWARM
   294  80f6 8d02d7                 sta HILISP+2
   295  80f9 a231                   ldx #<(GOSTR)
   296  80fb a082                   ldy #>(GOSTR)
   297  80fd 20f7ff                 jsr oscli
   298                          
   299                              ; General copy routine
   300                          COPY
   301  8100 a000                   ldy #0
   302                          LOOP1
   303  8102 b17a                   lda (ROMBS),y
   304  8104 917c                   sta (RAMBS),y
   305  8106 c8                     iny
   306  8107 d0f9                   bne LOOP1
   307  8109 e67d                   inc RAMBS+1
   308  810b e67b                   inc ROMBS+1
   309  810d ca                     dex
   310  810e d0f2                   bne LOOP1
   311  8110 60                     rts
   312                          
   313                          
   314                              ; Address change routine
   315                          CHADD
   316  8111 8d3304                 sta RELOFF
   317  8114 a200                   ldx #0
   318  8116 a000                   ldy #0
   319                          LOOP2
   320  8118 b17a                   lda (RELBS),y
   321  811a 857c                   sta RELOC
   322  811c c8                     iny
   323  811d b17a                   lda (RELBS),y
   324  811f f012                   beq CHRTS
   325  8121 857d                   sta RELOC+1
   326  8123 a17c                   lda (RELOC,x)
   327  8125 18                     clc
   328  8126 6d3304                 adc RELOFF
   329  8129 817c                   sta (RELOC,x)
   330  812b c8                     iny
   331  812c d0ea                   bne LOOP2
   332  812e e67b                   inc RELBS+1
   333  8130 4c1881                 jmp LOOP2
   334                          
   335                          CHRTS
   336  8133 60                     rts
   337                          
   338                          
   339                              ; ******************************
   340                              ; Claim as service
   341                              ; ******************************
   342                          INITSE
   343  8134 c904                   cmp #service_unrecognised_star_command         ; Reasonable?
   344  8136 f01b                   beq OKCALL
   345  8138 c909                   cmp #service_star_help_command                 ; Help?
   346  813a f001                   beq HELP
   347  813c 60                     rts
   348                          
   349                          HELP
   350  813d 48                     pha
   351  813e 8a                     txa
   352  813f 48                     pha
   353  8140 98                     tya
   354  8141 48                     pha                                            ; Mustn't corrupt zero page
   355  8142 a513                   lda HANDLE
   356  8144 48                     pha
   357  8145 a28e                   ldx #HLPOFF
   358  8147 20fc84                 jsr MESSAH
   359  814a 68                     pla
   360  814b 8513                   sta HANDLE
   361  814d 68                     pla
   362  814e a8                     tay
   363  814f 68                     pla
   364  8150 aa                     tax
   365  8151 68                     pla
   366  8152 60                     rts
   367                          
   368                          OKCALL
   369  8153 48                     pha
   370  8154 98                     tya
   371  8155 48                     pha
   372  8156 8a                     txa
   373  8157 48                     pha
   374  8158 b1f2                   lda (CLISTR),y
   375  815a c94c                   cmp #'L'
   376  815c d034                   bne NOTLSP
   377  815e c8                     iny
   378  815f b1f2                   lda (CLISTR),y
   379  8161 c949                   cmp #'I'
   380  8163 d02d                   bne NOTLSP
   381  8165 c8                     iny
   382  8166 b1f2                   lda (CLISTR),y
   383  8168 c953                   cmp #'S'
   384  816a d026                   bne NOTLSP
   385  816c c8                     iny
   386  816d b1f2                   lda (CLISTR),y
   387  816f c950                   cmp #'P'
   388  8171 d01f                   bne NOTLSP
   389  8173 c8                     iny
   390  8174 b1f2                   lda (CLISTR),y
   391  8176 c90d                   cmp #$0d
   392  8178 d018                   bne NOTLSP
   393  817a a9ea                   lda #osbyte_read_tube_presence
   394  817c a200                   ldx #0
   395  817e a0ff                   ldy #$ff
   396  8180 20f4ff                 jsr osbyte                                     ; Is there a tube?; Read Tube present flag
   397  8183 8a                     txa
   398  8184 d005                   bne STLISP                                     ; If so don't flag
   399  8186 a900                   lda #COLDST
   400  8188 8d3104                 sta STATYP
   401                          STLISP
   402  818b 68                     pla
   403  818c aa                     tax                                            ; X=ROM number
   404  818d a98e                   lda #osbyte_enter_language
   405  818f 4cf4ff                 jmp osbyte                                     ; Start up LISP; Enter language ROM X
   406                          
   407                          NOTLSP
   408  8192 68                     pla
   409  8193 aa                     tax
   410  8194 68                     pla
   411  8195 a8                     tay
   412  8196 68                     pla
   413  8197 60                     rts
   414                          
   415                          
   416                              ; ******************************
   417                              ; These are LISP's tables
   418                              ; ******************************
   419                              ; **** The text messages
   420                          TEXT
   421  8198 0d0d4576616c7561...    !text $0d, $0d, "Evaluate :", $80+' '
   422                          VALTXT
   423  81a5 0d56616c75652069...    !text $0d, "Value is :", $80+' '
   424                          NILTXT
   425  81b1 4e49cc                 !text "NI", $80+'L'
   426                          DOTTXT
   427  81b4 202ea0                 !text " .", $80+' '
   428                          INSTXT
   429  81b7 0d496e7375666669...    !text $0d, "Insufficient memor", $80+'y'
   430                          GCTXT
   431  81cb 0d472e432e20a3         !text $0d, "G.C. ", $80+'#'
   432                          COLTXT
   433  81d2 2042797465732063...    !text " Bytes collected,", $80+' '
   434                          FRTXT
   435  81e4 2042797465732066...    !text " Bytes free", $80+$0d
   436                          SUBTXT
   437  81f0 53756272a3             !text "Subr", $80+'#'
   438                          ERRTXT
   439  81f5 0d4572726f72206e...    !text $0d, "Error number", $80+' '
   440                          ARGTXT
   441  8203 0d417267203aa0         !text $0d, "Arg :", $80+' '
   442                          WRMTXT
   443  820a 0d5761726d206f72...    !text $0d, "Warm or cold start (W/C) ?", $80+' '
   444                          HLPTXT
   445  8226 0d4c49535020342e...    !text $0d, "LISP 4.06", $80+$0d
   446                          
   447                              ; **** Command lines
   448                          GOSTR
   449  8231 474f2044373030         !text "GO D700"
   450  8238 0d                     !byte $0d
   451                          LISTR
   452  8239 4c495350               !text "LISP"
   453  823d 0d                     !byte $0d
   454                          
   455                              ; **** Readline control block
   456                          INCB
   457  823e 0007                   !byte <(DOSBUF), >(DOSBUF)                     ; Buffer address for input (2 bytes)
   458  8240 7f                     !byte $7f                                      ; Max line length; Maximum line length
   459  8241 20                     !byte $20                                      ; Min. acceptable character value
   460  8242 7f                     !byte $7f                                      ; Max. acceptable character value
   461                          
   462                              ; **** Terminators
   463                          TERMS
   464  8243 292e2028               !text "). ("
   465  8247 0d0a2127               !byte $0d, $0a, $21, $27
   466                          
   467                              ; **** CAR/CDR table
   468                          CXXXR
   469  824b 0002020200040202...    !byte 0, 2, 2, 2, 0, 4, 2, 2, 0, 2, 4, 2, 0, 4
   470  8259 0402000202040004...    !byte 4, 2, 0, 2, 2, 4, 0, 4, 2, 4, 0, 2, 4, 4
   471  8267 00040404               !byte 0, 4, 4, 4
   472                          
   473                              ; **** Table of CHARS lengths
   474                          LENTAB
   475  826b 0306090a00             !byte   3,   6,   9, $0a,   0
   476                          
   477                              ; **** Untraceable errors
   478                          CATTAB
   479  8270 0001020b0cff           !byte   0,   1,   2, $0b, $0c, $ff
   480                          
   481                              ; **** Zero time
   482                          TIMZER
   483  8276 0000000000             !byte 0, 0, 0, 0, 0                            ; Five byte clock value (low byte to high byte)
   484                          
   485                          
   486                              ; ******************************
   487                              ; Routine to give optionsl warm
   488                              ; start (ie OBLIST retained)
   489                              ; ******************************
   490                          WRMCHK
   491  827b ad3104                 lda STATYP
   492  827e c92a                   cmp #WARMST
   493  8280 d003                   bne NOTWRM
   494  8282 4c9582                 jmp WARM                                       ; Offer warm start
   495                          
   496                          NOTWRM
   497  8285 ad0104                 lda TUBE
   498  8288 d008                   bne COLD1
   499  828a a92a                   lda #WARMST                                    ; We're in tube and
   500  828c 8d3104                 sta STATYP                                     ; it's first time through
   501  828f 4c688f                 jmp INUREL
   502                          
   503                          COLD1
   504  8292 4c5180                 jmp COLD
   505                          
   506                          WARM
   507  8295 ad3204                 lda MEMINV
   508  8298 d01a                   bne REBOOT
   509  829a a272                   ldx #WRMOFF
   510  829c 20fc84                 jsr MESSAH
   511  829f 20e0ff                 jsr osrdch                                     ; Read a character from the current input stream
   512  82a2 297f                   and #$7f
   513  82a4 c943                   cmp #'C'
   514  82a6 f00c                   beq REBOOT
   515  82a8 c963                   cmp #'c'
   516  82aa f008                   beq REBOOT
   517  82ac a957                   lda #'W'
   518  82ae 20eeff                 jsr oswrch                                     ; Write character 87
   519  82b1 4cb584                 jmp INIT
   520                          
   521                          
   522                              ; **** Reload from ROM
   523                          REBOOT
   524  82b4 a943                   lda #'C'
   525  82b6 20eeff                 jsr oswrch                                     ; Write character 67
   526  82b9 201985                 jsr CROUT
   527  82bc 201985                 jsr CROUT
   528  82bf a239                   ldx #<(LISTR)
   529  82c1 a082                   ldy #>(LISTR)
   530  82c3 4cf7ff                 jmp oscli
   531                          
   532                          
   533                              ; ******************************
   534                              ; This is the main LISP
   535                              ; supervisor loop which is
   536                              ; entered when LISP is called.
   537                              ; ******************************
   538                          SUPER
   539  82c6 a900                   lda #0                                         ; Reset stack
   540  82c8 857e                   sta SP
   541  82ca a579                   lda ARETOP
   542  82cc 857f                   sta SP+1
   543  82ce a2ff                   ldx #$ff                                       ; Reset hardware stack
   544  82d0 9a                     txs
   545  82d1 ad2a04                 lda MODEF                                      ; Check mode flag
   546  82d4 1003                   bpl EVPR
   547  82d6 208b97                 jsr MODCHN                                     ;  Change mode
   548                          EVPR
   549  82d9 a200                   ldx #EVOFF
   550  82db 20fc84                 jsr MESSAH                                     ; Evaluate:
   551  82de 20c387                 jsr RSREAD                                     ; Read expression
   552  82e1 203985                 jsr EVALU                                      ; Evaluate it
   553  82e4 a20d                   ldx #VALOFF                                    ; Value is:
   554  82e6 20fc84                 jsr MESSAH
   555  82e9 20818b                 jsr PRINA                                      ; and print it
   556  82ec 4cc682                 jmp SUPER                                      ; Repeat ad infinitum
   557                          
   558                          
   559                              ; ******************************
   560                              ; Here are some condition
   561                              ; routines taking advantage
   562                              ; of POP
   563                              ; ******************************
   564                              ; **** ATOM
   565                          ATOM
   566  82ef a53b                   lda ARGA+1                                     ; Is ARGA atom?
   567  82f1 f03e                   beq YES                                        ; NIL => yes
   568  82f3 a000                   ldy #0
   569  82f5 b13a                   lda (ARGA),y                                   ; check bit 7
   570  82f7 1038                   bpl YES
   571  82f9 3032                   bmi NO
   572                          
   573                              ; **** EQ
   574                          EQ
   575  82fb a53d                   lda ARGB+1                                     ; ARGA = ARGB?
   576  82fd f02a                   beq NULL                                       ; ARGB NIL => ARGA NIL
   577  82ff c53b                   cmp ARGA+1
   578  8301 d006                   bne EQUATE                                     ; But they are numeric
   579  8303 a53c                   lda ARGB
   580  8305 c53a                   cmp ARGA
   581  8307 f028                   beq YES
   582                          EQUATE
   583  8309 a000                   ldy #0                                         ; Fudge for nums
   584  830b b13a                   lda (ARGA),y
   585  830d c904                   cmp #NUMF                                      ; Both must be nums
   586  830f d01c                   bne NO
   587  8311 d13c                   cmp (ARGB),y
   588  8313 d018                   bne NO
   589  8315 c8                     iny
   590  8316 b13a                   lda (ARGA),y
   591  8318 d13c                   cmp (ARGB),y                                   ; Same length?
   592  831a d011                   bne NO
   593  831c a8                     tay
   594  831d 88                     dey
   595                          EQUINE
   596  831e b13a                   lda (ARGA),y                                   ; Compare value
   597  8320 d13c                   cmp (ARGB),y
   598  8322 d009                   bne NO
   599  8324 88                     dey
   600  8325 d0f7                   bne EQUINE
   601  8327 f008                   beq YES
   602                          
   603                              ; **** NULL
   604                          NULL
   605  8329 a53b                   lda ARGA+1                                     ; Is ARGA NIL?
   606  832b f004                   beq YES
   607                          NO
   608  832d a900                   lda #0                                         ; Returns NIL
   609  832f f007                   beq POPA
   610                          YES
   611  8331 a911                   lda #<TRUE                                     ; Returns T
   612  8333 8530                   sta ARG
   613  8335 ad2c04                 lda IMBOT
   614                          POPA
   615  8338 8531                   sta ARG+1
   616                          
   617                              ; ******************************
   618                              ; POP is one of the two LISP
   619                              ; stack handling routines. It
   620                              ; restores old binding values
   621                              ; and WSA, WSB and WSC from the
   622                              ; stack and POP the stack. ARG
   623                              ; is unchanged.
   624                              ; ******************************
   625                          POP
   626  833a a000                   ldy #0                                         ; Get binding size
   627  833c b17e                   lda (SP),y
   628  833e f02b                   beq NOBOUN                                     ; No bindings to do
   629  8340 a8                     tay
   630                          POPPLE
   631  8341 b17e                   lda (SP),y
   632  8343 8586                   sta RETADD+1                                   ; Get atom
   633  8345 88                     dey
   634  8346 b17e                   lda (SP),y
   635  8348 8585                   sta RETADD
   636  834a 88                     dey
   637  834b b17e                   lda (SP),y                                     ; Get old value
   638  834d aa                     tax                                            ; into A,X
   639  834e 88                     dey
   640  834f b17e                   lda (SP),y
   641  8351 88                     dey
   642  8352 848d                   sty POPPY                                      ; Save Y
   643  8354 a002                   ldy #2                                         ; Put value back
   644  8356 9185                   sta (RETADD),y                                 ; into atom value
   645  8358 c8                     iny                                            ; cell
   646  8359 8a                     txa
   647  835a 9185                   sta (RETADD),y
   648  835c a48d                   ldy POPPY                                      ; Fetch Y back
   649  835e d0e1                   bne POPPLE                                     ; More bindings?
   650  8360 b17e                   lda (SP),y
   651  8362 18                     clc                                            ; Set stack pointer
   652  8363 657e                   adc SP                                         ; to bottom of work-
   653  8365 857e                   sta SP                                         ; Space area as if
   654  8367 9002                   bcc NOBOUN                                     ; there were no binds
   655  8369 e67f                   inc SP+1
   656                          NOBOUN
   657  836b c8                     iny                                            ; Now Y = 1
   658  836c b17e                   lda (SP),y
   659  836e a8                     tay                                            ; Index for top space
   660  836f 88                     dey
   661  8370 b17e                   lda (SP),y                                     ; Push return addr
   662  8372 48                     pha
   663  8373 88                     dey
   664  8374 b17e                   lda (SP),y
   665  8376 48                     pha
   666  8377 88                     dey
   667                          MORSP
   668  8378 b17e                   lda (SP),y                                     ; Copy back TVS
   669  837a 993200                 sta BINDER,y                                   ; WSA, WSB and WSC
   670  837d 88                     dey
   671  837e d0f8                   bne MORSP
   672  8380 38                     sec                                            ; Add TVSEXT + 2 to stack
   673  8381 a57e                   lda SP                                         ; pointer to POP the stack
   674  8383 6533                   adc TVSEXT
   675  8385 b005                   bcs TVF
   676  8387 6901                   adc #1
   677  8389 9005                   bcc TVG
   678  838b 18                     clc
   679                          TVF
   680  838c 6900                   adc #0
   681  838e e67f                   inc SP+1
   682                          TVG
   683  8390 857e                   sta SP
   684  8392 60                     rts
   685                          
   686                          
   687                              ; ******************************
   688                              ; STACK stores:
   689                              ;    Extent of TVS, WSA, WSB,
   690                              ;    WSC, ARG and return addr
   691                              ;     on the LISP stack
   692                              ; ******************************
   693                          STACK
   694  8393 a57e                   lda SP
   695  8395 18                     clc
   696  8396 e533                   sbc TVSEXT
   697  8398 aa                     tax
   698  8399 d001                   bne EXTRAM
   699  839b 18                     clc
   700                          EXTRAM
   701  839c ca                     dex
   702  839d a57f                   lda SP+1
   703  839f e900                   sbc #0
   704  83a1 cd2e04                 cmp AREVAL+1
   705  83a4 9007                   bcc SQUAT
   706  83a6 d014                   bne SROOM
   707  83a8 ec2d04                 cpx AREVAL
   708  83ab b00f                   bcs SROOM
   709                          SQUAT
   710  83ad 20469b                 jsr RUBBSH
   711  83b0 d0e1                   bne STACK
   712                          STIR
   713  83b2 00                     brk                                            ; None found
   714                          
   715  83b3 00                     !byte 0
   716  83b4 4e6f20726f6f6d         !text "No room"
   717  83bb 00                     !byte 0
   718                          
   719                          SROOM
   720  83bc 857f                   sta SP+1
   721  83be 867e                   stx SP
   722  83c0 68                     pla
   723  83c1 8585                   sta RETADD
   724  83c3 68                     pla
   725  83c4 aa                     tax
   726  83c5 a433                   ldy TVSEXT
   727  83c7 c8                     iny
   728  83c8 a531                   lda ARG+1                                      ; Store ARG
   729  83ca 917e                   sta (SP),y
   730  83cc 88                     dey
   731  83cd a530                   lda ARG
   732  83cf 917e                   sta (SP),y
   733  83d1 88                     dey
   734  83d2 88                     dey
   735  83d3 68                     pla                                            ; Store return addr
   736  83d4 917e                   sta (SP),y
   737  83d6 c8                     iny
   738  83d7 68                     pla
   739  83d8 917e                   sta (SP),y
   740  83da 88                     dey
   741  83db 88                     dey
   742                          PILE
   743  83dc b93200                 lda BINDER,y
   744  83df 917e                   sta (SP),y
   745  83e1 88                     dey
   746  83e2 10f8                   bpl PILE
   747  83e4 8a                     txa
   748  83e5 48                     pha
   749  83e6 a585                   lda RETADD
   750  83e8 48                     pha
   751  83e9 60                     rts
   752                          
   753                          
   754                              ; ******************************
   755                              ; BIND adds a 'new value' to the
   756                              ; bottom of the stack:
   757                              ;   WSD     - Pointer to atom
   758                              ;   TVS + X - New value
   759                              ; ******************************
   760                          BIND
   761  83ea a57e                   lda SP
   762  83ec 38                     sec
   763  83ed e904                   sbc #4
   764  83ef a8                     tay
   765  83f0 a57f                   lda SP+1
   766  83f2 e900                   sbc #0
   767  83f4 cd2e04                 cmp AREVAL+1
   768  83f7 9007                   bcc SQUASH
   769  83f9 d014                   bne XROOM
   770  83fb cc2d04                 cpy AREVAL
   771  83fe b00f                   bcs XROOM
   772                          SQUASH
   773  8400 20469b                 jsr RUBBSH
   774  8403 d0e5                   bne BIND
   775                          BEAR
   776  8405 00                     brk                                            ; None found
   777                          
   778  8406 01                     !byte 1
   779  8407 4e6f20726f6f6d         !text "No room"
   780  840e 00                     !byte 0
   781                          
   782                          XROOM
   783  840f 857f                   sta SP+1
   784  8411 847e                   sty SP
   785  8413 a004                   ldy #4
   786  8415 b17e                   lda (SP),y
   787  8417 6903                   adc #3                                         ; Carry is set
   788  8419 48                     pha
   789  841a a584                   lda WSD+1
   790  841c 917e                   sta (SP),y
   791  841e 88                     dey
   792  841f a583                   lda WSD
   793  8421 917e                   sta (SP),y
   794  8423 b183                   lda (WSD),y                                    ; Old value and atom
   795  8425 88                     dey
   796  8426 917e                   sta (SP),y                                     ; on stack
   797  8428 b183                   lda (WSD),y
   798  842a 88                     dey
   799  842b 917e                   sta (SP),y
   800  842d 88                     dey
   801  842e 68                     pla
   802  842f 917e                   sta (SP),y                                     ; Bound var size
   803  8431 a002                   ldy #2
   804  8433 b530                   lda TVS,x                                      ; New value in atom
   805  8435 9183                   sta (WSD),y
   806  8437 c8                     iny
   807  8438 b531                   lda TVS+1,x
   808  843a 9183                   sta (WSD),y
   809  843c 60                     rts
   810                          
   811                          
   812                              ; ******************************
   813                              ; Here is the space allocator
   814                              ; routine. If allocates up to
   815                              ; 256 bytes of initialized store
   816                              ; ******************************
   817                          ALNUM
   818  843d a904                   lda #4
   819                          ALVEC
   820  843f a204                   ldx #NUMF
   821  8441 d014                   bne SPACE
   822                          ALCHAR
   823  8443 a200                   ldx #CHARF
   824  8445 f010                   beq SPACE
   825                          ALFSBR
   826  8447 a20c                   ldx #FSUBRF
   827  8449 a906                   lda #6
   828  844b d00a                   bne SPACE
   829                          ALSUBR
   830  844d a208                   ldx #SUBRF
   831  844f a906                   lda #6
   832  8451 d004                   bne SPACE
   833                          ALPAIR
   834  8453 a905                   lda #5
   835  8455 a280                   ldx #$80                                       ; Pointer space
   836                          SPACE
   837  8457 8582                   sta SIZE
   838                          SPACEB
   839  8459 18                     clc
   840  845a ad2d04                 lda AREVAL
   841  845d 857a                   sta POINT
   842  845f 6582                   adc SIZE
   843  8461 a8                     tay
   844  8462 ad2e04                 lda AREVAL+1
   845  8465 857b                   sta POINT+1
   846  8467 6900                   adc #0
   847  8469 c57f                   cmp SP+1
   848  846b 9015                   bcc ROOM
   849  846d d004                   bne SQUID
   850  846f c47e                   cpy SP
   851  8471 900f                   bcc ROOM
   852                          SQUID
   853  8473 20469b                 jsr RUBBSH
   854  8476 d0e1                   bne SPACEB
   855                          ALLO
   856  8478 00                     brk                                            ; None found
   857                          
   858  8479 02                     !byte 2
   859  847a 4e6f20726f6f6d         !text "No room"
   860  8481 00                     !byte 0
   861                          
   862                          ROOM
   863  8482 8d2e04                 sta AREVAL+1
   864  8485 8c2d04                 sty AREVAL
   865  8488 a000                   ldy #0
   866  848a 8a                     txa
   867  848b 917a                   sta (POINT),y
   868  848d 301b                   bmi PINS
   869  848f d012                   bne OBSCUR
   870  8491 a005                   ldy #5
   871  8493 a900                   lda #0
   872  8495 917a                   sta (POINT),y
   873  8497 a002                   ldy #2
   874  8499 a902                   lda #<ZA                                       ; UNDEFINED
   875  849b 917a                   sta (POINT),y
   876  849d c8                     iny
   877  849e ad2c04                 lda IMBOT
   878  84a1 917a                   sta (POINT),y
   879                          OBSCUR
   880  84a3 a001                   ldy #1
   881  84a5 a582                   lda SIZE
   882  84a7 917a                   sta (POINT),y
   883  84a9 60                     rts
   884                          
   885                          PINS
   886  84aa a900                   lda #0
   887  84ac a002                   ldy #2
   888  84ae 917a                   sta (POINT),y                                  ; Initial NIL point
   889  84b0 a004                   ldy #4
   890  84b2 917a                   sta (POINT),y
   891  84b4 60                     rts
   892                          
   893                          
   894                              ; ******************************
   895                              ; Here are the initialisation
   896                              ; routines
   897                              ; ******************************
   898                          INIT
   899  84b5 a987                   lda #<ERROR
   900  84b7 8d0202                 sta brkv                                       ; Error handling
   901  84ba a99e                   lda #>ERROR
   902  84bc 8d0302                 sta brkv+1
   903  84bf a984                   lda #osbyte_read_himem                         ; Find end of memory
   904  84c1 20f4ff                 jsr osbyte                                     ; Read top of user memory (HIMEM)
   905  84c4 8479                   sty ARETOP
   906                          
   907                              ; **** Set up various values
   908  84c6 a9fc                   lda #$fc                                       ; Messages except GC
   909  84c8 851a                   sta LEVEL
   910  84ca a200                   ldx #0
   911  84cc 8613                   stx HANDLE                                     ; Output to screen
   912  84ce 8600                   stx GCNO                                       ; Zero collections
   913  84d0 8601                   stx GCNO+1
   914  84d2 860d                   stx ERRCNT                                     ; Zero error count
   915  84d4 860e                   stx ERRCNT+1
   916  84d6 a010                   ldy #$10                                       ; Clear TVS etc.
   917                          ZLP
   918  84d8 9630                   stx TVS,y
   919  84da 88                     dey
   920  84db 10fb                   bpl ZLP
   921  84dd a90a                   lda #$0a                                       ; Initially no args
   922  84df 8533                   sta TVSEXT
   923  84e1 20d698                 jsr GCTIMZ                                     ; Zero GC time
   924  84e4 20c898                 jsr STCLK                                      ; Zero time
   925  84e7 a9ff                   lda #<KBD                                      ; Set up Escape check
   926  84e9 8d1604                 sta IODCB
   927  84ec a900                   lda #>KBD
   928  84ee 8d1704                 sta IODCB+1
   929  84f1 a900                   lda #0
   930  84f3 8d1804                 sta IODCB+2
   931  84f6 8d1904                 sta IODCB+3
   932  84f9 4cc682                 jmp SUPER                                      ; Enter supervisor
   933                          
   934                          
   935                              ; **** Message handler
   936                          MESSAH
   937  84fc a000                   ldy #0
   938                          MESSAI
   939  84fe 8413                   sty HANDLE
   940                          MESSAG
   941  8500 bd9881                 lda TEXT,x                                     ; Print message
   942  8503 08                     php
   943  8504 297f                   and #$7f                                       ; Remove flag bit
   944  8506 200e85                 jsr OUT
   945  8509 e8                     inx
   946  850a 28                     plp                                            ; Retrieve flag
   947  850b 10f3                   bpl MESSAG                                     ; Bit 7 not set
   948  850d 60                     rts
   949                          
   950                          OUT
   951  850e a413                   ldy HANDLE                                     ; to screen?
   952  8510 f003                   beq OUTSCR
   953  8512 4cd4ff                 jmp osbput                                     ; Write a single byte A to an open file Y
   954                          
   955                          OUTSCR
   956  8515 c90d                   cmp #$0d
   957  8517 d002                   bne NCR
   958                          CROUT
   959  8519 a90d                   lda #$0d
   960                          NCR
   961  851b 4ce3ff                 jmp osasci                                     ; Print the char; Write character 13
   962                          
   963                          
   964                              ; ******************************
   965                              ; Main evaluation routine
   966                              ;    arg           -> ARG
   967                              ;    NIL           -> NIL
   968                              ;    number, entry -> same
   969                              ;    char          -> same
   970                              ;    list          -> eval fn
   971                              ; ******************************
   972                          NXEVAL
   973  851e a535                   lda WSA+1
   974  8520 d014                   bne NXEVAM
   975                          FSARG
   976  8522 00                     brk                                            ; No more args
   977                          
   978  8523 03                     !byte 3
   979  8524 546f6f2066657720...    !text "Too few arguments"
   980  8535 00                     !byte 0
   981                          
   982                          NXEVAM
   983  8536 20f588                 jsr NXTARH
   984                          
   985                              ; **** Main evaluator
   986                          EVALU
   987  8539 204785                 jsr KBCHK                                      ; Main entry
   988  853c f018                   beq EVAL1
   989  853e 00                     brk                                            ; Escape
   990                          
   991  853f 04                     !byte 4
   992  8540 457363617065           !text "Escape"
   993  8546 00                     !byte 0
   994                          
   995                          KBCHK
   996  8547 a216                   ldx #<(IODCB)
   997  8549 a004                   ldy #>(IODCB)
   998  854b a905                   lda #osword_read_io_memory
   999  854d 20f1ff                 jsr osword                                     ; Read byte of I/O processor memory
  1000  8550 a980                   lda #$80
  1001  8552 2d1a04                 and IODCB+4
  1002  8555 60                     rts
  1003                          
  1004                          EVAL1
  1005  8556 a531                   lda ARG+1
  1006  8558 f051                   beq EVARTS                                     ; NIL?
  1007  855a a000                   ldy #0
  1008  855c b130                   lda (ARG),y                                    ; Check type
  1009  855e 300f                   bmi EVLIST
  1010  8560 d049                   bne EVARTS
  1011  8562 a002                   ldy #2
  1012  8564 b130                   lda (ARG),y
  1013  8566 aa                     tax
  1014  8567 c8                     iny                                            ; Get value cell
  1015  8568 b130                   lda (ARG),y
  1016  856a 8630                   stx ARG
  1017  856c 8531                   sta ARG+1
  1018  856e 60                     rts
  1019                          
  1020                          EVLIST
  1021  856f 209383                 jsr STACK
  1022  8572 a004                   ldy #4
  1023  8574 b130                   lda (ARG),y
  1024  8576 8535                   sta WSA+1
  1025  8578 88                     dey
  1026  8579 b130                   lda (ARG),y
  1027  857b 8534                   sta WSA
  1028  857d 88                     dey
  1029  857e b130                   lda (ARG),y
  1030  8580 aa                     tax
  1031  8581 88                     dey
  1032  8582 b130                   lda (ARG),y
  1033  8584 8631                   stx ARG+1
  1034  8586 8530                   sta ARG
  1035  8588 20ac85                 jsr FUN
  1036  858b 203985                 jsr EVALU
  1037  858e 20ac85                 jsr FUN
  1038  8591 203985                 jsr EVALU
  1039  8594 20ac85                 jsr FUN
  1040                          FUNERR
  1041  8597 00                     brk                                            ; Can't make function
  1042                          
  1043  8598 06                     !byte 6
  1044  8599 46756e6374696f6e...    !text "Function expected"
  1045  85aa 00                     !byte 0
  1046                          
  1047                          EVARTS
  1048  85ab 60                     rts
  1049                          
  1050                          FUN
  1051  85ac a531                   lda ARG+1
  1052  85ae f0e7                   beq FUNERR
  1053  85b0 a000                   ldy #0
  1054  85b2 b130                   lda (ARG),y
  1055  85b4 f0f5                   beq EVARTS                                     ; Char atom
  1056  85b6 1012                   bpl ENT
  1057  85b8 c8                     iny                                            ; Lambda?
  1058  85b9 b130                   lda (ARG),y
  1059  85bb c918                   cmp #<LAMBDA
  1060  85bd d0ec                   bne EVARTS
  1061  85bf c8                     iny
  1062  85c0 b130                   lda (ARG),y
  1063  85c2 cd2c04                 cmp IMBOT
  1064  85c5 d0e4                   bne EVARTS
  1065  85c7 4c6786                 jmp LAMOK
  1066                          
  1067                          ENT
  1068  85ca a8                     tay                                            ; Probably entry
  1069  85cb 68                     pla
  1070  85cc 68                     pla
  1071  85cd a530                   lda ARG
  1072  85cf 8538                   sta WSC                                        ; Keep fn safe
  1073  85d1 a531                   lda ARG+1
  1074  85d3 8539                   sta WSC+1
  1075  85d5 a20a                   ldx #$0a
  1076  85d7 8633                   stx TVSEXT
  1077  85d9 c00c                   cpy #FSUBRF
  1078  85db f04a                   beq ISFSBR
  1079  85dd c008                   cpy #SUBRF
  1080  85df f017                   beq ISSUBR
  1081  85e1 d0b4                   bne FUNERR                                     ; Oops a number!
  1082                          MORAG
  1083  85e3 203685                 jsr NXEVAM
  1084  85e6 a633                   ldx TVSEXT
  1085  85e8 e042                   cpx #$42
  1086  85ea b01f                   bcs NARGER
  1087  85ec a530                   lda ARG                                        ; Args eval in TVS
  1088  85ee 9530                   sta TVS,x
  1089  85f0 e8                     inx
  1090  85f1 a531                   lda ARG+1
  1091  85f3 9530                   sta TVS,x
  1092  85f5 e8                     inx
  1093  85f6 8633                   stx TVSEXT
  1094                          ISSUBR
  1095  85f8 a535                   lda WSA+1
  1096  85fa d0e7                   bne MORAG
  1097                          INSUBR
  1098  85fc a001                   ldy #1
  1099  85fe b138                   lda (WSC),y
  1100  8600 0a                     asl
  1101  8601 18                     clc
  1102  8602 690a                   adc #$0a
  1103  8604 aa                     tax
  1104  8605 e433                   cpx TVSEXT
  1105  8607 f01e                   beq ISFSBR
  1106  8609 901c                   bcc ISFSBR
  1107                          NARGER
  1108  860b 00                     brk                                            ; Wrong
  1109                          
  1110  860c 06                     !byte 6
  1111  860d 57726f6e67206e75...    !text "Wrong number of arguments"
  1112  8626 00                     !byte 0
  1113                          
  1114                          ISFSBR
  1115  8627 a003                   ldy #3
  1116  8629 b138                   lda (WSC),y
  1117  862b f02c                   beq GOSUB
  1118  862d 8584                   sta WSD+1
  1119  862f 88                     dey
  1120  8630 b138                   lda (WSC),y
  1121  8632 8583                   sta WSD                                        ; List in WSD
  1122  8634 4c4086                 jmp PLOP
  1123                          
  1124                          DEFLST
  1125  8637 48                     pha
  1126  8638 88                     dey
  1127  8639 b183                   lda (WSD),y
  1128  863b 8583                   sta WSD
  1129  863d 68                     pla
  1130  863e 8584                   sta WSD+1
  1131                          PLOP
  1132  8640 e433                   cpx TVSEXT                                     ; Default needed
  1133  8642 900b                   bcc SKIP
  1134  8644 a001                   ldy #1
  1135  8646 b183                   lda (WSD),y
  1136  8648 9530                   sta TVS,x
  1137  864a c8                     iny
  1138  864b b183                   lda (WSD),y
  1139  864d 9531                   sta TVS+1,x
  1140                          SKIP
  1141  864f e8                     inx
  1142  8650 e8                     inx
  1143  8651 a004                   ldy #4
  1144  8653 b183                   lda (WSD),y
  1145  8655 d0e0                   bne DEFLST
  1146  8657 8633                   stx TVSEXT
  1147                          GOSUB
  1148  8659 a004                   ldy #4                                         ; Go and do it!
  1149  865b b138                   lda (WSC),y
  1150  865d 8585                   sta RETADD
  1151  865f c8                     iny
  1152  8660 b138                   lda (WSC),y
  1153  8662 8586                   sta RETADD+1
  1154  8664 6c8500                 jmp (RETADD)                                   ; End of subrs
  1155                          
  1156                          
  1157                              ; ******************************
  1158                              ; Time for some lambda
  1159                              ; ******************************
  1160                          LAMOK
  1161  8667 68                     pla
  1162  8668 68                     pla
  1163  8669 a004                   ldy #4
  1164  866b b130                   lda (ARG),y
  1165  866d f034                   beq LAMERR                                     ; No parms or body
  1166  866f 8584                   sta WSD+1
  1167  8671 88                     dey
  1168  8672 b130                   lda (ARG),y
  1169  8674 8583                   sta WSD
  1170  8676 a20a                   ldx #$0a
  1171  8678 8633                   stx TVSEXT
  1172  867a a000                   ldy #0
  1173  867c b183                   lda (WSD),y
  1174  867e 1023                   bpl LAMERR
  1175  8680 c8                     iny
  1176  8681 b183                   lda (WSD),y                                    ; Parm list
  1177  8683 8536                   sta WSB
  1178  8685 c8                     iny
  1179  8686 b183                   lda (WSD),y
  1180  8688 8537                   sta WSB+1
  1181  868a c8                     iny
  1182  868b b183                   lda (WSD),y                                    ; Body in WSC
  1183  868d 8538                   sta WSC
  1184  868f c8                     iny
  1185  8690 b183                   lda (WSD),y
  1186  8692 8539                   sta WSC+1
  1187  8694 a537                   lda WSB+1                                      ; NIL parms?
  1188  8696 d003                   bne AVX
  1189  8698 4c3f87                 jmp XLAM
  1190                          
  1191                          AVX
  1192  869b a000                   ldy #0
  1193  869d b136                   lda (WSB),y
  1194  869f 302d                   bmi ISEXPR
  1195  86a1 f010                   beq ISFXP1                                     ; NB spelling!
  1196                          LAMERR
  1197  86a3 00                     brk                                            ; Syntax error
  1198                          
  1199  86a4 07                     !byte 7
  1200  86a5 4c616d6264612073...    !text "Lambda syntax"
  1201  86b2 00                     !byte 0
  1202                          
  1203                          ISFXP1
  1204  86b3 4c2e87                 jmp ISFXPR
  1205                          
  1206                          MORFAG
  1207  86b6 203685                 jsr NXEVAM
  1208  86b9 a633                   ldx TVSEXT                                     ; Spread args for expr
  1209  86bb e042                   cpx #$42
  1210  86bd 9003                   bcc GODARG
  1211  86bf 4c0b86                 jmp NARGER
  1212                          
  1213                          GODARG
  1214  86c2 a530                   lda ARG
  1215  86c4 9530                   sta TVS,x
  1216  86c6 e8                     inx
  1217  86c7 a531                   lda ARG+1
  1218  86c9 9530                   sta TVS,x
  1219  86cb e8                     inx
  1220  86cc 8633                   stx TVSEXT
  1221                          ISEXPR
  1222  86ce a535                   lda WSA+1
  1223  86d0 d0e4                   bne MORFAG
  1224                          RADON
  1225  86d2 a20a                   ldx #$0a
  1226                          XENON
  1227  86d4 a002                   ldy #2
  1228  86d6 b136                   lda (WSB),y
  1229  86d8 f0c9                   beq LAMERR
  1230  86da 8584                   sta WSD+1
  1231  86dc 88                     dey
  1232  86dd b136                   lda (WSB),y
  1233  86df 8583                   sta WSD
  1234  86e1 88                     dey
  1235  86e2 e433                   cpx TVSEXT                                     ; Enough args?
  1236  86e4 b183                   lda (WSD),y
  1237  86e6 f024                   beq DOBIND
  1238  86e8 10b9                   bpl LAMERR
  1239  86ea 900c                   bcc NOD
  1240  86ec a003                   ldy #3
  1241  86ee b183                   lda (WSD),y
  1242  86f0 9530                   sta TVS,x
  1243  86f2 c8                     iny                                            ; The default value?
  1244  86f3 b183                   lda (WSD),y
  1245  86f5 9531                   sta TVS+1,x
  1246  86f7 18                     clc
  1247                          NOD
  1248  86f8 a002                   ldy #2
  1249  86fa b183                   lda (WSD),y
  1250  86fc f0a5                   beq LAMERR                                     ; Get the atom bind
  1251  86fe 48                     pha
  1252  86ff 88                     dey
  1253  8700 b183                   lda (WSD),y
  1254  8702 8583                   sta WSD
  1255  8704 68                     pla
  1256  8705 8584                   sta WSD+1
  1257  8707 88                     dey
  1258  8708 b183                   lda (WSD),y
  1259  870a d097                   bne LAMERR                                     ; Must be char atom
  1260                          DOBIND
  1261  870c 9003                   bcc GADARG
  1262  870e 4c0b86                 jmp NARGER
  1263                          
  1264                          GADARG
  1265  8711 20ea83                 jsr BIND                                       ; Bind takes atom
  1266  8714 e8                     inx                                            ; in WSD and value in TVS + X
  1267  8715 e8                     inx
  1268  8716 a004                   ldy #4
  1269  8718 b136                   lda (WSB),y
  1270  871a f021                   beq XLAMB
  1271  871c 48                     pha
  1272  871d 88                     dey
  1273  871e b136                   lda (WSB),y
  1274  8720 8536                   sta WSB
  1275  8722 68                     pla
  1276  8723 8537                   sta WSB+1
  1277  8725 a000                   ldy #0
  1278  8727 b136                   lda (WSB),y
  1279  8729 30a9                   bmi XENON
  1280  872b 4ca386                 jmp LAMERR
  1281                          
  1282                          ISFXPR
  1283  872e a536                   lda WSB
  1284  8730 8583                   sta WSD
  1285  8732 a537                   lda WSB+1
  1286  8734 8584                   sta WSD+1
  1287  8736 a204                   ldx #4
  1288  8738 20ea83                 jsr BIND
  1289  873b a20a                   ldx #$0a
  1290                          XLAMB
  1291  873d 8633                   stx TVSEXT
  1292                          XLAM
  1293  873f a539                   lda WSC+1
  1294  8741 d00a                   bne XLAMC
  1295  8743 f024                   beq EVPOP
  1296                          XLAMD
  1297  8745 aa                     tax
  1298  8746 88                     dey
  1299  8747 b138                   lda (WSC),y
  1300  8749 8639                   stx WSC+1
  1301  874b 8538                   sta WSC
  1302                          XLAMC
  1303  874d a000                   ldy #0
  1304  874f b138                   lda (WSC),y
  1305  8751 3003                   bmi SYNNED
  1306  8753 4ca386                 jmp LAMERR
  1307                          
  1308                          SYNNED
  1309  8756 c8                     iny
  1310  8757 b138                   lda (WSC),y
  1311  8759 8530                   sta ARG
  1312  875b c8                     iny
  1313  875c b138                   lda (WSC),y
  1314  875e 8531                   sta ARG+1
  1315  8760 203985                 jsr EVALU
  1316  8763 a004                   ldy #4
  1317  8765 b138                   lda (WSC),y
  1318  8767 d0dc                   bne XLAMD
  1319                          EVPOP
  1320  8769 4c3a83                 jmp POP
  1321                          
  1322                          
  1323                              ; **** Get a character
  1324                          GTCHAR
  1325  876c a413                   ldy HANDLE
  1326  876e f010                   beq KEYCH
  1327  8770 ad3004                 lda LSCHAR                                     ; From file
  1328  8773 1004                   bpl RENEW
  1329  8775 297f                   and #$7f
  1330  8777 1003                   bpl REOLD
  1331                          RENEW
  1332  8779 20d7ff                 jsr osbget                                     ; Read a single byte from an open file Y
  1333                          REOLD
  1334  877c 8d3004                 sta LSCHAR
  1335  877f 60                     rts
  1336                          
  1337                          KEYCH
  1338  8780 8a                     txa                                            ; From screen
  1339  8781 48                     pha
  1340  8782 a68c                   ldx LSBUFF
  1341  8784 e0f0                   cpx #$f0                                       ; => New line
  1342  8786 d029                   bne NNL
  1343                          
  1344                              ; **** Read a line
  1345  8788 241a                   bit LEVEL                                      ; Prompt masked?
  1346  878a 100d                   bpl READON
  1347  878c a58b                   lda DEPTH
  1348  878e aa                     tax
  1349                          PRDEPT
  1350  878f f008                   beq READON
  1351  8791 a95b                   lda #'['
  1352  8793 20eeff                 jsr oswrch                                     ; Write character 91
  1353  8796 ca                     dex
  1354  8797 10f6                   bpl PRDEPT
  1355                          READON
  1356  8799 a23e                   ldx #<(INCB)
  1357  879b a082                   ldy #>(INCB)
  1358  879d a900                   lda #osword_read_line
  1359  879f 20f1ff                 jsr osword                                     ; Read line; Read line from input stream (exits with C=1 if ESCAPE pressed)
  1360  87a2 9009                   bcc OKLINE
  1361                          RDCHER
  1362  87a4 00                     brk                                            ; Escape
  1363                          
  1364  87a5 1a                     !byte $1a
  1365  87a6 457363617065           !text "Escape"
  1366  87ac 00                     !byte 0
  1367                          
  1368                          OKLINE
  1369  87ad a9ff                   lda #$ff                                       ; Zero => newline
  1370  87af 858c                   sta LSBUFF
  1371                          NNL
  1372  87b1 e68c                   inc LSBUFF                                     ; Fetch char
  1373  87b3 68                     pla
  1374  87b4 aa                     tax                                            ; RESTORE X
  1375  87b5 a48c                   ldy LSBUFF
  1376  87b7 b90007                 lda DOSBUF,y                                   ; Get char form buffer
  1377  87ba c90d                   cmp #$0d
  1378  87bc d004                   bne XYZ
  1379  87be a0f0                   ldy #$f0
  1380  87c0 848c                   sty LSBUFF                                     ; New line next time
  1381                          XYZ
  1382  87c2 60                     rts
  1383                          
  1384                          RSREAD
  1385  87c3 a200                   ldx #0
  1386  87c5 868b                   stx DEPTH
  1387  87c7 8625                   stx LINENO
  1388  87c9 8613                   stx HANDLE
  1389  87cb a2f0                   ldx #$f0                                       ; Flag for new line
  1390  87cd 868c                   stx LSBUFF
  1391                          
  1392                              ; **** READ
  1393                          READ
  1394  87cf a2ff                   ldx #$ff
  1395  87d1 8631                   stx ARG+1                                      ; Flag for rubbish
  1396  87d3 209383                 jsr STACK
  1397                          NXCHAR
  1398  87d6 206c87                 jsr GTCHAR
  1399                          RPT
  1400  87d9 c90d                   cmp #$0d
  1401  87db f0f9                   beq NXCHAR
  1402  87dd c90a                   cmp #$0a
  1403  87df f0f5                   beq NXCHAR
  1404  87e1 c920                   cmp #' '
  1405  87e3 f0f1                   beq NXCHAR
  1406  87e5 c927                   cmp #'\''
  1407  87e7 d03d                   bne PARQU
  1408  87e9 a92d                   lda #<QUOTE                                    ; It's a quote
  1409  87eb 8534                   sta WSA
  1410  87ed ad2c04                 lda IMBOT
  1411  87f0 8535                   sta WSA+1
  1412                          ODDAT
  1413  87f2 20cf87                 jsr READ                                       ; Entry for atoms
  1414  87f5 205384                 jsr ALPAIR                                     ; Get list cell for it
  1415  87f8 a002                   ldy #2
  1416  87fa a531                   lda ARG+1
  1417  87fc 917a                   sta (POINT),y
  1418  87fe 88                     dey
  1419  87ff a530                   lda ARG
  1420  8801 917a                   sta (POINT),y
  1421  8803 a57b                   lda POINT+1
  1422  8805 8537                   sta WSB+1
  1423  8807 a57a                   lda POINT
  1424  8809 8536                   sta WSB
  1425  880b 205384                 jsr ALPAIR
  1426  880e a57a                   lda POINT
  1427  8810 8530                   sta ARG
  1428  8812 a57b                   lda POINT+1
  1429  8814 8531                   sta ARG+1
  1430  8816 a004                   ldy #4
  1431                          MORODD
  1432  8818 b93300                 lda TVSEXT,y
  1433  881b 9130                   sta (ARG),y
  1434  881d 88                     dey
  1435  881e d0f8                   bne MORODD
  1436  8820 4c3a83                 jmp POP
  1437                          
  1438                          RDLJMP
  1439  8823 4c7288                 jmp RDLIST
  1440                          
  1441                          PARQU
  1442  8826 c928                   cmp #'('
  1443  8828 f0f9                   beq RDLJMP
  1444  882a a2ff                   ldx #$ff                                       ; Some sort of atom
  1445  882c c921                   cmp #'!'                                       ; Escape
  1446  882e f015                   beq SPCATM
  1447  8830 a001                   ldy #1                                         ; Ordinary char atom
  1448  8832 20e588                 jsr TERMQ
  1449  8835 d011                   bne NORMAL
  1450                          QUEER
  1451  8837 00                     brk                                            ; Syntax error
  1452                          
  1453  8838 08                     !byte 8
  1454  8839 526561642073796e...    !text "Read syntax"
  1455  8844 00                     !byte 0
  1456                          
  1457                          SPCATM
  1458  8845 206c87                 jsr GTCHAR                                     ; Escaped char
  1459                          NORMAL
  1460  8848 e8                     inx                                            ; Fetch chars
  1461  8849 9d0006                 sta OSWBUF,x
  1462  884c 206c87                 jsr GTCHAR
  1463  884f c921                   cmp #'!'
  1464  8851 f0f2                   beq SPCATM
  1465  8853 a005                   ldy #5
  1466  8855 20e588                 jsr TERMQ
  1467  8858 d0ee                   bne NORMAL
  1468  885a 202089                 jsr PUTBCK
  1469                          
  1470                              ; ******************************
  1471                              ; Here check if numeric. Find
  1472                              ; or set up char atom.
  1473                              ; ******************************
  1474  885d 861d                   stx END
  1475  885f 204e89                 jsr MAKNUM
  1476  8862 9003                   bcc AMADE
  1477                          TRYCHR
  1478  8864 20ef89                 jsr MATCH
  1479                          AMADE
  1480  8867 a57a                   lda POINT
  1481  8869 8530                   sta ARG
  1482  886b a57b                   lda POINT+1
  1483  886d 8531                   sta ARG+1
  1484  886f 4c3a83                 jmp POP
  1485                          
  1486                          
  1487                              ; *** Read a list
  1488                          RDLIST
  1489  8872 a900                   lda #0
  1490  8874 8535                   sta WSA+1
  1491  8876 8537                   sta WSB+1
  1492  8878 e68b                   inc DEPTH
  1493  887a 201189                 jsr LCHAR
  1494  887d c92e                   cmp #'.'
  1495  887f d010                   bne LON
  1496  8881 206c87                 jsr GTCHAR
  1497                          DOTTY
  1498  8884 00                     brk                                            ; Dot syntax
  1499                          
  1500  8885 09                     !byte 9
  1501  8886 446f742073796e74...    !text "Dot syntax"
  1502  8890 00                     !byte 0
  1503                          
  1504                          LON
  1505  8891 20cf87                 jsr READ
  1506  8894 205384                 jsr ALPAIR
  1507  8897 a67a                   ldx POINT
  1508  8899 a57b                   lda POINT+1
  1509  889b a437                   ldy WSB+1                                      ; First element?
  1510  889d f00c                   beq NEWLST
  1511  889f a004                   ldy #4
  1512  88a1 9136                   sta (WSB),y
  1513  88a3 8a                     txa
  1514  88a4 88                     dey
  1515  88a5 9136                   sta (WSB),y
  1516  88a7 a57b                   lda POINT+1
  1517  88a9 d004                   bne ALLIST                                     ; Always taken
  1518                          NEWLST
  1519  88ab 8634                   stx WSA
  1520  88ad 8535                   sta WSA+1
  1521                          ALLIST
  1522  88af 8636                   stx WSB
  1523  88b1 8537                   sta WSB+1
  1524  88b3 a001                   ldy #1
  1525  88b5 a530                   lda ARG
  1526  88b7 9136                   sta (WSB),y
  1527  88b9 c8                     iny
  1528  88ba a531                   lda ARG+1
  1529  88bc 9136                   sta (WSB),y
  1530  88be 201189                 jsr LCHAR
  1531  88c1 c92e                   cmp #'.'
  1532  88c3 d0cc                   bne LON
  1533  88c5 206c87                 jsr GTCHAR                                     ; Dotted pair at end
  1534  88c8 20cf87                 jsr READ
  1535  88cb a004                   ldy #4
  1536  88cd a531                   lda ARG+1
  1537  88cf 9136                   sta (WSB),y
  1538  88d1 88                     dey
  1539  88d2 a530                   lda ARG
  1540  88d4 9136                   sta (WSB),y
  1541  88d6 201189                 jsr LCHAR                                      ; Shouldn't return
  1542  88d9 4c8488                 jmp DOTTY                                      ; Dot syntax error
  1543                          
  1544                          READX
  1545  88dc 20948a                 jsr FILGB
  1546  88df 20cf87                 jsr READ
  1547  88e2 4c3a83                 jmp POP
  1548                          
  1549                          
  1550                              ; **** Look for terminators
  1551                          TERMQ
  1552  88e5 d94382                 cmp TERMS,y
  1553  88e8 f003                   beq TERRTS
  1554  88ea 88                     dey
  1555  88eb 10f8                   bpl TERMQ
  1556                          TERRTS
  1557  88ed 60                     rts
  1558                          
  1559                          
  1560                              ; **** Next arg from WSA's list
  1561                          NXTARG
  1562  88ee a535                   lda WSA+1
  1563  88f0 d003                   bne NXTARH
  1564                          ARGERR
  1565  88f2 4c2285                 jmp FSARG
  1566                          
  1567                          NXTARH
  1568  88f5 a000                   ldy #0
  1569  88f7 b134                   lda (WSA),y
  1570  88f9 10f7                   bpl ARGERR
  1571  88fb c8                     iny
  1572  88fc b134                   lda (WSA),y
  1573  88fe 8530                   sta ARG
  1574  8900 c8                     iny
  1575  8901 b134                   lda (WSA),y
  1576  8903 8531                   sta ARG+1
  1577  8905 c8                     iny
  1578  8906 b134                   lda (WSA),y
  1579  8908 aa                     tax
  1580  8909 c8                     iny
  1581  890a b134                   lda (WSA),y
  1582  890c 8634                   stx WSA
  1583  890e 8535                   sta WSA+1
  1584  8910 60                     rts
  1585                          
  1586                          LCHAR
  1587  8911 206c87                 jsr GTCHAR
  1588  8914 c920                   cmp #' '
  1589  8916 f0f9                   beq LCHAR
  1590  8918 c90d                   cmp #$0d
  1591  891a f0f5                   beq LCHAR
  1592  891c c929                   cmp #')'
  1593  891e f01f                   beq LISTND
  1594                          PUTBCK
  1595  8920 48                     pha
  1596  8921 a413                   ldy HANDLE
  1597  8923 d010                   bne EXFILE                                     ; Reverse file pointer
  1598  8925 a48c                   ldy LSBUFF
  1599  8927 1007                   bpl MIDBUF
  1600  8929 a90d                   lda #$0d                                       ; Fudge CR into buffer
  1601  892b 8d0007                 sta DOSBUF
  1602  892e a000                   ldy #0
  1603                          MIDBUF
  1604  8930 88                     dey
  1605  8931 848c                   sty LSBUFF
  1606  8933 68                     pla
  1607  8934 60                     rts
  1608                          
  1609                          EXFILE
  1610  8935 ad3004                 lda LSCHAR                                     ; COS version
  1611  8938 0980                   ora #$80
  1612  893a 8d3004                 sta LSCHAR
  1613  893d 68                     pla
  1614  893e 60                     rts
  1615                          
  1616                          LISTND
  1617  893f c68b                   dec DEPTH
  1618  8941 a534                   lda WSA
  1619  8943 8530                   sta ARG
  1620  8945 a535                   lda WSA+1
  1621  8947 8531                   sta ARG+1
  1622  8949 68                     pla
  1623  894a 68                     pla
  1624  894b 4c3a83                 jmp POP
  1625                          
  1626                          
  1627                              ; **** Make number in POINT
  1628                          MAKNUM
  1629  894e a200                   ldx #0                                         ; Text from IMBUF
  1630  8950 8678                   stx SIGN
  1631  8952 8672                   stx ACL
  1632  8954 8673                   stx ACL+1
  1633  8956 bd0006                 lda OSWBUF,x
  1634  8959 c92d                   cmp #'-'
  1635  895b d009                   bne PLUSS
  1636  895d 8578                   sta SIGN
  1637  895f e8                     inx
  1638  8960 a41d                   ldy END
  1639  8962 c000                   cpy #0
  1640  8964 f06c                   beq MKRTS
  1641                          PLUSS
  1642  8966 bd0006                 lda OSWBUF,x
  1643  8969 38                     sec
  1644  896a e930                   sbc #$30
  1645  896c c90a                   cmp #$0a
  1646  896e b062                   bcs MKRTS                                      ; Not a digit
  1647  8970 858f                   sta ACIN
  1648  8972 a000                   ldy #0
  1649  8974 a572                   lda ACL                                        ; *10 now
  1650  8976 0a                     asl
  1651  8977 8572                   sta ACL
  1652  8979 2673                   rol ACL+1                                      ; That's * 2
  1653  897b b040                   bcs MKOVFL                                     ; Overflow
  1654  897d 0a                     asl
  1655  897e 9002                   bcc YIA
  1656  8980 a002                   ldy #2
  1657                          YIA
  1658  8982 0a                     asl
  1659  8983 9002                   bcc YIB
  1660  8985 c8                     iny
  1661  8986 18                     clc
  1662                          YIB
  1663  8987 658f                   adc ACIN
  1664  8989 9002                   bcc YIC
  1665  898b c8                     iny
  1666  898c 18                     clc
  1667                          YIC
  1668  898d 6572                   adc ACL
  1669  898f 8572                   sta ACL
  1670  8991 9001                   bcc YID
  1671  8993 c8                     iny
  1672                          YID
  1673  8994 a573                   lda ACL+1
  1674  8996 0a                     asl
  1675  8997 b024                   bcs MKOVFL
  1676  8999 0a                     asl
  1677  899a b021                   bcs MKOVFL
  1678  899c 6573                   adc ACL+1
  1679  899e 8573                   sta ACL+1
  1680  89a0 b01b                   bcs MKOVFL
  1681  89a2 98                     tya
  1682  89a3 6573                   adc ACL+1
  1683  89a5 b016                   bcs MKOVFL
  1684  89a7 8573                   sta ACL+1
  1685  89a9 e41d                   cpx END
  1686  89ab e8                     inx
  1687  89ac 90b8                   bcc PLUSS                                      ; Any more digits?
  1688  89ae a578                   lda SIGN
  1689  89b0 f00d                   beq PLUSSS
  1690  89b2 a000                   ldy #0                                         ; Reverse sign if -ve
  1691  89b4 a272                   ldx #<ACL
  1692  89b6 2034a0                 jsr MD
  1693  89b9 a673                   ldx ACL+1
  1694  89bb 3006                   bmi NTOVFL
  1695                          MKOVFL
  1696  89bd 38                     sec
  1697  89be 60                     rts                                            ; Not number
  1698                          
  1699                          PLUSSS
  1700  89bf a673                   ldx ACL+1
  1701  89c1 30fa                   bmi MKOVFL
  1702                          NTOVFL
  1703  89c3 203d84                 jsr ALNUM
  1704  89c6 a003                   ldy #3
  1705  89c8 a573                   lda ACL+1
  1706  89ca 917a                   sta (POINT),y
  1707  89cc 88                     dey
  1708  89cd a572                   lda ACL
  1709  89cf 917a                   sta (POINT),y
  1710  89d1 18                     clc
  1711                          MKRTS
  1712  89d2 60                     rts
  1713                          
  1714                          NEXTAD
  1715  89d3 e687                   inc AD
  1716  89d5 d002                   bne NEXTAA
  1717  89d7 e688                   inc AD+1
  1718                          NEXTAA
  1719  89d9 e61e                   inc AA
  1720  89db d002                   bne NAAB
  1721  89dd e61f                   inc AA+1
  1722                          NAAB
  1723  89df a51e                   lda AA
  1724  89e1 c520                   cmp AB
  1725  89e3 a51f                   lda AA+1
  1726  89e5 e521                   sbc AB+1
  1727  89e7 60                     rts
  1728                          
  1729                          
  1730                              ; ******************************
  1731                              ; MATCH tries to find a string
  1732                              ; to match the string in IMBUF.
  1733                              ; If it cannot it makes up a
  1734                              ; new atom.
  1735                              ; ******************************
  1736                          LETTER
  1737  89e8 8d0006                 sta OSWBUF
  1738  89eb a000                   ldy #0
  1739  89ed 841d                   sty END
  1740                          MATCH
  1741  89ef 20be9a                 jsr SETCEL
  1742  89f2 e61d                   inc END
  1743  89f4 a51d                   lda END
  1744  89f6 18                     clc
  1745  89f7 6906                   adc #6
  1746  89f9 8573                   sta ACL+1
  1747  89fb 9012                   bcc CHKCLL
  1748                          LONGER
  1749  89fd 00                     brk                                            ; String too long
  1750                          
  1751  89fe 0a                     !byte $0a
  1752  89ff 537472696e672074...    !text "String too long"
  1753  8a0e 00                     !byte 0
  1754                          
  1755                          CHKCLL
  1756  8a0f a000                   ldy #0
  1757                          CHKCLM
  1758  8a11 b17c                   lda (CELL),y
  1759  8a13 d036                   bne NXTCLL
  1760  8a15 c8                     iny
  1761  8a16 b17c                   lda (CELL),y
  1762  8a18 c573                   cmp ACL+1
  1763  8a1a d02f                   bne NXTCLL
  1764  8a1c a57c                   lda CELL
  1765  8a1e 6905                   adc #5
  1766  8a20 8587                   sta AD
  1767  8a22 a57d                   lda CELL+1
  1768  8a24 6900                   adc #0
  1769  8a26 8588                   sta AD+1
  1770  8a28 a41d                   ldy END
  1771  8a2a 1009                   bpl TESTY
  1772                          MCOP
  1773  8a2c 88                     dey
  1774  8a2d b90006                 lda OSWBUF,y                                   ; Chars the same?
  1775  8a30 d187                   cmp (AD),y
  1776  8a32 d017                   bne NXTCLL
  1777  8a34 98                     tya
  1778                          TESTY
  1779  8a35 d0f5                   bne MCOP
  1780  8a37 a57d                   lda CELL+1
  1781  8a39 a67c                   ldx CELL                                       ; NIL?
  1782  8a3b 867a                   stx POINT
  1783  8a3d e024                   cpx #<NIL
  1784  8a3f d007                   bne BOX
  1785  8a41 ed2c04                 sbc IMBOT
  1786  8a44 f002                   beq BOX
  1787  8a46 a57d                   lda CELL+1
  1788                          BOX
  1789  8a48 857b                   sta POINT+1
  1790  8a4a 60                     rts                                            ; It's found
  1791                          
  1792                          NXTCLL
  1793  8a4b 20708a                 jsr NXCELL
  1794  8a4e 90c1                   bcc CHKCLM
  1795  8a50 a573                   lda ACL+1
  1796  8a52 204384                 jsr ALCHAR
  1797  8a55 a57a                   lda POINT
  1798  8a57 18                     clc
  1799  8a58 6906                   adc #6
  1800  8a5a 8587                   sta AD
  1801  8a5c a57b                   lda POINT+1
  1802  8a5e 6900                   adc #0
  1803  8a60 8588                   sta AD+1
  1804  8a62 a41d                   ldy END
  1805  8a64 1007                   bpl TOSTIG
  1806                          MCAP
  1807  8a66 88                     dey
  1808  8a67 b90006                 lda OSWBUF,y
  1809  8a6a 9187                   sta (AD),y
  1810  8a6c 98                     tya
  1811                          TOSTIG
  1812  8a6d d0f7                   bne MCAP
  1813  8a6f 60                     rts                                            ; New cell made
  1814                          
  1815                          NXCELL
  1816  8a70 a000                   ldy #0                                         ; Given pointer
  1817  8a72 b17c                   lda (CELL),y                                   ; in CELL, finds next
  1818  8a74 18                     clc                                            ; CELL
  1819  8a75 300a                   bmi SIX
  1820  8a77 c908                   cmp #8
  1821  8a79 b006                   bcs SIX
  1822  8a7b c8                     iny
  1823  8a7c b17c                   lda (CELL),y
  1824  8a7e 88                     dey
  1825  8a7f f002                   beq GOT
  1826                          SIX
  1827  8a81 a905                   lda #5
  1828                          GOT
  1829  8a83 657c                   adc CELL
  1830  8a85 857c                   sta CELL
  1831  8a87 9002                   bcc HCOK
  1832  8a89 e67d                   inc CELL+1
  1833                          HCOK
  1834  8a8b cd2d04                 cmp AREVAL
  1835  8a8e a57d                   lda CELL+1
  1836  8a90 ed2e04                 sbc AREVAL+1
  1837  8a93 60                     rts
  1838                          
  1839                          FILGB
  1840  8a94 a633                   ldx TVSEXT
  1841  8a96 e00c                   cpx #$0c
  1842  8a98 a900                   lda #0
  1843  8a9a 9007                   bcc ZIP
  1844                          FILGC
  1845  8a9c 208794                 jsr ALLNUM
  1846  8a9f a002                   ldy #2
  1847  8aa1 b13a                   lda (ARGA),y
  1848                          ZIP
  1849  8aa3 8513                   sta HANDLE
  1850  8aa5 60                     rts
  1851                          
  1852                          IPLINE
  1853  8aa6 20948a                 jsr FILGB
  1854  8aa9 a2ff                   ldx #$ff
  1855                          MOLIN
  1856  8aab 206c87                 jsr GTCHAR
  1857  8aae e8                     inx
  1858  8aaf 9d0006                 sta OSWBUF,x
  1859  8ab2 c90d                   cmp #$0d
  1860  8ab4 d0f5                   bne MOLIN
  1861  8ab6 ca                     dex                                            ; Don't want CR at end.
  1862  8ab7 861d                   stx END
  1863  8ab9 4c6488                 jmp TRYCHR
  1864                          
  1865                          
  1866                              ; ******************************
  1867                              ; Here there be the point
  1868                              ; routines of various types:
  1869                              ; ******************************
  1870                              ; **** Intercept return addr
  1871                          GETSSP
  1872  8abc a57e                   lda SP                                         ; Find SSP ret addr
  1873  8abe 857a                   sta POINT
  1874  8ac0 a57f                   lda SP+1
  1875  8ac2 857b                   sta POINT+1
  1876  8ac4 a000                   ldy #0
  1877  8ac6 b17a                   lda (POINT),y
  1878  8ac8 18                     clc
  1879  8ac9 657a                   adc POINT
  1880  8acb 857a                   sta POINT
  1881  8acd 9002                   bcc STINC
  1882  8acf e67b                   inc POINT+1
  1883                          STINC
  1884  8ad1 c8                     iny
  1885  8ad2 b17a                   lda (POINT),y
  1886  8ad4 a8                     tay
  1887  8ad5 88                     dey
  1888  8ad6 60                     rts
  1889                          
  1890                          
  1891                              ; **** WRITE
  1892                          WRIT
  1893  8ad7 20bc8a                 jsr GETSSP                                     ; Locate ret addr
  1894  8ada b17a                   lda (POINT),y
  1895  8adc 48                     pha
  1896  8add a98a                   lda #>WRITGO
  1897  8adf 917a                   sta (POINT),y
  1898  8ae1 88                     dey
  1899  8ae2 b17a                   lda (POINT),y
  1900  8ae4 48                     pha
  1901  8ae5 a9eb                   lda #<WRITGO+2
  1902  8ae7 917a                   sta (POINT),y
  1903                          WRITGO
  1904  8ae9 4cf28a                 jmp WRTTZ
  1905                          
  1906  8aec a90d                   lda #$0d
  1907  8aee 200e85                 jsr OUT
  1908  8af1 60                     rts
  1909                          
  1910                          
  1911                              ; **** WRITE0
  1912                          WRTTZ
  1913  8af2 20598b                 jsr FILG
  1914  8af5 a9ff                   lda #$ff
  1915  8af7 8d2f04                 sta ESCHF
  1916  8afa a20c                   ldx #$0c
  1917  8afc d037                   bne GENWRI
  1918                          
  1919                              ; **** Error entry
  1920                          PRINTE
  1921  8afe 209383                 jsr STACK
  1922  8b01 4c0c8b                 jmp PRINTC
  1923                          
  1924                          
  1925                              ; **** PRINT
  1926                          PRINT
  1927  8b04 a9ff                   lda #$ff                                       ; Put in esc char
  1928  8b06 3006                   bmi PRINT1
  1929                          
  1930                              ; **** PRIN
  1931                          PRINZ
  1932  8b08 a9ff                   lda #$ff
  1933  8b0a 3020                   bmi PRIN1
  1934                          
  1935                              ; **** PRINTC
  1936                          PRINTC
  1937  8b0c a900                   lda #0
  1938                          PRINT1
  1939  8b0e 8d2f04                 sta ESCHF
  1940  8b11 20bc8a                 jsr GETSSP
  1941  8b14 b17a                   lda (POINT),y
  1942  8b16 48                     pha
  1943  8b17 a98b                   lda #>PRINGO
  1944  8b19 917a                   sta (POINT),y
  1945  8b1b 88                     dey
  1946  8b1c b17a                   lda (POINT),y
  1947  8b1e 48                     pha
  1948  8b1f a925                   lda #<PRINGO+2
  1949  8b21 917a                   sta (POINT),y
  1950                          PRINGO
  1951  8b23 4c2f8b                 jmp PRINOK
  1952                          
  1953  8b26 201985                 jsr CROUT
  1954  8b29 60                     rts
  1955                          
  1956                          
  1957                              ; **** PRINC
  1958                          PRINC
  1959  8b2a a900                   lda #0
  1960                          PRIN1
  1961  8b2c 8d2f04                 sta ESCHF
  1962                          PRINOK
  1963  8b2f a000                   ldy #0
  1964  8b31 8413                   sty HANDLE
  1965  8b33 a20a                   ldx #$0a
  1966                          GENWRI
  1967  8b35 a900                   lda #0
  1968  8b37 e433                   cpx TVSEXT                                     ; NO ARGS?
  1969  8b39 b01b                   bcs NILFR
  1970                          PRON
  1971  8b3b b530                   lda TVS,x
  1972  8b3d 8530                   sta ARG
  1973  8b3f e8                     inx
  1974  8b40 b530                   lda TVS,x
  1975  8b42 8531                   sta ARG+1
  1976  8b44 e8                     inx
  1977  8b45 8689                   stx XPR
  1978  8b47 20868b                 jsr PRINB
  1979  8b4a a689                   ldx XPR
  1980  8b4c e433                   cpx TVSEXT
  1981  8b4e 90eb                   bcc PRON
  1982  8b50 b52e                   lda TVS-2,x
  1983  8b52 8530                   sta ARG
  1984  8b54 b52f                   lda ARG-1,x
  1985                          NILFR
  1986  8b56 4c3883                 jmp POPA
  1987                          
  1988                          
  1989                              ; **** Get file handle
  1990                          FILG
  1991  8b59 a53b                   lda ARGA+1
  1992  8b5b f00f                   beq FILGER
  1993  8b5d a000                   ldy #0
  1994  8b5f b13a                   lda (ARGA),y
  1995  8b61 c904                   cmp #NUMF
  1996  8b63 d007                   bne FILGER
  1997  8b65 a002                   ldy #2
  1998  8b67 b13a                   lda (ARGA),y
  1999  8b69 8513                   sta HANDLE
  2000  8b6b 60                     rts
  2001                          
  2002                          FILGER
  2003  8b6c 4c9c94                 jmp NUER
  2004                          
  2005                          SAVAR
  2006  8b6f a530                   lda ARG                                        ; Saves ARG in WEB
  2007  8b71 8536                   sta WSB
  2008  8b73 a531                   lda ARG+1
  2009  8b75 8537                   sta WSB+1
  2010  8b77 60                     rts
  2011                          
  2012                          CCPR
  2013  8b78 00                     brk                                            ; Escape
  2014                          
  2015  8b79 0b                     !byte $0b
  2016  8b7a 457363617065           !text "Escape"
  2017  8b80 00                     !byte 0
  2018                          
  2019                          
  2020                              ; **** Just prints ARG
  2021                          PRINA
  2022  8b81 a900                   lda #0
  2023  8b83 8d2f04                 sta ESCHF
  2024                          PRINB
  2025  8b86 204785                 jsr KBCHK                                      ; Check for escape
  2026  8b89 d0ed                   bne CCPR
  2027  8b8b a531                   lda ARG+1
  2028  8b8d d005                   bne NPN                                        ; NIL?
  2029  8b8f a219                   ldx #NILOFF
  2030  8b91 4c0085                 jmp MESSAG                                     ; 'NIL'
  2031                          
  2032                          
  2033                              ; **** Main printer
  2034                          NPN
  2035  8b94 a000                   ldy #0
  2036  8b96 b130                   lda (ARG),y
  2037  8b98 1053                   bpl PATOMB                                     ; Atom or list?
  2038  8b9a a928                   lda #'('
  2039  8b9c 200e85                 jsr OUT
  2040  8b9f 209383                 jsr STACK                                      ; Since recursive
  2041  8ba2 a530                   lda ARG
  2042  8ba4 8534                   sta WSA
  2043  8ba6 a531                   lda ARG+1
  2044  8ba8 8535                   sta WSA+1
  2045  8baa d005                   bne NASTY
  2046                          
  2047                              ; **** Print list
  2048                          PLIST
  2049  8bac a920                   lda #' '
  2050  8bae 200e85                 jsr OUT
  2051                          NASTY
  2052  8bb1 20f588                 jsr NXTARH
  2053  8bb4 20868b                 jsr PRINB
  2054  8bb7 a535                   lda WSA+1
  2055  8bb9 f016                   beq RPP
  2056  8bbb a000                   ldy #0
  2057  8bbd b134                   lda (WSA),y
  2058  8bbf 30eb                   bmi PLIST
  2059  8bc1 a535                   lda WSA+1
  2060  8bc3 8531                   sta ARG+1
  2061  8bc5 a534                   lda WSA
  2062  8bc7 8530                   sta ARG
  2063  8bc9 a21c                   ldx #$1c
  2064  8bcb 200085                 jsr MESSAG
  2065  8bce 20e98b                 jsr PATOM
  2066                          RPP
  2067  8bd1 a929                   lda #')'
  2068  8bd3 200e85                 jsr OUT
  2069  8bd6 4c3a83                 jmp POP
  2070                          
  2071                          BADAT
  2072  8bd9 00                     brk                                            ; Unknown atom type
  2073                          
  2074  8bda 0c                     !byte $0c
  2075  8bdb 4261642061746f6d...    !text "Bad atom type"
  2076  8be8 00                     !byte 0
  2077                          
  2078                          
  2079                              ; **** Print atom
  2080                          PATOM
  2081  8be9 a000                   ldy #0
  2082  8beb b130                   lda (ARG),y
  2083                          PATOMB
  2084  8bed f024                   beq OKP                                        ; If char atom
  2085  8bef c904                   cmp #NUMF
  2086  8bf1 f04b                   beq PNUM                                       ; If number atom
  2087  8bf3 c908                   cmp #SUBRF
  2088  8bf5 f009                   beq HASH                                       ; If subr atom
  2089  8bf7 c90c                   cmp #FSUBRF
  2090  8bf9 d0de                   bne BADAT
  2091  8bfb a946                   lda #'F'                                       ; Fsubr
  2092  8bfd 200e85                 jsr OUT
  2093                          HASH
  2094  8c00 a258                   ldx #SUBOFF
  2095  8c02 200085                 jsr MESSAG
  2096  8c05 a005                   ldy #5
  2097  8c07 b130                   lda (ARG),y
  2098  8c09 8573                   sta ACL+1                                      ; Print entry addr.
  2099  8c0b 88                     dey
  2100  8c0c b130                   lda (ARG),y
  2101  8c0e 8572                   sta ACL
  2102  8c10 4c578c                 jmp PINT
  2103                          
  2104                          
  2105                              ; *** Char atoms
  2106                          OKP
  2107  8c13 208c8c                 jsr GENDS
  2108  8c16 a200                   ldx #0
  2109  8c18 f01e                   beq INCHP
  2110                          FOOT
  2111  8c1a a11e                   lda (AA,x)
  2112  8c1c ac2f04                 ldy ESCHF
  2113  8c1f 3006                   bmi ESCFT
  2114                          FTOUT
  2115  8c21 200e85                 jsr OUT
  2116  8c24 4c388c                 jmp INCHP
  2117                          
  2118                          ESCFT
  2119  8c27 a006                   ldy #6
  2120  8c29 20e588                 jsr TERMQ
  2121  8c2c d0f3                   bne FTOUT
  2122  8c2e 48                     pha                                            ; Save character
  2123  8c2f a921                   lda #'!'                                       ; Escape in char
  2124  8c31 200e85                 jsr OUT
  2125  8c34 68                     pla
  2126  8c35 4c218c                 jmp FTOUT
  2127                          
  2128                          INCHP
  2129  8c38 20d989                 jsr NEXTAA
  2130  8c3b 90dd                   bcc FOOT
  2131  8c3d 60                     rts
  2132                          
  2133                          
  2134                              ; **** Print a number
  2135                          PNUM
  2136  8c3e a002                   ldy #2
  2137  8c40 b130                   lda (ARG),y
  2138  8c42 8572                   sta ACL
  2139  8c44 c8                     iny
  2140  8c45 b130                   lda (ARG),y
  2141  8c47 8573                   sta ACL+1
  2142  8c49 100c                   bpl PINT
  2143  8c4b a92d                   lda #'-'
  2144  8c4d 200e85                 jsr OUT
  2145  8c50 a272                   ldx #ACL
  2146  8c52 a000                   ldy #0
  2147  8c54 2034a0                 jsr MD
  2148                          
  2149                              ; **** Actual number printer
  2150                          PINT
  2151  8c57 a205                   ldx #5
  2152  8c59 a900                   lda #0
  2153                          CLDIV
  2154  8c5b 9514                   sta NBUFF,x
  2155  8c5d ca                     dex
  2156  8c5e 10fb                   bpl CLDIV
  2157  8c60 8574                   sta XTNDL
  2158  8c62 8575                   sta XTNDL+1
  2159  8c64 8577                   sta AUXL+1
  2160  8c66 a90a                   lda #$0a
  2161  8c68 8576                   sta AUXL
  2162                          NOMSIN
  2163  8c6a 2005a0                 jsr DIV
  2164  8c6d a574                   lda XTNDL
  2165  8c6f 8474                   sty XTNDL
  2166  8c71 0930                   ora #$30
  2167  8c73 a619                   ldx NIND
  2168  8c75 9514                   sta NBUFF,x
  2169  8c77 e619                   inc NIND
  2170  8c79 a572                   lda ACL
  2171  8c7b 0573                   ora ACL+1
  2172  8c7d d0eb                   bne NOMSIN
  2173  8c7f a204                   ldx #4
  2174                          MDIGP
  2175  8c81 b514                   lda NBUFF,x
  2176  8c83 f003                   beq NDP
  2177  8c85 200e85                 jsr OUT
  2178                          NDP
  2179  8c88 ca                     dex
  2180  8c89 10f6                   bpl MDIGP
  2181  8c8b 60                     rts
  2182                          
  2183                          
  2184                              ; **** Finds end of char atom
  2185                          GENDS
  2186  8c8c a530                   lda ARG
  2187  8c8e a001                   ldy #1                                         ; Char atom
  2188  8c90 18                     clc
  2189  8c91 7130                   adc (ARG),y                                    ; AA +1 TO AB -1
  2190  8c93 88                     dey
  2191  8c94 8520                   sta AB
  2192  8c96 a531                   lda ARG+1
  2193  8c98 6900                   adc #0
  2194  8c9a 8521                   sta AB+1
  2195  8c9c a905                   lda #5
  2196  8c9e 6530                   adc ARG
  2197  8ca0 851e                   sta AA
  2198  8ca2 a531                   lda ARG+1
  2199  8ca4 6900                   adc #0
  2200  8ca6 851f                   sta AA+1
  2201  8ca8 60                     rts
  2202                          
  2203                          
  2204                              ; *** EOF
  2205                          EOF
  2206  8ca9 208794                 jsr ALLNUM
  2207  8cac a002                   ldy #2                                         ; Get file handle
  2208  8cae b13a                   lda (ARGA),y
  2209  8cb0 a8                     tay                                            ; Y=file handle
  2210  8cb1 a272                   ldx #ACL                                       ; Put pointer into ACL; X=zero page address for result
  2211  8cb3 a900                   lda #0
  2212  8cb5 20daff                 jsr osargs                                     ; Get sequential file pointer into zero page address X (A=0)
  2213  8cb8 a290                   ldx #ARGINF                                    ; File extent; X=zero page address for result
  2214  8cba a902                   lda #2
  2215  8cbc 20daff                 jsr osargs                                     ; Get length of file into zero page address X (A=2)
  2216  8cbf a202                   ldx #2
  2217                          EOFCP
  2218  8cc1 b572                   lda ACL,x
  2219  8cc3 d590                   cmp ARGINF,x
  2220  8cc5 d006                   bne EOFNO
  2221  8cc7 ca                     dex
  2222  8cc8 10f7                   bpl EOFCP
  2223  8cca 4c3183                 jmp YES
  2224                          
  2225                          EOFNO
  2226  8ccd 4c2d83                 jmp NO
  2227                          
  2228                          
  2229                              ; **** CLOSE
  2230                          CLOS
  2231  8cd0 208794                 jsr ALLNUM
  2232  8cd3 a002                   ldy #2
  2233  8cd5 b13a                   lda (ARGA),y
  2234  8cd7 a8                     tay
  2235  8cd8 a900                   lda #osfind_close                              ; Close file (A lost)
  2236  8cda 20ceff                 jsr osfind                                     ; Close one or all files
  2237  8cdd 4c2d83                 jmp NO
  2238                          
  2239                          
  2240                              ; ******************************
  2241                              ; File with CAR, CDR and COND
  2242                              ; functions.  Includes PROGN,
  2243                              ; PROGNA and POINTN as useful
  2244                              ; entry points.
  2245                              ; ******************************
  2246                          PARERR
  2247  8ce0 00                     brk                                            ; COND syntax
  2248                          
  2249  8ce1 0d                     !byte $0d
  2250  8ce2 434f4e442073796e...    !text "COND syntax"
  2251  8ced 00                     !byte 0
  2252                          
  2253                          
  2254                              ; **** COND
  2255                          COND
  2256  8cee a535                   lda WSA+1
  2257  8cf0 d003                   bne REMAIN
  2258  8cf2 4c3883                 jmp POPA
  2259                          
  2260                          REMAIN
  2261  8cf5 20f588                 jsr NXTARH
  2262  8cf8 a000                   ldy #0
  2263  8cfa b130                   lda (ARG),y
  2264  8cfc 10e2                   bpl PARERR
  2265  8cfe a004                   ldy #4                                         ; Split:
  2266  8d00 b130                   lda (ARG),y                                    ; Condition - ARG
  2267  8d02 8537                   sta WSB+1                                      ; Actions   - WSB
  2268  8d04 88                     dey                                            ; Rest      - WSA
  2269  8d05 b130                   lda (ARG),y
  2270  8d07 8536                   sta WSB
  2271  8d09 88                     dey
  2272  8d0a b130                   lda (ARG),y
  2273  8d0c aa                     tax
  2274  8d0d 88                     dey
  2275  8d0e b130                   lda (ARG),y
  2276  8d10 8631                   stx ARG+1
  2277  8d12 8530                   sta ARG
  2278  8d14 203985                 jsr EVALU
  2279  8d17 a531                   lda ARG+1                                      ; Condition NIL?
  2280  8d19 f0d3                   beq COND                                       ; Next condition duo
  2281  8d1b a537                   lda WSB+1
  2282  8d1d f00d                   beq PRGEND
  2283  8d1f 8535                   sta WSA+1
  2284  8d21 a536                   lda WSB
  2285  8d23 8534                   sta WSA
  2286                          MTODO
  2287  8d25 203685                 jsr NXEVAM
  2288                          PROGN
  2289  8d28 a535                   lda WSA+1
  2290  8d2a d0f9                   bne MTODO
  2291                          PRGEND
  2292  8d2c 4c3a83                 jmp POP
  2293                          
  2294                          
  2295                              ; **** UNTIL
  2296                          UNTIL
  2297  8d2f 201e85                 jsr NXEVAL
  2298  8d32 a531                   lda ARG+1
  2299  8d34 f0f6                   beq PRGEND
  2300  8d36 d00c                   bne WILLY
  2301                          
  2302                              ; **** WHILE
  2303                          WHILE
  2304  8d38 201e85                 jsr NXEVAL
  2305  8d3b a531                   lda ARG+1
  2306  8d3d d0ed                   bne PRGEND
  2307  8d3f f003                   beq WILLY
  2308                          WILL
  2309  8d41 203685                 jsr NXEVAM
  2310                          WILLY
  2311  8d44 a535                   lda WSA+1
  2312  8d46 d0f9                   bne WILL
  2313  8d48 8523                   sta REP
  2314  8d4a 4c3a83                 jmp POP
  2315                          
  2316                          
  2317                              ; **** QUOTE
  2318                          QUO
  2319  8d4d 20ee88                 jsr NXTARG
  2320  8d50 4c3a83                 jmp POP
  2321                          
  2322                          
  2323                              ; ******************************
  2324                              ; Now the CAR - CDR complex
  2325                              ; ******************************
  2326                          PERR
  2327  8d53 00                     brk                                            ; Atomic arg
  2328                          
  2329  8d54 0e                     !byte $0e
  2330  8d55 4341522f43445220...    !text "CAR/CDR of atom"
  2331  8d64 00                     !byte 0
  2332                          
  2333                          CDDDR
  2334  8d65 a21f                   ldx #$1f
  2335  8d67 d032                   bne CXR
  2336                          CADDR
  2337  8d69 a21b                   ldx #$1b
  2338  8d6b d02e                   bne CXR
  2339                          CDADR
  2340  8d6d a217                   ldx #$17
  2341  8d6f d02a                   bne CXR
  2342                          CAADR
  2343  8d71 a213                   ldx #$13
  2344  8d73 d026                   bne CXR
  2345                          CDDAR
  2346  8d75 a20f                   ldx #$0f
  2347  8d77 d022                   bne CXR
  2348                          CDDR
  2349  8d79 a20e                   ldx #$0e
  2350  8d7b d01e                   bne CXR
  2351                          CADAR
  2352  8d7d a20b                   ldx #$0b
  2353  8d7f d01a                   bne CXR
  2354                          CADR
  2355  8d81 a20a                   ldx #$0a
  2356  8d83 d016                   bne CXR
  2357                          CDAAR
  2358  8d85 a207                   ldx #7
  2359  8d87 d012                   bne CXR
  2360                          CDAR
  2361  8d89 a206                   ldx #6
  2362  8d8b d00e                   bne CXR
  2363                          CDR
  2364  8d8d a205                   ldx #5
  2365  8d8f d00a                   bne CXR
  2366                          CAAAR
  2367  8d91 a203                   ldx #3
  2368  8d93 d006                   bne CXR
  2369                          CAAR
  2370  8d95 a202                   ldx #2
  2371  8d97 d002                   bne CXR
  2372                          CAR
  2373  8d99 a201                   ldx #1
  2374                          CXR
  2375  8d9b a53a                   lda ARGA
  2376  8d9d 8530                   sta ARG
  2377  8d9f a53b                   lda ARGA+1
  2378  8da1 8531                   sta ARG+1
  2379                          CXLP
  2380  8da3 c900                   cmp #0
  2381  8da5 f0ac                   beq PERR
  2382  8da7 a000                   ldy #0
  2383  8da9 b130                   lda (ARG),y
  2384  8dab 10a6                   bpl PERR
  2385  8dad bc4b82                 ldy CXXXR,x
  2386  8db0 b130                   lda (ARG),y
  2387  8db2 48                     pha
  2388  8db3 88                     dey
  2389  8db4 b130                   lda (ARG),y
  2390  8db6 8530                   sta ARG
  2391  8db8 68                     pla
  2392  8db9 8531                   sta ARG+1
  2393  8dbb ca                     dex
  2394  8dbc bc4b82                 ldy CXXXR,x
  2395  8dbf d0e2                   bne CXLP
  2396  8dc1 4c3a83                 jmp POP
  2397                          
  2398                          
  2399                              ; **** ERROR
  2400                          ERRORL
  2401  8dc4 20fe8a                 jsr PRINTE
  2402                          LISPER
  2403  8dc7 00                     brk
  2404                          
  2405  8dc8 0f                     !byte $0f
  2406  8dc9 4552524f52206675...    !text "ERROR function"
  2407  8dd7 00                     !byte 0
  2408                          
  2409                          
  2410                              ; **** AND
  2411                          _AND
  2412  8dd8 a535                   lda WSA+1
  2413  8dda d003                   bne ANDON
  2414  8ddc 4c3183                 jmp YES
  2415                          
  2416                          ANDON
  2417  8ddf 203685                 jsr NXEVAM
  2418  8de2 a531                   lda ARG+1
  2419  8de4 d0f2                   bne _AND
  2420  8de6 4c2d83                 jmp NO
  2421                          
  2422                          
  2423                              ; **** OR
  2424                          OR
  2425  8de9 a535                   lda WSA+1
  2426  8deb d003                   bne ORON
  2427  8ded 4c2d83                 jmp NO
  2428                          
  2429                          ORON
  2430  8df0 203685                 jsr NXEVAM
  2431  8df3 a531                   lda ARG+1
  2432  8df5 f0f2                   beq OR
  2433  8df7 4c3183                 jmp YES
  2434                          
  2435                          
  2436                              ; **** LOOOP
  2437                          LOOP
  2438  8dfa a534                   lda WSA
  2439  8dfc 8538                   sta WSC
  2440  8dfe a535                   lda WSA+1
  2441  8e00 8539                   sta WSC+1
  2442                          RESTAR
  2443  8e02 a538                   lda WSC
  2444  8e04 8534                   sta WSA
  2445  8e06 a539                   lda WSC+1
  2446  8e08 8535                   sta WSA+1
  2447                          RIPON
  2448  8e0a a535                   lda WSA+1
  2449  8e0c f0f4                   beq RESTAR
  2450  8e0e 8523                   sta REP
  2451  8e10 203685                 jsr NXEVAM
  2452  8e13 a523                   lda REP
  2453  8e15 d0f3                   bne RIPON
  2454  8e17 a9ff                   lda #$ff
  2455  8e19 8523                   sta REP
  2456  8e1b 4c3a83                 jmp POP
  2457                          
  2458                          
  2459                              ; ******************************
  2460                              ; Extra LISP entry points
  2461                              ; ******************************
  2462                              ; **** CONS
  2463                          CONS
  2464  8e1e 205384                 jsr ALPAIR
  2465  8e21 a004                   ldy #4
  2466                          CONSLP
  2467  8e23 b93900                 lda WSC+1,y
  2468  8e26 917a                   sta (POINT),y
  2469  8e28 88                     dey
  2470  8e29 d0f8                   bne CONSLP
  2471  8e2b a57a                   lda POINT
  2472  8e2d 8530                   sta ARG
  2473  8e2f a57b                   lda POINT+1
  2474  8e31 4c3883                 jmp POPA
  2475                          
  2476                          
  2477                              ; **** SET
  2478                          SET
  2479  8e34 201e85                 jsr NXEVAL
  2480  8e37 4c3d8e                 jmp DOSET
  2481                          
  2482                          
  2483                              ; **** SETQ
  2484                          SETQ
  2485  8e3a 20ee88                 jsr NXTARG
  2486                          DOSET
  2487  8e3d a531                   lda ARG+1
  2488  8e3f f01a                   beq SETERR
  2489  8e41 a000                   ldy #0
  2490  8e43 b130                   lda (ARG),y
  2491  8e45 d014                   bne SETERR
  2492  8e47 206f8b                 jsr SAVAR
  2493  8e4a 201e85                 jsr NXEVAL
  2494  8e4d a002                   ldy #2                                         ; Alter value cell
  2495  8e4f a530                   lda ARG
  2496  8e51 9136                   sta (WSB),y
  2497  8e53 c8                     iny
  2498  8e54 a531                   lda ARG+1
  2499  8e56 9136                   sta (WSB),y
  2500  8e58 4c3a83                 jmp POP
  2501                          
  2502                          SETERR
  2503  8e5b 00                     brk                                            ; SET non-atomic
  2504                          
  2505  8e5c 10                     !byte $10
  2506  8e5d 4261642061737369...    !text "Bad assignment"
  2507  8e6b 00                     !byte 0
  2508                          
  2509                          
  2510                              ; **** LIST
  2511                          LIST
  2512  8e6c a900                   lda #0
  2513  8e6e 8531                   sta ARG+1
  2514  8e70 a633                   ldx TVSEXT
  2515  8e72 e00c                   cpx #$0c
  2516  8e74 902a                   bcc NOLLY
  2517                          LL
  2518  8e76 8622                   stx YSAV
  2519  8e78 205384                 jsr ALPAIR
  2520  8e7b a622                   ldx YSAV
  2521  8e7d a004                   ldy #4
  2522  8e7f a531                   lda ARG+1
  2523  8e81 917a                   sta (POINT),y
  2524  8e83 88                     dey
  2525  8e84 a530                   lda ARG
  2526  8e86 917a                   sta (POINT),y
  2527  8e88 ca                     dex
  2528  8e89 88                     dey
  2529  8e8a b530                   lda TVS,x
  2530  8e8c 917a                   sta (POINT),y
  2531  8e8e ca                     dex
  2532  8e8f 88                     dey
  2533  8e90 b530                   lda TVS,x
  2534  8e92 917a                   sta (POINT),y
  2535  8e94 a57a                   lda POINT
  2536  8e96 8530                   sta ARG
  2537  8e98 a57b                   lda POINT+1
  2538  8e9a 8531                   sta ARG+1
  2539  8e9c e00c                   cpx #$0c
  2540  8e9e b0d6                   bcs LL
  2541                          NOLLY
  2542  8ea0 4c3a83                 jmp POP
  2543                          
  2544                          
  2545                              ; **** VDU
  2546                          VDU
  2547  8ea3 208794                 jsr ALLNUM
  2548  8ea6 a20a                   ldx #$0a
  2549                          MVDU
  2550  8ea8 b530                   lda TVS,x
  2551  8eaa 8530                   sta ARG
  2552  8eac b531                   lda TVS+1,x
  2553  8eae 8531                   sta ARG+1
  2554  8eb0 a002                   ldy #2
  2555  8eb2 b130                   lda (ARG),y                                    ; LS byte of arg
  2556  8eb4 20eeff                 jsr oswrch                                     ; Write character
  2557  8eb7 e8                     inx
  2558  8eb8 e8                     inx
  2559  8eb9 e433                   cpx TVSEXT
  2560  8ebb 90eb                   bcc MVDU
  2561  8ebd 4c3a83                 jmp POP                                        ; Result is ARG
  2562                          
  2563                          
  2564                              ; ******************************
  2565                              ; Conditionals on numeric atoms
  2566                              ; ******************************
  2567                              ; **** CHARP
  2568                          CHARP
  2569  8ec0 a63b                   ldx ARGA+1
  2570  8ec2 f006                   beq YESNIL
  2571  8ec4 a000                   ldy #0
  2572  8ec6 b13a                   lda (ARGA),y
  2573  8ec8 d01e                   bne NNO
  2574                          YESNIL
  2575  8eca 4c3183                 jmp YES
  2576                          
  2577                          
  2578                              ; **** SUBRP
  2579                          SUBRP
  2580  8ecd a908                   lda #SUBRF
  2581  8ecf d00a                   bne TYPE
  2582                          
  2583                              ; **** FSUBRP
  2584                          FSUBRP
  2585  8ed1 a90c                   lda #FSUBRF
  2586  8ed3 d006                   bne TYPE
  2587                          
  2588                              ; **** LISTP
  2589                          LISTP
  2590  8ed5 a980                   lda #LISTF
  2591  8ed7 d002                   bne TYPE
  2592                          
  2593                              ; **** NUMBERP
  2594                          NUMP
  2595  8ed9 a904                   lda #NUMF
  2596                          TYPE
  2597  8edb a63b                   ldx ARGA+1
  2598  8edd f009                   beq NNO
  2599  8edf a000                   ldy #0
  2600  8ee1 d13a                   cmp (ARGA),y
  2601  8ee3 d003                   bne NNO
  2602  8ee5 4c3183                 jmp YES
  2603                          
  2604                          NNO
  2605  8ee8 4c2d83                 jmp NO
  2606                          
  2607                          
  2608                              ; **** ZEROP
  2609                          ZEROP
  2610  8eeb a200                   ldx #0
  2611  8eed f002                   beq TSN
  2612                          
  2613                              ; **** ONEP
  2614                          ONEP
  2615  8eef a201                   ldx #1
  2616                          TSN
  2617  8ef1 a53b                   lda ARGA+1
  2618  8ef3 f0f3                   beq NNO                                        ; CHECK IT IS NUM.
  2619  8ef5 a000                   ldy #0
  2620  8ef7 b13a                   lda (ARGA),y
  2621  8ef9 c904                   cmp #NUMF
  2622  8efb d0eb                   bne NNO
  2623  8efd a002                   ldy #2
  2624  8eff 8a                     txa
  2625  8f00 5130                   eor (ARG),y
  2626  8f02 c8                     iny
  2627  8f03 1130                   ora (ARG),y
  2628  8f05 d0e1                   bne NNO
  2629  8f07 4c3183                 jmp YES
  2630                          
  2631                          
  2632                              ; **** MINUSP
  2633                          MINUSP
  2634  8f0a a53b                   lda ARGA+1
  2635  8f0c f0da                   beq NNO
  2636  8f0e a000                   ldy #0
  2637  8f10 b13a                   lda (ARGA),y
  2638  8f12 c904                   cmp #NUMF
  2639  8f14 d0d2                   bne NNO
  2640  8f16 a003                   ldy #3
  2641  8f18 b130                   lda (ARG),y
  2642  8f1a 10cc                   bpl NNO
  2643  8f1c 4c3183                 jmp YES
  2644                          
  2645                          
  2646                              ; ******************************
  2647                              ; Set up DCB for file I/O
  2648                              ; ******************************
  2649                          SETDCB
  2650  8f1f 205290                 jsr MKNAM                                      ; Pointer to name
  2651  8f22 a982                   lda #osbyte_read_high_order_address            ; m/c higher order addr
  2652  8f24 20f4ff                 jsr osbyte                                     ; Read the filing system 'machine high order address'
  2653  8f27 a900                   lda #0
  2654  8f29 8d3e04                 sta OSINFO+6
  2655  8f2c a900                   lda #AREEXT                                    ; Load & save addr
  2656  8f2e 8d3a04                 sta OSINFO+2
  2657  8f31 8d4204                 sta OSINFO+10
  2658  8f34 ad2c04                 lda IMBOT
  2659  8f37 8d3b04                 sta OSINFO+3
  2660  8f3a 8d4304                 sta OSINFO+11
  2661  8f3d 8e3c04                 stx OSINFO+4
  2662  8f40 8e4404                 stx OSINFO+12
  2663  8f43 8c3d04                 sty OSINFO+5
  2664  8f46 8c4504                 sty OSINFO+13
  2665  8f49 ad2d04                 lda AREVAL                                     ; End addr
  2666  8f4c 8d4604                 sta OSINFO+14
  2667  8f4f ad2e04                 lda AREVAL+1
  2668  8f52 8d4704                 sta OSINFO+15
  2669  8f55 8e4804                 stx OSINFO+16
  2670  8f58 8c4904                 sty OSINFO+17
  2671  8f5b 60                     rts                                            ; DCB complete
  2672                          
  2673                          
  2674                              ; **** LOAD
  2675                          LOAD
  2676  8f5c 201f8f                 jsr SETDCB
  2677  8f5f a9ff                   lda #osfile_load                               ; Load operation
  2678  8f61 a238                   ldx #<(OSINFO)
  2679  8f63 a004                   ldy #>(OSINFO)
  2680  8f65 20ddff                 jsr osfile                                     ; Load named file (if XY+6 contains 0, use specified address) (A=255)
  2681                          INUREL
  2682  8f68 a900                   lda #AREEXT                                    ; Set up base
  2683  8f6a 857a                   sta RELBS
  2684  8f6c ad2c04                 lda IMBOT
  2685  8f6f 857b                   sta RELBS+1
  2686  8f71 20cf90                 jsr UNREL
  2687  8f74 4cb584                 jmp INIT                                       ; Re-start LISP
  2688                          
  2689                          
  2690                              ; **** DUMP
  2691                          DUMP
  2692  8f77 20469b                 jsr RUBBSH                                     ; GC
  2693  8f7a 201f8f                 jsr SETDCB                                     ; Set up before relat
  2694  8f7d 205d91                 jsr RELAT                                      ; Make relocatable
  2695  8f80 a900                   lda #osfile_save                               ; Save
  2696  8f82 a238                   ldx #<(OSINFO)
  2697  8f84 a004                   ldy #>(OSINFO)
  2698  8f86 20ddff                 jsr osfile                                     ; Save a block of memory (returning file length and attributes) (A=0)
  2699  8f89 4c3a83                 jmp POP
  2700                          
  2701                          CHARQ
  2702  8f8c a53b                   lda ARGA+1
  2703  8f8e f007                   beq FILERR
  2704                          CHARQR
  2705  8f90 a000                   ldy #0
  2706  8f92 b13a                   lda (ARGA),y
  2707  8f94 d001                   bne FILERR
  2708  8f96 60                     rts
  2709                          
  2710                          FILERR
  2711  8f97 00                     brk                                            ; Not char atom
  2712                          
  2713  8f98 11                     !byte $11
  2714  8f99 4368617261637465...    !text "Character atom expected"
  2715  8fb0 00                     !byte 0
  2716                          
  2717                          ATOA
  2718  8fb1 a53a                   lda ARGA
  2719  8fb3 8530                   sta ARG
  2720  8fb5 a53b                   lda ARGA+1
  2721  8fb7 8531                   sta ARG+1
  2722  8fb9 60                     rts
  2723                          
  2724                          ANUM
  2725  8fba 208794                 jsr ALLNUM
  2726  8fbd a003                   ldy #3
  2727  8fbf b13a                   lda (ARGA),y
  2728  8fc1 8573                   sta ACL+1
  2729  8fc3 88                     dey
  2730  8fc4 b13a                   lda (ARGA),y
  2731  8fc6 8572                   sta ACL
  2732  8fc8 60                     rts
  2733                          
  2734                          
  2735                              ; **** CALL
  2736                          CALL
  2737  8fc9 20ba8f                 jsr ANUM
  2738  8fcc a98f                   lda #>BACALL+1
  2739  8fce 48                     pha                                            ; Set up return
  2740  8fcf a9dd                   lda #<BACALL+1                                 ; address
  2741  8fd1 48                     pha
  2742  8fd2 b13c                   lda (ARGB),y                                   ; Get A
  2743  8fd4 6c7200                 jmp (ACL)                                      ; and call
  2744                          
  2745                          
  2746                              ; **** PEEK
  2747                          PEEK
  2748  8fd7 20ba8f                 jsr ANUM
  2749  8fda a000                   ldy #0
  2750                          BACALL
  2751  8fdc b172                   lda (ACL),y
  2752                          BECALM
  2753  8fde 8572                   sta ACL
  2754  8fe0 a900                   lda #0
  2755  8fe2 8573                   sta ACL+1
  2756  8fe4 4ca492                 jmp ACLRET
  2757                          
  2758                          
  2759                              ; **** POKE
  2760                          POKE
  2761  8fe7 20ba8f                 jsr ANUM
  2762  8fea b13c                   lda (ARGB),y
  2763  8fec a000                   ldy #0
  2764  8fee 9172                   sta (ACL),y
  2765  8ff0 a53c                   lda ARGB
  2766  8ff2 8530                   sta ARG
  2767  8ff4 a53d                   lda ARGB+1
  2768  8ff6 4c3883                 jmp POPA
  2769                          
  2770                          
  2771                              ; OBLIST
  2772                          OBLIST
  2773  8ff9 20be9a                 jsr SETCEL                                     ; Only want good
  2774  8ffc a000                   ldy #0                                         ; cells
  2775  8ffe 8431                   sty ARG+1
  2776                          BOOM
  2777  9000 b17c                   lda (CELL),y
  2778  9002 d031                   bne NEXOS
  2779  9004 203d90                 jsr USEFUL
  2780  9007 f02c                   beq NEXOS                                      ; Value UNDEFINED?
  2781  9009 a57c                   lda CELL
  2782  900b 8534                   sta WSA
  2783  900d a57d                   lda CELL+1
  2784  900f 8535                   sta WSA+1
  2785  9011 205384                 jsr ALPAIR
  2786  9014 a004                   ldy #4
  2787  9016 a531                   lda ARG+1
  2788  9018 917a                   sta (POINT),y
  2789  901a 88                     dey
  2790  901b a530                   lda ARG
  2791  901d 917a                   sta (POINT),y
  2792  901f 88                     dey
  2793  9020 a535                   lda WSA+1
  2794  9022 857d                   sta CELL+1
  2795  9024 917a                   sta (POINT),y
  2796  9026 88                     dey
  2797  9027 a534                   lda WSA
  2798  9029 857c                   sta CELL
  2799  902b 917a                   sta (POINT),y
  2800  902d a57b                   lda POINT+1
  2801  902f 8531                   sta ARG+1
  2802  9031 a57a                   lda POINT
  2803  9033 8530                   sta ARG
  2804                          NEXOS
  2805  9035 20708a                 jsr NXCELL
  2806  9038 90c6                   bcc BOOM
  2807  903a 4c3a83                 jmp POP
  2808                          
  2809                          USEFUL
  2810  903d a002                   ldy #2                                         ; Checks for
  2811  903f b17c                   lda (CELL),y                                   ; string rather than
  2812  9041 c902                   cmp #<ZA                                       ; OBLIST atoms
  2813  9043 d00c                   bne USABLE
  2814  9045 c8                     iny
  2815  9046 b17c                   lda (CELL),y
  2816  9048 cd2c04                 cmp IMBOT
  2817  904b d004                   bne USABLE
  2818  904d a005                   ldy #5                                         ; NIL P-list
  2819  904f b17c                   lda (CELL),y
  2820                          USABLE
  2821  9051 60                     rts
  2822                          
  2823                          
  2824                              ; **** Make DOS name
  2825                          MKNAM
  2826  9052 208c8f                 jsr CHARQ                                      ; FOR DOS
  2827  9055 a900                   lda #<NAMBUF
  2828  9057 8d3804                 sta OSINFO
  2829  905a a906                   lda #>NAMBUF
  2830  905c 8d3904                 sta OSINFO+1
  2831  905f a001                   ldy #1
  2832  9061 b13a                   lda (ARGA),y                                   ; Get name length
  2833  9063 a8                     tay
  2834  9064 a90d                   lda #$0d                                       ; Terminator
  2835                          MORLET
  2836  9066 99fa05                 sta OSWBUF-6,y
  2837  9069 88                     dey
  2838  906a c006                   cpy #6
  2839  906c 90e3                   bcc USABLE
  2840  906e b13a                   lda (ARGA),y
  2841  9070 b0f4                   bcs MORLET                                     ; Always taken
  2842                          
  2843                              ; **** *
  2844                          STAR
  2845  9072 208c8f                 jsr CHARQ
  2846  9075 a001                   ldy #1
  2847  9077 b13a                   lda (ARGA),y
  2848  9079 c93e                   cmp #$3e
  2849  907b 9002                   bcc SMALLP
  2850  907d a93e                   lda #$3e
  2851                          SMALLP
  2852  907f a8                     tay
  2853  9080 a90d                   lda #$0d
  2854                          MORLEZ
  2855  9082 99fa06                 sta DOSBUF-6,y
  2856  9085 88                     dey
  2857  9086 c006                   cpy #6
  2858  9088 9004                   bcc STARRY
  2859  908a b13a                   lda (ARGA),y
  2860  908c b0f4                   bcs MORLEZ
  2861                          STARRY
  2862  908e a200                   ldx #<(DOSBUF)
  2863  9090 a007                   ldy #>(DOSBUF)
  2864  9092 20f7ff                 jsr oscli
  2865  9095 4c2d83                 jmp NO
  2866                          
  2867                          
  2868                              ; **** OPEN
  2869                          OPE
  2870  9098 205290                 jsr MKNAM
  2871  909b a53d                   lda ARGB+1
  2872  909d c901                   cmp #1
  2873  909f 9005                   bcc WOPEN
  2874  90a1 a9c0                   lda #$c0                                       ; OPEN FOR READ
  2875  90a3 4ca890                 jmp ROPEN
  2876                          
  2877                          WOPEN
  2878  90a6 a980                   lda #osfind_open_output                        ; OPEN FOR WRITE
  2879                          ROPEN
  2880  90a8 ae3804                 ldx OSINFO
  2881  90ab ac3904                 ldy OSINFO+1
  2882  90ae 20ceff                 jsr osfind                                     ; Open file for output (A=128)
  2883  90b1 c900                   cmp #0
  2884  90b3 f009                   beq FNERR
  2885  90b5 8572                   sta ACL
  2886  90b7 a900                   lda #0
  2887  90b9 8573                   sta ACL+1
  2888  90bb 4ca492                 jmp ACLRET                                     ; RESULT IN A
  2889                          
  2890                          FNERR
  2891  90be 00                     brk                                            ; File not found
  2892                          
  2893  90bf d6                     !byte $d6
  2894  90c0 46696c65206e6f74...    !text "File not found"
  2895  90ce 00                     !byte 0
  2896                          
  2897                          
  2898                              ; **** Unrelativise
  2899                          UNREL
  2900  90cf a005                   ldy #5
  2901  90d1 b17a                   lda (RELBS),y                                  ; Get old IMBOT value from UNDEFINED
  2902  90d3 38                     sec
  2903  90d4 ed2c04                 sbc IMBOT
  2904  90d7 8d3304                 sta RELOFF                                     ; Relativisation constant
  2905  90da a000                   ldy #0
  2906  90dc b17a                   lda (RELBS),y                                  ; Set up slave
  2907  90de 8d2d04                 sta AREVAL
  2908  90e1 c8                     iny
  2909  90e2 b17a                   lda (RELBS),y                                  ; Length of IMAGE
  2910  90e4 38                     sec
  2911  90e5 ed3304                 sbc RELOFF
  2912  90e8 8d2e04                 sta AREVAL+1
  2913  90eb 917a                   sta (RELBS),y                                  ; Real end of IMAGE
  2914  90ed a902                   lda #2                                         ; Get first item
  2915  90ef 1049                   bpl NXITU
  2916                          NEXTU
  2917  90f1 a000                   ldy #0
  2918  90f3 b17a                   lda (RELBS),y                                  ; Sort out type
  2919  90f5 c900                   cmp #CHARF
  2920  90f7 f01e                   beq URC
  2921  90f9 c908                   cmp #SUBRF
  2922  90fb f024                   beq URS
  2923  90fd c90c                   cmp #FSUBRF
  2924  90ff f020                   beq URS
  2925  9101 c904                   cmp #NUMF
  2926  9103 f00e                   beq URN
  2927  9105 a002                   ldy #2                                         ; Must be dotted pair
  2928  9107 202f91                 jsr ALTADU
  2929  910a a004                   ldy #4
  2930  910c 202f91                 jsr ALTADU
  2931  910f a905                   lda #5                                         ; Length
  2932  9111 1027                   bpl NXITU
  2933                          URN
  2934  9113 a904                   lda #4                                         ; Number
  2935  9115 1023                   bpl NXITU                                      ; No alteration
  2936                          URC
  2937  9117 202891                 jsr TWOADD                                     ; Character
  2938  911a a001                   ldy #1
  2939  911c b17a                   lda (RELBS),y
  2940  911e 4c3a91                 jmp NXITU
  2941                          
  2942                          URS
  2943                          URF
  2944  9121 202891                 jsr TWOADD                                     ; Subr/Fsubr
  2945  9124 a906                   lda #6
  2946  9126 1012                   bpl NXITU
  2947                          TWOADD
  2948  9128 a003                   ldy #3
  2949  912a 202f91                 jsr ALTADU
  2950  912d a005                   ldy #5
  2951                          ALTADU
  2952  912f b17a                   lda (RELBS),y                                  ; Adjust addr
  2953  9131 f006                   beq NOTU                                       ; NIL - needn't alter
  2954  9133 38                     sec
  2955  9134 ed3304                 sbc RELOFF
  2956  9137 917a                   sta (RELBS),y
  2957                          NOTU
  2958  9139 60                     rts
  2959                          
  2960                          NXITU
  2961  913a 204091                 jsr NXIT
  2962  913d 90b2                   bcc NEXTU
  2963  913f 60                     rts
  2964                          
  2965                          NXIT
  2966  9140 18                     clc                                            ; Step to next item
  2967  9141 657a                   adc RELBS
  2968  9143 857a                   sta RELBS
  2969  9145 a900                   lda #0
  2970  9147 657b                   adc RELBS+1
  2971  9149 857b                   sta RELBS+1
  2972  914b cd2e04                 cmp AREVAL+1                                   ; End of image
  2973  914e 900b                   bcc OKOUT
  2974  9150 d007                   bne NOTOK
  2975  9152 a57a                   lda RELBS
  2976  9154 cd2d04                 cmp AREVAL
  2977  9157 9002                   bcc OKOUT
  2978                          NOTOK
  2979  9159 38                     sec
  2980  915a 60                     rts                                            ; End reached
  2981                          
  2982                          OKOUT
  2983  915b 18                     clc
  2984  915c 60                     rts                                            ; End not reached
  2985                          
  2986                          
  2987                              ; **** RELAT (somewhat reduced!)
  2988                          RELAT
  2989  915d a900                   lda #AREEXT
  2990  915f 857a                   sta RELBS                                      ; Reset base
  2991  9161 ad2c04                 lda IMBOT
  2992  9164 857b                   sta RELBS+1
  2993  9166 a000                   ldy #0
  2994  9168 ad2d04                 lda AREVAL
  2995  916b 917a                   sta (RELBS),y
  2996  916d c8                     iny
  2997  916e ad2e04                 lda AREVAL+1
  2998  9171 917a                   sta (RELBS),y
  2999  9173 60                     rts
  3000                          
  3001                          
  3002                              ; **** RECLAIM
  3003                          RECLAM
  3004  9174 20469b                 jsr RUBBSH                                     ; Force G.C.
  3005  9177 4c2d83                 jmp NO
  3006                          
  3007                          
  3008                              ; **** QUOTIENT
  3009                          QUOT
  3010  917a a272                   ldx #ACL
  3011  917c d002                   bne DODO
  3012                          
  3013                              ; **** REMAINDER
  3014                          REM
  3015  917e a274                   ldx #XTNDL
  3016                          DODO
  3017  9180 8689                   stx XPR                                        ; Save index for
  3018  9182 208794                 jsr ALLNUM                                     ; returned number
  3019  9185 a000                   ldy #0
  3020  9187 8474                   sty XTNDL                                      ; Zero initial rem.
  3021  9189 8475                   sty XTNDL+1
  3022  918b 203d84                 jsr ALNUM                                      ; Have cell ready
  3023  918e a002                   ldy #2
  3024  9190 b13a                   lda (ARGA),y                                   ; Move ARG"s" to
  3025  9192 8572                   sta ACL                                        ; workspace
  3026  9194 b13c                   lda (ARGB),y
  3027  9196 8576                   sta AUXL
  3028  9198 c8                     iny
  3029  9199 113c                   ora (ARGB),y
  3030  919b f076                   beq OVFERR                                     ; Divide by zero!
  3031  919d b13a                   lda (ARGA),y
  3032  919f 8573                   sta ACL+1
  3033  91a1 b13c                   lda (ARGB),y
  3034  91a3 8577                   sta AUXL+1
  3035  91a5 2002a0                 jsr DIVPM                                      ; Divide
  3036  91a8 4678                   lsr SIGN                                       ; Check sign
  3037  91aa 9005                   bcc POSV
  3038  91ac a272                   ldx #ACL                                       ; Change ACL sign
  3039  91ae 2034a0                 jsr MD
  3040                          POSV
  3041  91b1 a002                   ldy #2                                         ; RETREIVE RESULT
  3042  91b3 a689                   ldx XPR
  3043  91b5 b500                   lda GCNO,x
  3044  91b7 917a                   sta (POINT),y                                  ; Put in new cell
  3045  91b9 c8                     iny
  3046  91ba b501                   lda GCNO+1,x
  3047  91bc 917a                   sta (POINT),y
  3048  91be 4c6788                 jmp AMADE                                      ; return POINT
  3049                          
  3050                          
  3051                              ; **** DIFFERENCE
  3052                          DIFF
  3053  91c1 208794                 jsr ALLNUM
  3054  91c4 203d84                 jsr ALNUM
  3055  91c7 a002                   ldy #2
  3056  91c9 b13a                   lda (ARGA),y
  3057  91cb 38                     sec
  3058  91cc f13c                   sbc (ARGB),y
  3059  91ce 917a                   sta (POINT),y
  3060  91d0 c8                     iny
  3061  91d1 b13a                   lda (ARGA),y
  3062  91d3 f13c                   sbc (ARGB),y
  3063  91d5 703c                   bvs OVFERR
  3064  91d7 5014                   bvc FINONE
  3065                          
  3066                              ; **** MINUS
  3067                          MINUS
  3068  91d9 208794                 jsr ALLNUM
  3069  91dc 203d84                 jsr ALNUM
  3070  91df a002                   ldy #2
  3071  91e1 a900                   lda #0
  3072  91e3 38                     sec
  3073  91e4 f13a                   sbc (ARGA),y
  3074  91e6 917a                   sta (POINT),y
  3075  91e8 c8                     iny
  3076  91e9 a900                   lda #0
  3077  91eb f13a                   sbc (ARGA),y
  3078                          FINONE
  3079  91ed 917a                   sta (POINT),y
  3080  91ef 4c6788                 jmp AMADE
  3081                          
  3082                          
  3083                              ; **** SUB1
  3084                          SUBA
  3085  91f2 208794                 jsr ALLNUM
  3086  91f5 203d84                 jsr ALNUM
  3087  91f8 a9ff                   lda #$ff
  3088  91fa 18                     clc
  3089  91fb 9009                   bcc WONE
  3090                          
  3091                              ; ADD1
  3092                          ADDA
  3093  91fd 208794                 jsr ALLNUM
  3094  9200 203d84                 jsr ALNUM
  3095  9203 a900                   lda #0
  3096  9205 38                     sec
  3097                          WONE
  3098  9206 48                     pha
  3099  9207 a002                   ldy #2
  3100  9209 713a                   adc (ARGA),y
  3101  920b 917a                   sta (POINT),y
  3102  920d c8                     iny
  3103  920e 68                     pla
  3104  920f 713a                   adc (ARGA),y
  3105  9211 50da                   bvc FINONE
  3106                          OVFERR
  3107  9213 00                     brk                                            ; Overflow
  3108                          
  3109  9214 12                     !byte $12
  3110  9215 41726974686d6574...    !text "Arithmetic overflow"
  3111  9228 00                     !byte 0
  3112                          
  3113                          
  3114                              ; **** PLUS
  3115                          PLUS
  3116  9229 208794                 jsr ALLNUM
  3117  922c 203d84                 jsr ALNUM
  3118  922f a900                   lda #0
  3119  9231 a002                   ldy #2
  3120  9233 917a                   sta (POINT),y
  3121  9235 c8                     iny
  3122  9236 a633                   ldx TVSEXT
  3123  9238 d018                   bne PEX
  3124                          MPLUS
  3125  923a b530                   lda TVS,x
  3126  923c 8530                   sta ARG
  3127  923e b531                   lda TVS+1,x
  3128  9240 8531                   sta ARG+1
  3129  9242 a002                   ldy #2
  3130  9244 18                     clc
  3131  9245 b17a                   lda (POINT),y
  3132  9247 7130                   adc (ARG),y
  3133  9249 917a                   sta (POINT),y
  3134  924b c8                     iny
  3135  924c b17a                   lda (POINT),y
  3136  924e 7130                   adc (ARG),y
  3137  9250 70c1                   bvs OVFERR
  3138                          PEX
  3139  9252 917a                   sta (POINT),y
  3140  9254 ca                     dex
  3141  9255 ca                     dex
  3142  9256 e00a                   cpx #$0a
  3143  9258 b0e0                   bcs MPLUS
  3144  925a 4c6788                 jmp AMADE
  3145                          
  3146                          
  3147                              ; **** TIMES
  3148                          TIMES
  3149  925d 208794                 jsr ALLNUM
  3150  9260 a201                   ldx #1
  3151  9262 8672                   stx ACL
  3152  9264 ca                     dex
  3153  9265 8673                   stx ACL+1
  3154  9267 a633                   ldx TVSEXT
  3155  9269 d033                   bne TREX
  3156                          MTIMES
  3157  926b a900                   lda #0
  3158  926d 8574                   sta XTNDL
  3159  926f 8575                   sta XTNDL+1
  3160  9271 b530                   lda TVS,x
  3161  9273 8530                   sta ARG
  3162  9275 b531                   lda TVS+1,x
  3163  9277 8531                   sta ARG+1
  3164  9279 a002                   ldy #2
  3165  927b b130                   lda (ARG),y
  3166  927d 8576                   sta AUXL
  3167  927f c8                     iny
  3168  9280 b130                   lda (ARG),y
  3169  9282 8577                   sta AUXL+1
  3170  9284 8689                   stx XPR
  3171  9286 20e19f                 jsr MULPM
  3172  9289 a574                   lda XTNDL
  3173  928b 0575                   ora XTNDL+1
  3174  928d d084                   bne OVFERR
  3175  928f a573                   lda ACL+1
  3176  9291 3080                   bmi OVFERR
  3177  9293 6678                   ror SIGN
  3178  9295 9005                   bcc POSITV
  3179  9297 a272                   ldx #ACL
  3180  9299 2034a0                 jsr MD
  3181                          POSITV
  3182  929c a689                   ldx XPR
  3183                          TREX
  3184  929e ca                     dex
  3185  929f ca                     dex
  3186  92a0 e00a                   cpx #$0a
  3187  92a2 b0c7                   bcs MTIMES
  3188                          ACLRET
  3189  92a4 203d84                 jsr ALNUM
  3190  92a7 a002                   ldy #2
  3191  92a9 a572                   lda ACL
  3192  92ab 917a                   sta (POINT),y
  3193  92ad c8                     iny
  3194  92ae a573                   lda ACL+1
  3195  92b0 917a                   sta (POINT),y
  3196  92b2 4c6788                 jmp AMADE
  3197                          
  3198                          
  3199                              ; **** CHARS
  3200                          CHARS
  3201  92b5 203d84                 jsr ALNUM
  3202  92b8 a63b                   ldx ARGA+1
  3203  92ba f015                   beq XGOOD
  3204  92bc a204                   ldx #4                                         ; List index
  3205  92be a000                   ldy #0
  3206  92c0 b13a                   lda (ARGA),y
  3207  92c2 300d                   bmi XGOOD
  3208  92c4 d008                   bne FIXTY
  3209  92c6 c8                     iny
  3210  92c7 b13a                   lda (ARGA),y
  3211  92c9 38                     sec
  3212  92ca e906                   sbc #6
  3213  92cc b006                   bcs AGOT
  3214                          FIXTY
  3215  92ce 4a                     lsr
  3216  92cf 4a                     lsr
  3217  92d0 aa                     tax
  3218                          XGOOD
  3219  92d1 bd6b82                 lda LENTAB,x
  3220                          AGOT
  3221  92d4 a002                   ldy #2
  3222  92d6 917a                   sta (POINT),y
  3223  92d8 c8                     iny
  3224  92d9 a900                   lda #0
  3225  92db 917a                   sta (POINT),y
  3226  92dd 4c6788                 jmp AMADE
  3227                          
  3228                          GPLIST
  3229  92e0 208c8f                 jsr CHARQ
  3230  92e3 a004                   ldy #4
  3231  92e5 b13a                   lda (ARGA),y
  3232  92e7 8530                   sta ARG
  3233  92e9 c8                     iny
  3234  92ea b13a                   lda (ARGA),y
  3235  92ec 4c3883                 jmp POPA
  3236                          
  3237                          
  3238                              ; **** RPLACA
  3239                          RPLACA
  3240  92ef a001                   ldy #1
  3241  92f1 d002                   bne PLAQ
  3242                          
  3243                              ; **** RPLACD
  3244                          RPLACD
  3245  92f3 a003                   ldy #3
  3246                          PLAQ
  3247  92f5 a53b                   lda ARGA+1
  3248  92f7 f015                   beq PLAQER
  3249  92f9 a200                   ldx #0
  3250  92fb a13a                   lda (ARGA,x)
  3251  92fd 100f                   bpl PLAQER
  3252  92ff a53c                   lda ARGB
  3253  9301 913a                   sta (ARGA),y
  3254  9303 c8                     iny
  3255  9304 a53d                   lda ARGB+1
  3256  9306 913a                   sta (ARGA),y
  3257  9308 20b18f                 jsr ATOA
  3258  930b 4c3a83                 jmp POP
  3259                          
  3260                          PLAQER
  3261  930e 00                     brk                                            ; Wrong 1st arg
  3262                          
  3263  930f 13                     !byte $13
  3264  9310 52504c4143412f52...    !text "RPLACA/RPLACD argument"
  3265  9326 00                     !byte 0
  3266                          
  3267                          
  3268                              ; **** LESSP
  3269                          LESSP
  3270  9327 a201                   ldx #1
  3271                          SWIP
  3272  9329 b53a                   lda ARGA,x
  3273  932b b43c                   ldy ARGB,x
  3274  932d 953c                   sta ARGB,x
  3275  932f 943a                   sty ARGA,x
  3276  9331 ca                     dex
  3277  9332 10f5                   bpl SWIP
  3278                          
  3279                              ; **** GREATERP
  3280                          GT
  3281  9334 208794                 jsr ALLNUM
  3282  9337 a003                   ldy #3
  3283  9339 b13c                   lda (ARGB),y
  3284  933b c980                   cmp #$80
  3285  933d 513a                   eor (ARGA),y
  3286  933f 300f                   bmi DFSGN
  3287  9341 88                     dey
  3288  9342 b13c                   lda (ARGB),y
  3289  9344 d13a                   cmp (ARGA),y
  3290  9346 c8                     iny
  3291  9347 b13c                   lda (ARGB),y
  3292  9349 f13a                   sbc (ARGA),y
  3293  934b b005                   bcs SMALLR
  3294                          BIGGER
  3295  934d 4c3183                 jmp YES
  3296                          
  3297                          DFSGN
  3298  9350 b0fb                   bcs BIGGER
  3299                          SMALLR
  3300  9352 4c2d83                 jmp NO
  3301                          
  3302                          SOCK
  3303  9355 a004                   ldy #4
  3304  9357 b13a                   lda (ARGA),y
  3305  9359 8536                   sta WSB
  3306  935b c8                     iny
  3307  935c b13a                   lda (ARGA),y
  3308  935e 8537                   sta WSB+1                                      ; A-list search
  3309                          SOCKA
  3310  9360 d010                   bne LKG                                        ; routine
  3311  9362 60                     rts
  3312                          
  3313                          ROCKON
  3314  9363 a003                   ldy #3
  3315  9365 b136                   lda (WSB),y
  3316  9367 aa                     tax
  3317  9368 c8                     iny
  3318  9369 b136                   lda (WSB),y
  3319  936b d001                   bne LKH
  3320  936d 60                     rts
  3321                          
  3322                          LKH
  3323  936e 8537                   sta WSB+1
  3324  9370 8636                   stx WSB
  3325                          LKG
  3326  9372 a200                   ldx #0
  3327  9374 a001                   ldy #1
  3328  9376 a136                   lda (WSB,x)
  3329  9378 101d                   bpl ALERR
  3330  937a b136                   lda (WSB),y
  3331  937c 8583                   sta WSD
  3332  937e c8                     iny
  3333  937f b136                   lda (WSB),y
  3334  9381 8584                   sta WSD+1
  3335  9383 a183                   lda (WSD,x)
  3336  9385 1010                   bpl ALERR
  3337  9387 a53d                   lda ARGB+1
  3338  9389 d183                   cmp (WSD),y
  3339  938b d0d6                   bne ROCKON
  3340  938d 88                     dey
  3341  938e a53c                   lda ARGB
  3342  9390 d183                   cmp (WSD),y
  3343  9392 d0cf                   bne ROCKON
  3344  9394 a9ff                   lda #$ff
  3345  9396 60                     rts
  3346                          
  3347                          ALERR
  3348  9397 00                     brk                                            ; P-list error
  3349                          
  3350  9398 14                     !byte $14
  3351  9399 502d6c6973742073...    !text "P-list structure"
  3352  93a9 00                     !byte 0
  3353                          
  3354                          
  3355                              ; **** ASSOC
  3356                          ASSOC
  3357  93aa a53c                   lda ARGB
  3358  93ac 48                     pha
  3359  93ad 8536                   sta WSB
  3360  93af a53d                   lda ARGB+1
  3361  93b1 48                     pha
  3362  93b2 8537                   sta WSB+1
  3363  93b4 a53a                   lda ARGA                                       ; Fudge arg order
  3364  93b6 853c                   sta ARGB
  3365  93b8 a53b                   lda ARGA+1
  3366  93ba 853d                   sta ARGB+1
  3367  93bc 206093                 jsr SOCKA
  3368  93bf c901                   cmp #1                                         ; Save ret code as carry
  3369  93c1 68                     pla
  3370  93c2 853d                   sta ARGB+1
  3371  93c4 68                     pla
  3372  93c5 853c                   sta ARGB
  3373  93c7 a900                   lda #0
  3374  93c9 9006                   bcc HAUSE                                      ; If SOCKA returned zero
  3375  93cb a583                   lda WSD
  3376  93cd 8530                   sta ARG
  3377  93cf a584                   lda WSD+1
  3378                          HAUSE
  3379  93d1 8531                   sta ARG+1
  3380  93d3 4c3a83                 jmp POP
  3381                          
  3382                          
  3383                              ; **** GET
  3384                          GET
  3385  93d6 208c8f                 jsr CHARQ
  3386  93d9 205593                 jsr SOCK
  3387  93dc f0f3                   beq HAUSE
  3388  93de a003                   ldy #3
  3389  93e0 b183                   lda (WSD),y
  3390  93e2 8530                   sta ARG
  3391  93e4 c8                     iny
  3392  93e5 b183                   lda (WSD),y
  3393  93e7 8531                   sta ARG+1
  3394  93e9 4c3a83                 jmp POP
  3395                          
  3396                          
  3397                              ; **** PUT
  3398                          PUT
  3399  93ec 208c8f                 jsr CHARQ
  3400  93ef 205593                 jsr SOCK
  3401  93f2 f010                   beq INSERP
  3402  93f4 a003                   ldy #3
  3403  93f6 a53e                   lda ARGC
  3404  93f8 9183                   sta (WSD),y
  3405  93fa 8530                   sta ARG
  3406  93fc c8                     iny
  3407  93fd a53f                   lda ARGC+1
  3408  93ff 9183                   sta (WSD),y
  3409  9401 4c3883                 jmp POPA
  3410                          
  3411                          INSERP
  3412  9404 205384                 jsr ALPAIR
  3413  9407 a57a                   lda POINT
  3414  9409 8536                   sta WSB
  3415  940b a57b                   lda POINT+1
  3416  940d 8537                   sta WSB+1
  3417  940f 205384                 jsr ALPAIR
  3418  9412 a005                   ldy #5
  3419  9414 b13a                   lda (ARGA),y
  3420  9416 88                     dey
  3421  9417 9136                   sta (WSB),y
  3422  9419 a53f                   lda ARGC+1
  3423  941b 8531                   sta ARG+1
  3424  941d 917a                   sta (POINT),y
  3425  941f b13a                   lda (ARGA),y
  3426  9421 88                     dey
  3427  9422 9136                   sta (WSB),y
  3428  9424 a53e                   lda ARGC
  3429  9426 8530                   sta ARG
  3430  9428 917a                   sta (POINT),y
  3431  942a 88                     dey
  3432  942b a53d                   lda ARGB+1
  3433  942d 917a                   sta (POINT),y
  3434  942f a57b                   lda POINT+1
  3435  9431 9136                   sta (WSB),y
  3436  9433 88                     dey
  3437  9434 a53c                   lda ARGB
  3438  9436 917a                   sta (POINT),y
  3439  9438 a57a                   lda POINT
  3440  943a 9136                   sta (WSB),y
  3441  943c a005                   ldy #5
  3442  943e a537                   lda WSB+1
  3443  9440 913a                   sta (ARGA),y
  3444  9442 88                     dey
  3445  9443 a536                   lda WSB
  3446  9445 913a                   sta (ARGA),y
  3447  9447 4c3a83                 jmp POP
  3448                          
  3449                          
  3450                              ; **** REMPROP
  3451                          REMPR
  3452  944a 208c8f                 jsr CHARQ
  3453  944d 205593                 jsr SOCK
  3454  9450 f032                   beq HOUSE
  3455  9452 a003                   ldy #3
  3456  9454 b136                   lda (WSB),y
  3457  9456 8538                   sta WSC
  3458  9458 c8                     iny
  3459  9459 b136                   lda (WSB),y
  3460  945b 8539                   sta WSC+1
  3461  945d a005                   ldy #5
  3462                          FRUIT
  3463  945f b13a                   lda (ARGA),y
  3464  9461 aa                     tax
  3465  9462 c537                   cmp WSB+1
  3466  9464 d013                   bne FRUT
  3467  9466 88                     dey
  3468  9467 b13a                   lda (ARGA),y
  3469  9469 c536                   cmp WSB
  3470  946b d00f                   bne FRUTA
  3471  946d a538                   lda WSC
  3472  946f 913a                   sta (ARGA),y
  3473  9471 c8                     iny
  3474  9472 a539                   lda WSC+1
  3475  9474 913a                   sta (ARGA),y
  3476  9476 4c3183                 jmp YES
  3477                          
  3478                          FRUT
  3479  9479 88                     dey
  3480  947a b13a                   lda (ARGA),y
  3481                          FRUTA
  3482  947c 863b                   stx ARGA+1
  3483  947e 853a                   sta ARGA
  3484  9480 a004                   ldy #4
  3485  9482 d0db                   bne FRUIT
  3486                          HOUSE
  3487  9484 4c2d83                 jmp NO
  3488                          
  3489                          
  3490                              ; **** Check all numeric args
  3491                          ALLNUM
  3492  9487 a904                   lda #NUMF
  3493  9489 a633                   ldx TVSEXT
  3494  948b d008                   bne COMPX
  3495                          MORIX
  3496  948d b431                   ldy TVS+1,x
  3497  948f f00b                   beq NUER
  3498  9491 c130                   cmp (TVS,x)
  3499  9493 d007                   bne NUER
  3500                          COMPX
  3501  9495 ca                     dex
  3502  9496 ca                     dex
  3503  9497 e00a                   cpx #$0a
  3504  9499 b0f2                   bcs MORIX
  3505  949b 60                     rts
  3506                          
  3507                          NUER
  3508  949c 00                     brk                                            ; Non-numeric args
  3509                          
  3510  949d 15                     !byte $15
  3511  949e 4e6f6e2d6e756d65...    !text "Non-numeric argument"
  3512  94b2 00                     !byte 0
  3513                          
  3514                          EVAL
  3515  94b3 20b18f                 jsr ATOA
  3516  94b6 203985                 jsr EVALU
  3517  94b9 4c3a83                 jmp POP
  3518                          
  3519                          
  3520                              ; ******************************
  3521                              ; APPLY/MAP complex
  3522                              ; ******************************
  3523                          APFUN
  3524  94bc a53b                   lda ARGA+1
  3525  94be f00c                   beq APFERR
  3526  94c0 a000                   ldy #0
  3527  94c2 8437                   sty WSB+1
  3528  94c4 b13a                   lda (ARGA),y
  3529  94c6 3015                   bmi GEVIL
  3530  94c8 c908                   cmp #SUBRF
  3531  94ca f04f                   beq GFRTS                                      ; It's a subr
  3532                          APFERR
  3533  94cc 00                     brk
  3534                          
  3535  94cd 16                     !byte $16
  3536  94ce 4150504c59206172...    !text "APPLY argument"
  3537  94dc 00                     !byte 0
  3538                          
  3539                          GEVIL
  3540  94dd c8                     iny                                            ; Expr?
  3541  94de b13a                   lda (ARGA),y
  3542  94e0 c918                   cmp #<LAMBDA
  3543  94e2 d0e8                   bne APFERR
  3544  94e4 c8                     iny
  3545  94e5 b13a                   lda (ARGA),y
  3546  94e7 cd2c04                 cmp IMBOT
  3547  94ea d0e0                   bne APFERR
  3548  94ec c8                     iny
  3549  94ed b13a                   lda (ARGA),y
  3550  94ef 8583                   sta WSD
  3551  94f1 c8                     iny
  3552  94f2 b13a                   lda (ARGA),y
  3553  94f4 8584                   sta WSD+1
  3554  94f6 f0d4                   beq APFERR
  3555  94f8 a000                   ldy #0
  3556  94fa b183                   lda (WSD),y
  3557  94fc 10ce                   bpl APFERR
  3558  94fe c8                     iny
  3559  94ff b183                   lda (WSD),y                                    ; Parm list in WSB
  3560  9501 8536                   sta WSB
  3561  9503 c8                     iny
  3562  9504 b183                   lda (WSD),y
  3563  9506 8537                   sta WSB+1
  3564  9508 f0c2                   beq APFERR
  3565  950a c8                     iny
  3566  950b b183                   lda (WSD),y
  3567  950d 8538                   sta WSC                                        ; Body in WSC
  3568  950f c8                     iny
  3569  9510 b183                   lda (WSD),y
  3570  9512 8539                   sta WSC+1
  3571  9514 a000                   ldy #0
  3572  9516 b136                   lda (WSB),y                                    ; Fexpr?
  3573  9518 10b2                   bpl APFERR
  3574  951a 60                     rts
  3575                          
  3576                          GFRTS
  3577  951b a53a                   lda ARGA
  3578  951d 8538                   sta WSC
  3579  951f a53b                   lda ARGA+1
  3580  9521 8539                   sta WSC+1
  3581  9523 60                     rts
  3582                          
  3583                          APERR
  3584  9524 00                     brk                                            ; APPLY list
  3585                          
  3586  9525 17                     !byte $17
  3587  9526 4150504c59206172...    !text "APPLY arguments"
  3588  9535 00                     !byte 0
  3589                          
  3590                          
  3591                              ; **** APPLY
  3592                          APPLY
  3593  9536 20bc94                 jsr APFUN
  3594  9539 a20a                   ldx #$0a
  3595  953b a53d                   lda ARGB+1
  3596  953d f02d                   beq APGO
  3597  953f 8535                   sta WSA+1
  3598  9541 a53c                   lda ARGB
  3599  9543 8534                   sta WSA
  3600                          APL
  3601  9545 a000                   ldy #0
  3602  9547 b134                   lda (WSA),y
  3603  9549 10d9                   bpl APERR
  3604  954b c8                     iny
  3605  954c b134                   lda (WSA),y
  3606  954e 9530                   sta TVS,x
  3607  9550 c8                     iny
  3608  9551 e8                     inx
  3609  9552 b134                   lda (WSA),y
  3610  9554 9530                   sta TVS,x
  3611  9556 e8                     inx                                            ; Spread args into TVS
  3612  9557 e042                   cpx #$42
  3613  9559 b0c9                   bcs APERR
  3614  955b a004                   ldy #4
  3615  955d b134                   lda (WSA),y
  3616  955f f00b                   beq APGO
  3617  9561 48                     pha
  3618  9562 88                     dey
  3619  9563 b134                   lda (WSA),y
  3620  9565 8534                   sta WSA
  3621  9567 68                     pla
  3622  9568 8535                   sta WSA+1
  3623  956a d0d9                   bne APL                                        ; Always taken
  3624                          APGO
  3625  956c 8633                   stx TVSEXT
  3626                          APGOB
  3627  956e a537                   lda WSB+1
  3628  9570 f003                   beq SUBAP
  3629  9572 4cd286                 jmp RADON                                      ; Expr entry
  3630                          
  3631                          SUBAP
  3632  9575 4cfc85                 jmp INSUBR                                     ; Subr entry
  3633                          
  3634                          MAPSTR
  3635  9578 20bc94                 jsr APFUN                                      ; Prelims for
  3636  957b a20c                   ldx #$0c                                       ; MAP functions
  3637                          MAPMOV
  3638  957d b530                   lda TVS,x
  3639  957f 952e                   sta TVS-2,x
  3640  9581 e8                     inx
  3641  9582 b530                   lda TVS,x
  3642  9584 952e                   sta TVS-2,x
  3643  9586 f009                   beq MAPRTS
  3644  9588 e8                     inx
  3645  9589 e433                   cpx TVSEXT
  3646  958b 90f0                   bcc MAPMOV
  3647  958d ca                     dex
  3648  958e ca                     dex
  3649  958f 8633                   stx TVSEXT
  3650                          MAPRTS
  3651  9591 60                     rts
  3652                          
  3653                          NILMAP
  3654  9592 4c3883                 jmp POPA
  3655                          
  3656                          
  3657                              ; **** MAP
  3658                          MAP
  3659  9595 207895                 jsr MAPSTR
  3660  9598 f0f8                   beq NILMAP
  3661                          MAPON
  3662  959a 204596                 jsr CARAP
  3663  959d 208496                 jsr CDRALL
  3664  95a0 d0f8                   bne MAPON
  3665  95a2 4c2d83                 jmp NO
  3666                          
  3667                          
  3668                              ; *** MAPC
  3669                          MAPCAR
  3670  95a5 207895                 jsr MAPSTR
  3671  95a8 f0e8                   beq NILMAP
  3672  95aa 205384                 jsr ALPAIR
  3673  95ad a004                   ldy #4
  3674  95af a57b                   lda POINT+1
  3675  95b1 8535                   sta WSA+1
  3676  95b3 917a                   sta (POINT),y
  3677  95b5 a57a                   lda POINT
  3678  95b7 8534                   sta WSA
  3679  95b9 88                     dey
  3680  95ba 917a                   sta (POINT),y
  3681                          MAPCON
  3682  95bc 204596                 jsr CARAP
  3683  95bf 205384                 jsr ALPAIR
  3684  95c2 a002                   ldy #2
  3685  95c4 b134                   lda (WSA),y
  3686  95c6 d009                   bne OLDMAP
  3687  95c8 a57b                   lda POINT+1
  3688  95ca 9134                   sta (WSA),y
  3689  95cc a57a                   lda POINT
  3690  95ce 88                     dey
  3691  95cf 9134                   sta (WSA),y
  3692                          OLDMAP
  3693  95d1 a004                   ldy #4
  3694  95d3 b134                   lda (WSA),y
  3695  95d5 8584                   sta WSD+1
  3696  95d7 88                     dey
  3697  95d8 b134                   lda (WSA),y
  3698  95da 8583                   sta WSD
  3699  95dc a57a                   lda POINT
  3700  95de 9183                   sta (WSD),y
  3701  95e0 9134                   sta (WSA),y
  3702  95e2 c8                     iny
  3703  95e3 a57b                   lda POINT+1
  3704  95e5 9183                   sta (WSD),y
  3705  95e7 9134                   sta (WSA),y
  3706  95e9 a002                   ldy #2
  3707  95eb a531                   lda ARG+1
  3708  95ed 917a                   sta (POINT),y
  3709  95ef 88                     dey
  3710  95f0 a530                   lda ARG
  3711  95f2 917a                   sta (POINT),y
  3712  95f4 208496                 jsr CDRALL
  3713  95f7 d0c3                   bne MAPCON
  3714  95f9 a001                   ldy #1
  3715  95fb b134                   lda (WSA),y
  3716  95fd 8530                   sta ARG
  3717  95ff c8                     iny
  3718  9600 b134                   lda (WSA),y
  3719  9602 4c3883                 jmp POPA
  3720                          
  3721                          
  3722                              ; **** GETCHAR
  3723                          GETCHA
  3724  9605 a633                   ldx TVSEXT                                     ; File arg?
  3725  9607 e00c                   cpx #$0c
  3726  9609 9009                   bcc GETDIR
  3727  960b 209c8a                 jsr FILGC
  3728  960e 206c87                 jsr GTCHAR
  3729  9611 4c2996                 jmp POST
  3730                          
  3731                          GETDIR
  3732  9614 20e0ff                 jsr osrdch                                     ; Grab a char; Read a character from the current input stream
  3733  9617 9010                   bcc POST
  3734  9619 00                     brk
  3735                          
  3736  961a 1c                     !byte $1c
  3737  961b 457363617065           !text "Escape"
  3738  9621 00                     !byte 0
  3739                          
  3740                          
  3741                              ; **** CHARACTER
  3742                          ASCII
  3743  9622 208794                 jsr ALLNUM
  3744  9625 a002                   ldy #2
  3745  9627 b13a                   lda (ARGA),y
  3746                          POST
  3747  9629 20e889                 jsr LETTER                                     ; Finds char atom
  3748  962c 4c6788                 jmp AMADE
  3749                          
  3750                          
  3751                              ; **** ORDINAL
  3752                          ORDINL
  3753  962f 208c8f                 jsr CHARQ
  3754  9632 203d84                 jsr ALNUM
  3755  9635 a001                   ldy #1
  3756  9637 b13a                   lda (ARGA),y
  3757  9639 38                     sec
  3758  963a e906                   sbc #6
  3759  963c f004                   beq EMPTYC
  3760  963e a006                   ldy #6
  3761  9640 b13a                   lda (ARGA),y
  3762                          EMPTYC
  3763  9642 4cd492                 jmp AGOT
  3764                          
  3765                          CARAP
  3766  9645 209383                 jsr STACK
  3767  9648 a633                   ldx TVSEXT
  3768  964a d01c                   bne CARAFE
  3769                          CARAVA
  3770  964c ca                     dex
  3771  964d b530                   lda TVS,x
  3772  964f 8584                   sta WSD+1
  3773  9651 f01c                   beq MAPERR
  3774  9653 b52f                   lda TVS-1,x
  3775  9655 8583                   sta WSD
  3776  9657 a000                   ldy #0
  3777  9659 b183                   lda (WSD),y
  3778  965b 1012                   bpl MAPERR
  3779  965d c8                     iny
  3780  965e b183                   lda (WSD),y
  3781  9660 952f                   sta TVS-1,x
  3782  9662 c8                     iny
  3783  9663 b183                   lda (WSD),y
  3784  9665 9530                   sta TVS,x
  3785  9667 ca                     dex
  3786                          CARAFE
  3787  9668 e00c                   cpx #$0c
  3788  966a b0e0                   bcs CARAVA
  3789  966c 4c6e95                 jmp APGOB
  3790                          
  3791                          MAPERR
  3792  966f 00                     brk                                            ; MAP args
  3793                          
  3794  9670 18                     !byte $18
  3795  9671 4d41502f4d415043...    !text "MAP/MAPC arguments"
  3796  9683 00                     !byte 0
  3797                          
  3798                          CDRALL
  3799  9684 a633                   ldx TVSEXT
  3800  9686 d01d                   bne CDRAWL
  3801                          CDRAVA
  3802  9688 ca                     dex
  3803  9689 b530                   lda TVS,x
  3804  968b 8584                   sta WSD+1
  3805  968d b52f                   lda TVS-1,x
  3806  968f 8583                   sta WSD
  3807  9691 a000                   ldy #0
  3808  9693 b183                   lda (WSD),y
  3809  9695 10d8                   bpl MAPERR
  3810  9697 a004                   ldy #4
  3811  9699 b183                   lda (WSD),y
  3812  969b f00c                   beq CDREND
  3813  969d 9530                   sta TVS,x
  3814  969f ca                     dex
  3815  96a0 88                     dey
  3816  96a1 b183                   lda (WSD),y
  3817  96a3 9530                   sta TVS,x
  3818                          CDRAWL
  3819  96a5 e00c                   cpx #$0c
  3820  96a7 b0df                   bcs CDRAVA
  3821                          CDREND
  3822  96a9 60                     rts
  3823                          
  3824                          
  3825                              ; **** EXPLODE
  3826                          EXPLOD
  3827  96aa 208c8f                 jsr CHARQ
  3828  96ad 8431                   sty ARG+1
  3829  96af c8                     iny
  3830  96b0 b13a                   lda (ARGA),y
  3831  96b2 d02d                   bne BANG
  3832                          THUMP
  3833  96b4 e901                   sbc #1
  3834  96b6 48                     pha
  3835  96b7 205384                 jsr ALPAIR
  3836  96ba a004                   ldy #4
  3837  96bc a531                   lda ARG+1
  3838  96be 917a                   sta (POINT),y
  3839  96c0 88                     dey
  3840  96c1 a530                   lda ARG
  3841  96c3 917a                   sta (POINT),y
  3842  96c5 a57b                   lda POINT+1
  3843  96c7 8531                   sta ARG+1
  3844  96c9 a57a                   lda POINT
  3845  96cb 8530                   sta ARG
  3846  96cd 68                     pla
  3847  96ce 48                     pha
  3848  96cf a8                     tay
  3849  96d0 b13a                   lda (ARGA),y
  3850  96d2 20e889                 jsr LETTER
  3851  96d5 a002                   ldy #2
  3852  96d7 a57b                   lda POINT+1
  3853  96d9 9130                   sta (ARG),y
  3854  96db 88                     dey
  3855  96dc a57a                   lda POINT
  3856  96de 9130                   sta (ARG),y
  3857  96e0 68                     pla
  3858                          BANG
  3859  96e1 c907                   cmp #7
  3860  96e3 b0cf                   bcs THUMP
  3861  96e5 4c3a83                 jmp POP
  3862                          
  3863                          IMPERR
  3864  96e8 00                     brk                                            ; No space
  3865                          
  3866  96e9 19                     !byte $19
  3867  96ea 4e6f20726f6f6d20...    !text "No room for IMPLODE"
  3868  96fd 00                     !byte 0
  3869                          
  3870                          
  3871                              ; **** IMPLODE
  3872                          IMPLOD
  3873  96fe a200                   ldx #0
  3874  9700 a53b                   lda ARGA+1
  3875  9702 4c4497                 jmp WSBTST
  3876                          
  3877                          SQUISH
  3878  9705 c8                     iny
  3879  9706 b13a                   lda (ARGA),y
  3880  9708 8536                   sta WSB
  3881  970a c8                     iny
  3882  970b b13a                   lda (ARGA),y
  3883  970d d007                   bne NODNIL
  3884  970f a924                   lda #<NIL
  3885  9711 8536                   sta WSB
  3886  9713 ad2c04                 lda IMBOT
  3887                          NODNIL
  3888  9716 8537                   sta WSB+1
  3889  9718 a000                   ldy #0
  3890  971a b136                   lda (WSB),y
  3891  971c f003                   beq ISCH
  3892  971e 4c978f                 jmp FILERR                                     ; Not char err
  3893                          
  3894                          ISCH
  3895  9721 c8                     iny
  3896  9722 b136                   lda (WSB),y
  3897  9724 8522                   sta YSAV
  3898  9726 a006                   ldy #6
  3899  9728 d009                   bne EMM
  3900                          SPLOT
  3901  972a b136                   lda (WSB),y
  3902  972c 9d0006                 sta OSWBUF,x
  3903  972f c8                     iny
  3904  9730 e8                     inx
  3905  9731 f0b5                   beq IMPERR
  3906                          EMM
  3907  9733 c422                   cpy YSAV
  3908  9735 90f3                   bcc SPLOT
  3909  9737 a004                   ldy #4
  3910  9739 b13a                   lda (ARGA),y
  3911  973b 48                     pha
  3912  973c 88                     dey
  3913  973d b13a                   lda (ARGA),y
  3914  973f 853a                   sta ARGA
  3915  9741 68                     pla
  3916  9742 853b                   sta ARGA+1
  3917                          WSBTST
  3918  9744 f006                   beq IMPRET
  3919  9746 a000                   ldy #0
  3920  9748 b13a                   lda (ARGA),y
  3921  974a 30b9                   bmi SQUISH
  3922                          IMPRET
  3923  974c ca                     dex                                            ; Show string length
  3924  974d 861d                   stx END
  3925  974f 4c6488                 jmp TRYCHR
  3926                          
  3927                          
  3928                              ; **** MESSON
  3929                          MESSON
  3930  9752 208794                 jsr ALLNUM
  3931  9755 a002                   ldy #2
  3932  9757 b13a                   lda (ARGA),y
  3933  9759 051a                   ora LEVEL
  3934  975b 851a                   sta LEVEL
  3935  975d 4c3a83                 jmp POP
  3936                          
  3937                          
  3938                              ; **** MESSOFF
  3939                          MESSOF
  3940  9760 208794                 jsr ALLNUM
  3941  9763 a002                   ldy #2
  3942  9765 b13a                   lda (ARGA),y
  3943  9767 49ff                   eor #$ff
  3944  9769 251a                   and LEVEL
  3945  976b 851a                   sta LEVEL
  3946  976d 4c3a83                 jmp POP
  3947                          
  3948                          
  3949                              ; **** MODE
  3950                          MODE
  3951  9770 208794                 jsr ALLNUM
  3952  9773 203d84                 jsr ALNUM
  3953  9776 a002                   ldy #2
  3954  9778 b13a                   lda (ARGA),y                                   ; Get mode
  3955  977a 2907                   and #7                                         ; Mod 8
  3956  977c 917a                   sta (POINT),y
  3957  977e 0980                   ora #$80                                       ; Flag bit
  3958  9780 8d2a04                 sta MODEF
  3959  9783 c8                     iny
  3960  9784 a900                   lda #0
  3961  9786 917a                   sta (POINT),y
  3962  9788 4c6788                 jmp AMADE
  3963                          
  3964                          
  3965                              ; **** Actually change mode
  3966                          MODCHN
  3967  978b ad2a04                 lda MODEF
  3968  978e 2907                   and #7
  3969  9790 8d2a04                 sta MODEF                                      ; Clear flag bit
  3970  9793 48                     pha
  3971  9794 a982                   lda #osbyte_read_high_order_address
  3972  9796 20f4ff                 jsr osbyte                                     ; M/c HO addr.; Read the filing system 'machine high order address'
  3973  9799 c0ff                   cpy #$ff
  3974  979b d02c                   bne CHANGE                                     ; In 2nd processor?
  3975  979d 68                     pla
  3976  979e 48                     pha
  3977  979f aa                     tax                                            ; X=MODE number
  3978  97a0 a985                   lda #osbyte_read_himem_for_mode
  3979  97a2 20f4ff                 jsr osbyte                                     ; Get new aretop; Read top of user memory for a given screen mode X
  3980  97a5 cc2e04                 cpy AREVAL+1                                   ; Room for OBLIST?
  3981  97a8 9007                   bcc MODERR
  3982  97aa d019                   bne CHARE
  3983  97ac ec2d04                 cpx AREVAL
  3984  97af b014                   bcs CHARE
  3985                          MODERR
  3986  97b1 00                     brk                                            ; No room
  3987                          
  3988  97b2 1b                     !byte $1b
  3989  97b3 4e6f20726f6f6d20...    !text "No room for MODE "
  3990  97c4 00                     !byte 0
  3991                          
  3992                          CHARE
  3993  97c5 8479                   sty ARETOP                                     ; New ARETOP
  3994  97c7 847f                   sty SP+1                                       ; Reset software stack
  3995                          CHANGE
  3996  97c9 a916                   lda #$16                                       ; Change mode
  3997  97cb 20eeff                 jsr oswrch                                     ; Write character 22
  3998  97ce 68                     pla
  3999  97cf 4ceeff                 jmp oswrch                                     ; Write character
  4000                          
  4001                          
  4002                              ; **** USR
  4003                          USR
  4004  97d2 208794                 jsr ALLNUM
  4005  97d5 a003                   ldy #3
  4006  97d7 b13a                   lda (ARGA),y
  4007  97d9 857b                   sta POINT+1                                    ; Call addr
  4008  97db 88                     dey
  4009  97dc b13a                   lda (ARGA),y
  4010  97de 857a                   sta POINT
  4011  97e0 b142                   lda (ARGE),y                                   ; Get carry
  4012  97e2 c901                   cmp #1                                         ; And adjust flag
  4013  97e4 08                     php
  4014  97e5 b13c                   lda (ARGB),y                                   ; Get A
  4015  97e7 48                     pha
  4016  97e8 b13e                   lda (ARGC),y                                   ; Get X
  4017  97ea aa                     tax
  4018  97eb b140                   lda (ARGD),y                                   ; Get Y
  4019  97ed a8                     tay
  4020  97ee 68                     pla
  4021  97ef 28                     plp
  4022  97f0 20f697                 jsr JUMPAD
  4023  97f3 4cf997                 jmp OUTL
  4024                          
  4025                          JUMPAD
  4026  97f6 6c7a00                 jmp (POINT)                                    ; Enter routine
  4027                          
  4028                          OUTL
  4029  97f9 08                     php                                            ; Build up result list
  4030  97fa 8535                   sta WSA+1
  4031  97fc 68                     pla
  4032  97fd 8534                   sta WSA                                        ; Save status
  4033  97ff a535                   lda WSA+1                                      ; Restore A
  4034  9801 48                     pha
  4035  9802 8a                     txa
  4036  9803 48                     pha
  4037  9804 98                     tya
  4038  9805 48                     pha
  4039  9806 a900                   lda #0
  4040  9808 8535                   sta WSA+1                                      ; NIL
  4041  980a a534                   lda WSA                                        ; Get status
  4042  980c 201e98                 jsr BUILD1                                     ; status
  4043  980f 68                     pla
  4044  9810 201e98                 jsr BUILD1                                     ; Y
  4045  9813 68                     pla
  4046  9814 201e98                 jsr BUILD1                                     ; X
  4047  9817 68                     pla
  4048  9818 201e98                 jsr BUILD1                                     ; A
  4049  981b 4c6788                 jmp AMADE                                      ; Return list
  4050                          
  4051                          
  4052                              ; **** Put A on list in WSA
  4053                          BUILD1
  4054  981e a200                   ldx #0
  4055                          
  4056                              ; **** Put A & X (msb) on WSA
  4057                          BUILD2
  4058  9820 204498                 jsr SETNUM                                     ; WSB has val
  4059  9823 205384                 jsr ALPAIR
  4060  9826 a001                   ldy #1
  4061  9828 a536                   lda WSB
  4062  982a 917a                   sta (POINT),y
  4063  982c c8                     iny
  4064  982d a537                   lda WSB+1
  4065  982f 917a                   sta (POINT),y
  4066  9831 c8                     iny
  4067  9832 a534                   lda WSA
  4068  9834 917a                   sta (POINT),y
  4069  9836 c8                     iny
  4070  9837 a535                   lda WSA+1
  4071  9839 917a                   sta (POINT),y
  4072  983b a57a                   lda POINT
  4073  983d 8534                   sta WSA
  4074  983f a57b                   lda POINT+1
  4075  9841 8535                   sta WSA+1
  4076  9843 60                     rts
  4077                          
  4078                          SETNUM
  4079  9844 48                     pha                                            ; Num atom in WSB
  4080  9845 8a                     txa
  4081  9846 48                     pha
  4082  9847 203d84                 jsr ALNUM
  4083  984a 68                     pla
  4084  984b aa                     tax
  4085  984c 68                     pla
  4086  984d a002                   ldy #2
  4087  984f 917a                   sta (POINT),y
  4088  9851 8a                     txa
  4089  9852 c8                     iny
  4090  9853 917a                   sta (POINT),y
  4091  9855 a57a                   lda POINT
  4092  9857 8536                   sta WSB
  4093  9859 a57b                   lda POINT+1
  4094  985b 8537                   sta WSB+1
  4095  985d 60                     rts
  4096                          
  4097                          
  4098                              ; **** SOUND
  4099                          SOUND
  4100  985e 208794                 jsr ALLNUM
  4101  9861 a002                   ldy #2
  4102  9863 a20a                   ldx #$0a
  4103                          MORSOU
  4104  9865 b530                   lda TVS,x
  4105  9867 8530                   sta ARG
  4106  9869 b531                   lda TVS+1,x
  4107  986b 8531                   sta ARG+1
  4108  986d b130                   lda (ARG),y
  4109  986f 9df605                 sta OSWBUF-10,x
  4110  9872 c8                     iny
  4111  9873 b130                   lda (ARG),y
  4112  9875 9df705                 sta OSWBUF-9,x
  4113  9878 88                     dey
  4114  9879 e8                     inx
  4115  987a e8                     inx
  4116  987b e012                   cpx #$12
  4117  987d d0e6                   bne MORSOU
  4118  987f a907                   lda #osword_sound
  4119                          ENTOSW
  4120  9881 a200                   ldx #<(OSWBUF)
  4121  9883 a006                   ldy #>(OSWBUF)
  4122  9885 20f1ff                 jsr osword                                     ; SOUND command
  4123  9888 4c3183                 jmp YES
  4124                          
  4125                          
  4126                              ; **** ENVELOPE
  4127                          ENV
  4128  988b 208794                 jsr ALLNUM
  4129  988e a002                   ldy #2
  4130  9890 a20a                   ldx #$0a
  4131                          MORENV
  4132  9892 b530                   lda TVS,x
  4133  9894 8530                   sta ARG
  4134  9896 b531                   lda TVS+1,x
  4135  9898 8531                   sta ARG+1
  4136  989a 8a                     txa                                            ; Prepare index
  4137  989b 4a                     lsr
  4138  989c aa                     tax
  4139  989d b130                   lda (ARG),y
  4140  989f 9dfb05                 sta OSWBUF-5,x
  4141  98a2 8a                     txa
  4142  98a3 0a                     asl
  4143  98a4 aa                     tax
  4144  98a5 e8                     inx
  4145  98a6 e8                     inx
  4146  98a7 e026                   cpx #$26
  4147  98a9 d0e7                   bne MORENV
  4148  98ab a908                   lda #8
  4149  98ad d0d2                   bne ENTOSW
  4150  98af d0e1                   bne MORENV
  4151  98b1 a908                   lda #8
  4152  98b3 d0cc                   bne ENTOSW
  4153                          
  4154                              ; **** Get an argument
  4155                          GTARG
  4156  98b5 b53a                   lda TVS+10,x
  4157  98b7 8534                   sta WSA
  4158  98b9 e8                     inx
  4159  98ba b53a                   lda TVS+10,x
  4160  98bc 8535                   sta WSA+1
  4161  98be e8                     inx
  4162                          
  4163                              ; ******************************
  4164                              ;  Now the clock handling
  4165                              ; routines
  4166                              ; ******************************
  4167                          RESET
  4168  98bf 20c898                 jsr STCLK
  4169  98c2 20d698                 jsr GCTIMZ
  4170  98c5 4c3183                 jmp YES                                        ; Value is T
  4171                          
  4172                          
  4173                              ; **** Zero the clock
  4174                          STCLK
  4175  98c8 a902                   lda #osword_write_clock                        ; Write clock
  4176                          ZERTIM
  4177  98ca a082                   ldy #>(TIMZER)
  4178  98cc a276                   ldx #<(TIMZER)
  4179  98ce 20f1ff                 jsr osword                                     ; Write system clock
  4180  98d1 a276                   ldx #$76                                       ; Restore pointer
  4181  98d3 a082                   ldy #$82
  4182  98d5 60                     rts
  4183                          
  4184                          
  4185                              ; **** Zero GC time
  4186                          GCTIMZ
  4187  98d6 a900                   lda #0
  4188  98d8 a204                   ldx #4
  4189                          MGCTIM
  4190  98da 9d2004                 sta GCTIME,x
  4191  98dd ca                     dex
  4192  98de 10fa                   bpl MGCTIM
  4193                          
  4194                              ; **** Read the clock
  4195                          TIMER
  4196  98e0 a901                   lda #osword_read_clock
  4197  98e2 a225                   ldx #<(TIMEW)
  4198  98e4 a004                   ldy #>(TIMEW)
  4199  98e6 20f1ff                 jsr osword                                     ; Read the clock; Read system clock
  4200  98e9 a225                   ldx #<TIMEW                                    ; Restore pointer
  4201  98eb a004                   ldy #>TIMEW
  4202  98ed 60                     rts
  4203                          
  4204                          
  4205                              ; **** TIME
  4206                          TIME
  4207  98ee 20e098                 jsr TIMER
  4208  98f1 4cf898                 jmp TIMPOP
  4209                          
  4210                          
  4211                              ; **** GCTIME
  4212                          GCTIM
  4213  98f4 a220                   ldx #<GCTIME
  4214  98f6 a004                   ldy #>GCTIME
  4215                          
  4216                              ; **** Return a time
  4217                          TIMPOP
  4218  98f8 8638                   stx WSC
  4219  98fa 8439                   sty WSC+1
  4220  98fc 203d84                 jsr ALNUM
  4221  98ff a000                   ldy #0
  4222  9901 b138                   lda (WSC),y
  4223  9903 c8                     iny
  4224  9904 c8                     iny
  4225  9905 917a                   sta (POINT),y
  4226  9907 88                     dey
  4227  9908 b138                   lda (WSC),y
  4228  990a c8                     iny
  4229  990b c8                     iny
  4230  990c 917a                   sta (POINT),y
  4231  990e 4c6788                 jmp AMADE
  4232                          
  4233                          
  4234                              ; **** CLOCK
  4235                          CLOCK
  4236  9911 20e098                 jsr TIMER                                      ; Time in TIMEW
  4237  9914 a205                   ldx #5
  4238  9916 a000                   ldy #0
  4239                          MCLK1
  4240  9918 98                     tya
  4241  9919 9d0704                 sta REM40,x                                    ; Zero remainder
  4242  991c 9d0c04                 sta AUX40,x                                    ; Zero divisor
  4243  991f bd2504                 lda TIMEW,x                                    ; Dividend
  4244  9922 9d0204                 sta ACL40,x
  4245  9925 ca                     dex
  4246  9926 10f0                   bpl MCLK1
  4247  9928 a964                   lda #$64                                       ; Throw away cs
  4248  992a 8d0c04                 sta AUX40
  4249  992d 2042a0                 jsr DIV40
  4250  9930 a900                   lda #0
  4251  9932 8d0704                 sta REM40
  4252  9935 a93c                   lda #$3c                                       ; Get the seconds
  4253  9937 8d0c04                 sta AUX40
  4254  993a 2042a0                 jsr DIV40
  4255  993d a900                   lda #0
  4256  993f 8535                   sta WSA+1                                      ; NIL
  4257  9941 ad0704                 lda REM40
  4258  9944 201e98                 jsr BUILD1
  4259  9947 a900                   lda #0
  4260  9949 8d0704                 sta REM40
  4261  994c a93c                   lda #$3c                                       ; Get the minutes
  4262  994e 8d0c04                 sta AUX40
  4263  9951 2042a0                 jsr DIV40
  4264  9954 ad0704                 lda REM40
  4265  9957 201e98                 jsr BUILD1
  4266  995a ad0204                 lda ACL40                                      ; Get the hours
  4267  995d ae0304                 ldx ACL40+1
  4268  9960 202098                 jsr BUILD2
  4269  9963 4c6788                 jmp AMADE
  4270                          
  4271                          
  4272                              ; **** POINT
  4273                          PVAL
  4274  9966 208794                 jsr ALLNUM
  4275  9969 a002                   ldy #2
  4276  996b b13a                   lda (ARGA),y                                   ; X lsb
  4277  996d 8d1b04                 sta PWORD
  4278  9970 b13c                   lda (ARGB),y                                   ; Y msb
  4279  9972 8d1d04                 sta PWORD+2
  4280  9975 c8                     iny
  4281  9976 b13a                   lda (ARGA),y                                   ; X lsb
  4282  9978 8d1c04                 sta PWORD+1
  4283  997b b13c                   lda (ARGB),y                                   ; Y msb
  4284  997d 8d1e04                 sta PWORD+3
  4285  9980 a909                   lda #osword_read_pixel
  4286  9982 a21b                   ldx #<(PWORD)
  4287  9984 a004                   ldy #>(PWORD)
  4288  9986 20f1ff                 jsr osword                                     ; Read pixel value
  4289  9989 203d84                 jsr ALNUM
  4290  998c a002                   ldy #2
  4291  998e a200                   ldx #0
  4292  9990 ad1f04                 lda PWORD+4
  4293  9993 1001                   bpl PEXIST                                     ; Point on screen
  4294  9995 ca                     dex
  4295                          PEXIST
  4296  9996 917a                   sta (POINT),y
  4297  9998 c8                     iny
  4298  9999 8a                     txa
  4299  999a 917a                   sta (POINT),y
  4300  999c 4c6788                 jmp AMADE
  4301                          
  4302                          
  4303                              ; **** ADVAL
  4304                          ADVAL
  4305  999f 208794                 jsr ALLNUM
  4306  99a2 203d84                 jsr ALNUM
  4307  99a5 a002                   ldy #2
  4308  99a7 b13a                   lda (ARGA),y
  4309  99a9 aa                     tax
  4310  99aa c8                     iny
  4311  99ab b13a                   lda (ARGA),y
  4312  99ad a8                     tay
  4313  99ae a980                   lda #osbyte_read_adc_or_get_buffer_status
  4314  99b0 20f4ff                 jsr osbyte                                     ; Read buffer status or ADC channel
  4315  99b3 98                     tya
  4316  99b4 18                     clc
  4317  99b5 6980                   adc #$80                                       ; Make range +/-2^15
  4318  99b7 a003                   ldy #3
  4319  99b9 917a                   sta (POINT),y
  4320  99bb 88                     dey
  4321  99bc 8a                     txa
  4322  99bd 917a                   sta (POINT),y
  4323  99bf 4c6788                 jmp AMADE
  4324                          
  4325                          
  4326                              ; **** INKEY (added 18/8/83 RMT)
  4327                          INKEY
  4328  99c2 208794                 jsr ALLNUM
  4329  99c5 a003                   ldy #3
  4330  99c7 b13a                   lda (ARGA),y
  4331  99c9 302a                   bmi INKEY2
  4332  99cb 203d84                 jsr ALNUM
  4333  99ce a002                   ldy #2
  4334  99d0 b13a                   lda (ARGA),y
  4335  99d2 aa                     tax
  4336  99d3 c8                     iny
  4337  99d4 b13a                   lda (ARGA),y
  4338  99d6 a8                     tay
  4339  99d7 a981                   lda #osbyte_inkey
  4340  99d9 20f4ff                 jsr osbyte                                     ; Read key within time limit, or read a specific key, or read machine type
  4341  99dc a002                   ldy #2
  4342  99de b00b                   bcs INKER
  4343  99e0 8a                     txa
  4344  99e1 917a                   sta (POINT),y
  4345  99e3 a900                   lda #0
  4346  99e5 c8                     iny
  4347  99e6 917a                   sta (POINT),y
  4348  99e8 4c6788                 jmp AMADE
  4349                          
  4350                          INKER
  4351  99eb a9ff                   lda #$ff
  4352  99ed 917a                   sta (POINT),y
  4353  99ef c8                     iny
  4354  99f0 917a                   sta (POINT),y
  4355  99f2 4c6788                 jmp AMADE
  4356                          
  4357                          INKEY2
  4358  99f5 48                     pha                                            ; Scan keyboard
  4359  99f6 88                     dey
  4360  99f7 b13a                   lda (ARGA),y
  4361  99f9 aa                     tax
  4362  99fa 68                     pla
  4363  99fb a8                     tay
  4364  99fc a981                   lda #osbyte_inkey
  4365  99fe 20f4ff                 jsr osbyte                                     ; Read key within time limit, or read a specific key, or read machine type
  4366  9a01 98                     tya
  4367  9a02 3003                   bmi INKYES
  4368  9a04 4c2d83                 jmp NO
  4369                          
  4370                          INKYES
  4371  9a07 4c3183                 jmp YES
  4372                          
  4373                          
  4374                              ; **** GENSYM (added 31/8/83 RMT)
  4375                          GENSYM
  4376  9a0a a947                   lda #'G'
  4377  9a0c 8d0006                 sta OSWBUF
  4378  9a0f a203                   ldx #3
  4379  9a11 38                     sec
  4380                          NXDIGT
  4381  9a12 bd3404                 lda GENCNT,x
  4382  9a15 6900                   adc #0
  4383  9a17 c93a                   cmp #$3a
  4384  9a19 9002                   bcc NOCAR
  4385  9a1b a930                   lda #'0'
  4386                          NOCAR
  4387  9a1d 9d3404                 sta GENCNT,x
  4388  9a20 9d0106                 sta IMBUF+1,x
  4389  9a23 ca                     dex
  4390  9a24 10ec                   bpl NXDIGT
  4391  9a26 a004                   ldy #4
  4392  9a28 841d                   sty END
  4393  9a2a 20ef89                 jsr MATCH                                      ; Look up Gxxxx
  4394  9a2d a002                   ldy #2
  4395  9a2f b17a                   lda (POINT),y
  4396  9a31 c902                   cmp #<ZA                                       ; Is it UNDEFINED ?
  4397  9a33 d0d5                   bne GENSYM
  4398  9a35 c8                     iny
  4399  9a36 b17a                   lda (POINT),y
  4400  9a38 cd2c04                 cmp IMBOT
  4401  9a3b d0cd                   bne GENSYM
  4402  9a3d a005                   ldy #5
  4403  9a3f b17a                   lda (POINT),y                                  ; No properties ?
  4404  9a41 d0c7                   bne GENSYM
  4405  9a43 4c6788                 jmp AMADE
  4406                          
  4407                          
  4408                              ; ******************************
  4409                              ; Useful Boolean routines
  4410                              ; ******************************
  4411                              ; **** BNOT
  4412                          BNOT
  4413  9a46 208794                 jsr ALLNUM
  4414  9a49 203d84                 jsr ALNUM
  4415  9a4c a002                   ldy #2
  4416  9a4e a9ff                   lda #$ff
  4417  9a50 513a                   eor (ARGA),y
  4418  9a52 917a                   sta (POINT),y
  4419  9a54 c8                     iny
  4420  9a55 a9ff                   lda #$ff
  4421  9a57 513a                   eor (ARGA),y
  4422  9a59 917a                   sta (POINT),y
  4423  9a5b 4c6788                 jmp AMADE
  4424                          
  4425                          
  4426                              ; **** BAND
  4427                          BAND
  4428  9a5e 208794                 jsr ALLNUM
  4429  9a61 203d84                 jsr ALNUM
  4430  9a64 a9ff                   lda #$ff
  4431  9a66 a003                   ldy #3
  4432  9a68 917a                   sta (POINT),y
  4433  9a6a 88                     dey
  4434  9a6b 917a                   sta (POINT),y
  4435  9a6d a633                   ldx TVSEXT
  4436                          MBAND
  4437  9a6f ca                     dex
  4438  9a70 ca                     dex
  4439  9a71 b530                   lda TVS,x
  4440  9a73 8534                   sta WSA
  4441  9a75 b531                   lda TVS+1,x
  4442  9a77 8535                   sta WSA+1
  4443  9a79 b134                   lda (WSA),y
  4444  9a7b 317a                   and (POINT),y
  4445  9a7d 917a                   sta (POINT),y
  4446  9a7f c8                     iny
  4447  9a80 b134                   lda (WSA),y
  4448  9a82 317a                   and (POINT),y
  4449  9a84 917a                   sta (POINT),y
  4450  9a86 88                     dey
  4451  9a87 e00a                   cpx #$0a
  4452  9a89 d0e4                   bne MBAND
  4453  9a8b 4c6788                 jmp AMADE
  4454                          
  4455                          
  4456                              ; **** BOR
  4457                          BOR
  4458  9a8e 208794                 jsr ALLNUM
  4459  9a91 203d84                 jsr ALNUM
  4460  9a94 a900                   lda #0
  4461  9a96 a003                   ldy #3
  4462  9a98 917a                   sta (POINT),y
  4463  9a9a 88                     dey
  4464  9a9b 917a                   sta (POINT),y
  4465  9a9d a633                   ldx TVSEXT
  4466                          MBOR
  4467  9a9f ca                     dex
  4468  9aa0 ca                     dex
  4469  9aa1 b530                   lda TVS,x
  4470  9aa3 8534                   sta WSA
  4471  9aa5 b531                   lda TVS+1,x
  4472  9aa7 8535                   sta WSA+1
  4473  9aa9 b134                   lda (WSA),y
  4474  9aab 117a                   ora (POINT),y
  4475  9aad 917a                   sta (POINT),y
  4476  9aaf c8                     iny
  4477  9ab0 b134                   lda (WSA),y
  4478  9ab2 117a                   ora (POINT),y
  4479  9ab4 917a                   sta (POINT),y
  4480  9ab6 88                     dey
  4481  9ab7 e00a                   cpx #$0a
  4482  9ab9 d0e4                   bne MBOR
  4483  9abb 4c6788                 jmp AMADE
  4484                          
  4485                          
  4486                              ; ******************************
  4487                              ; Garbage collector file.
  4488                              ; ******************************
  4489                              ; **** Set CELL to image start
  4490                          SETCEL
  4491  9abe a902                   lda #WSBOT
  4492  9ac0 857c                   sta CELL
  4493  9ac2 ad2c04                 lda IMBOT
  4494  9ac5 857d                   sta CELL+1
  4495  9ac7 60                     rts
  4496                          
  4497                          
  4498                              ; **** Clear all G.C. flags
  4499                          CLEARF
  4500  9ac8 20be9a                 jsr SETCEL
  4501  9acb a000                   ldy #0
  4502                          RZ
  4503  9acd b17c                   lda (CELL),y
  4504  9acf 29fc                   and #$fc
  4505  9ad1 917c                   sta (CELL),y
  4506  9ad3 20708a                 jsr NXCELL
  4507  9ad6 90f5                   bcc RZ
  4508  9ad8 60                     rts
  4509                          
  4510                          
  4511                              ; ******************************
  4512                              ; Register a set of cells,
  4513                              ; starting from the one in GCA.
  4514                              ; ******************************
  4515                          REGCDR
  4516  9ad9 a104                   lda (GCA,x)
  4517                          REGPIN
  4518  9adb 6a                     ror
  4519  9adc b02d                   bcs REGRTS
  4520  9ade 6a                     ror
  4521  9adf 9032                   bcc VIRGIN
  4522  9ae1 a004                   ldy #4
  4523  9ae3 2a                     rol
  4524  9ae4 38                     sec
  4525  9ae5 2a                     rol
  4526  9ae6 8104                   sta (GCA,x)
  4527  9ae8 3001                   bmi LIN
  4528  9aea c8                     iny
  4529                          LIN
  4530  9aeb b104                   lda (GCA),y
  4531  9aed f01c                   beq REGRTS
  4532  9aef aa                     tax
  4533  9af0 88                     dey
  4534                          BOT
  4535  9af1 b104                   lda (GCA),y
  4536  9af3 8504                   sta GCA
  4537  9af5 8605                   stx GCA+1
  4538                          REGIS1
  4539  9af7 a200                   ldx #0
  4540                          REGISU
  4541  9af9 a104                   lda (GCA,x)
  4542  9afb 30de                   bmi REGPIN
  4543  9afd c904                   cmp #4
  4544  9aff 90da                   bcc REGPIN
  4545  9b01 0901                   ora #1
  4546  9b03 8104                   sta (GCA,x)
  4547  9b05 a003                   ldy #3
  4548  9b07 c908                   cmp #SUBRF
  4549  9b09 b0e0                   bcs LIN
  4550                          REGRTS
  4551  9b0b 60                     rts
  4552                          
  4553                          REGIST
  4554  9b0c a505                   lda GCA+1                                      ; This code added by RMT
  4555  9b0e c579                   cmp ARETOP                                     ; 12/9/83 to prevent bug
  4556  9b10 90e5                   bcc REGIS1                                     ; probably caused by ARG
  4557  9b12 60                     rts                                            ; being &FFxx
  4558                          
  4559                          VIRGIN
  4560  9b13 b8                     clv
  4561  9b14 a002                   ldy #2
  4562  9b16 38                     sec
  4563  9b17 2a                     rol
  4564  9b18 0a                     asl
  4565  9b19 8104                   sta (GCA,x)
  4566  9b1b 3001                   bmi LINJ
  4567  9b1d c8                     iny
  4568                          LINJ
  4569  9b1e b104                   lda (GCA),y
  4570  9b20 f0b7                   beq REGCDR
  4571  9b22 aa                     tax
  4572  9b23 88                     dey
  4573  9b24 c609                   dec l0009
  4574  9b26 1004                   bpl STOCK
  4575  9b28 e609                   inc l0009
  4576  9b2a f0c5                   beq BOT                                        ; Always taken
  4577                          STOCK
  4578  9b2c a505                   lda GCA+1
  4579  9b2e 48                     pha
  4580  9b2f a504                   lda GCA
  4581  9b31 48                     pha
  4582  9b32 b104                   lda (GCA),y
  4583  9b34 8605                   stx GCA+1
  4584  9b36 8504                   sta GCA
  4585  9b38 200c9b                 jsr REGIST
  4586  9b3b e609                   inc l0009
  4587  9b3d 68                     pla
  4588  9b3e 8504                   sta GCA
  4589  9b40 68                     pla
  4590  9b41 8505                   sta GCA+1
  4591  9b43 4cd99a                 jmp REGCDR
  4592                          
  4593                          
  4594                              ; **** Garbage Collector entry
  4595                          RUBBSH
  4596  9b46 8602                   stx GARX
  4597  9b48 8403                   sty GARRY
  4598  9b4a a9ff                   lda #$ff                                       ; Mark memory invalid
  4599  9b4c 8d3204                 sta MEMINV
  4600  9b4f a904                   lda #4                                         ; Start timing
  4601  9b51 20ca98                 jsr ZERTIM                                     ; Zero timer
  4602  9b54 ad2d04                 lda AREVAL
  4603  9b57 851b                   sta OLDEXT
  4604  9b59 ad2e04                 lda AREVAL+1
  4605  9b5c 851c                   sta OLDEXT+1
  4606  9b5e e600                   inc GCNO
  4607  9b60 d002                   bne HGCA
  4608  9b62 e601                   inc GCNO+1
  4609                          HGCA
  4610  9b64 a51a                   lda LEVEL
  4611  9b66 2902                   and #2
  4612  9b68 f016                   beq NOMESA
  4613  9b6a a513                   lda HANDLE
  4614  9b6c 48                     pha                                            ; Save I/O file handle
  4615  9b6d a233                   ldx #GCOFF                                     ; 'G.C. no.'
  4616  9b6f 20fc84                 jsr MESSAH
  4617  9b72 a500                   lda GCNO
  4618  9b74 8572                   sta ACL                                        ; Print no. of G.C.'s
  4619  9b76 a501                   lda GCNO+1
  4620  9b78 8573                   sta ACL+1
  4621  9b7a 20578c                 jsr PINT
  4622  9b7d 68                     pla
  4623  9b7e 8513                   sta HANDLE
  4624                          NOMESA
  4625  9b80 20c89a                 jsr CLEARF
  4626  9b83 a920                   lda #$20
  4627  9b85 8509                   sta l0009                                      ; Stack limit
  4628  9b87 a633                   ldx TVSEXT
  4629                          COLLEC
  4630  9b89 b52f                   lda TVS-1,x
  4631  9b8b f00d                   beq SREG                                       ; Register off WSA etc.
  4632                          CREG
  4633  9b8d 8505                   sta GCA+1
  4634  9b8f b52e                   lda TVS-2,x
  4635  9b91 8504                   sta GCA
  4636  9b93 867c                   stx CELL
  4637  9b95 200c9b                 jsr REGIST
  4638  9b98 a67c                   ldx CELL
  4639                          SREG
  4640  9b9a ca                     dex
  4641  9b9b ca                     dex
  4642  9b9c e006                   cpx #6
  4643  9b9e b0e9                   bcs COLLEC
  4644  9ba0 a531                   lda ARG+1
  4645  9ba2 f009                   beq STRETH
  4646  9ba4 8505                   sta GCA+1
  4647  9ba6 a530                   lda ARG
  4648  9ba8 8504                   sta GCA
  4649  9baa 200c9b                 jsr REGIST
  4650                          STRETH
  4651  9bad a57e                   lda SP                                         ; Register off stack
  4652  9baf 857c                   sta CELL
  4653  9bb1 a57f                   lda SP+1
  4654  9bb3 857d                   sta CELL+1
  4655  9bb5 c579                   cmp ARETOP
  4656  9bb7 b035                   bcs LOOKW
  4657                          STUP
  4658  9bb9 a000                   ldy #0
  4659  9bbb b17c                   lda (CELL),y
  4660  9bbd f008                   beq BOWDUN
  4661  9bbf a8                     tay
  4662                          STCOLL
  4663  9bc0 20729e                 jsr SPREG
  4664  9bc3 d0fb                   bne STCOLL
  4665  9bc5 b17c                   lda (CELL),y
  4666                          BOWDUN
  4667  9bc7 38                     sec
  4668  9bc8 657c                   adc CELL
  4669  9bca 857c                   sta CELL
  4670  9bcc 9002                   bcc SPOCK
  4671  9bce e67d                   inc CELL+1
  4672                          SPOCK
  4673  9bd0 b17c                   lda (CELL),y
  4674  9bd2 a8                     tay
  4675  9bd3 20729e                 jsr SPREG
  4676  9bd6 88                     dey                                            ; Avoid the return addr
  4677  9bd7 88                     dey
  4678                          STCOL
  4679  9bd8 20729e                 jsr SPREG
  4680  9bdb d0fb                   bne STCOL
  4681  9bdd b17c                   lda (CELL),y
  4682  9bdf 38                     sec
  4683                          CXH
  4684  9be0 657c                   adc CELL
  4685  9be2 9002                   bcc CXHB
  4686  9be4 e67d                   inc CELL+1
  4687                          CXHB
  4688  9be6 857c                   sta CELL
  4689  9be8 a57d                   lda CELL+1
  4690  9bea c579                   cmp ARETOP
  4691  9bec 90cb                   bcc STUP
  4692                          LOOKW
  4693  9bee 20be9a                 jsr SETCEL                                     ; Now off whole
  4694  9bf1 2ce09b                 bit CXH                                        ; Set overflow
  4695  9bf4 08                     php
  4696                          MORWS
  4697  9bf5 a200                   ldx #0
  4698  9bf7 a17c                   lda (CELL,x)
  4699  9bf9 c982                   cmp #$82
  4700  9bfb f00d                   beq DOREG
  4701  9bfd c902                   cmp #2
  4702  9bff f009                   beq DOREG                                      ; Register if half
  4703  9c01 b014                   bcs NOREG                                      ; finished,
  4704  9c03 203d90                 jsr USEFUL
  4705  9c06 f00f                   beq NOREG
  4706  9c08 a17c                   lda (CELL,x)
  4707                          DOREG
  4708  9c0a a47c                   ldy CELL                                       ; or if char atom
  4709  9c0c 8404                   sty GCA
  4710  9c0e a47d                   ldy CELL+1
  4711  9c10 8405                   sty GCA+1
  4712  9c12 28                     plp
  4713  9c13 20db9a                 jsr REGPIN
  4714  9c16 08                     php
  4715                          NOREG
  4716  9c17 20708a                 jsr NXCELL
  4717  9c1a 90d9                   bcc MORWS
  4718  9c1c 28                     plp
  4719  9c1d 50cf                   bvc LOOKW                                      ; There's more
  4720                          
  4721                              ; ******************************
  4722                              ; Having registered the cells,
  4723                              ; now to move the memory about
  4724                              ;    First calculate the change
  4725                              ; in position of all the blocks
  4726                              ; ******************************
  4727  9c1f 20be9a                 jsr SETCEL
  4728  9c22 a000                   ldy #0
  4729  9c24 840b                   sty DISPM
  4730  9c26 840c                   sty DISPM+1
  4731                          ML
  4732  9c28 b17c                   lda (CELL),y
  4733  9c2a 4a                     lsr
  4734  9c2b 9008                   bcc SETMIN
  4735  9c2d 20708a                 jsr NXCELL
  4736  9c30 90f6                   bcc ML
  4737  9c32 4c7f9d                 jmp CLUPB
  4738                          
  4739                          SETMIN
  4740  9c35 a57d                   lda CELL+1
  4741  9c37 8588                   sta AD+1
  4742  9c39 a57c                   lda CELL
  4743  9c3b 8587                   sta AD                                         ; Top of static
  4744                          DLOP
  4745  9c3d a002                   ldy #2
  4746  9c3f a50b                   lda DISPM
  4747  9c41 917c                   sta (CELL),y
  4748  9c43 c8                     iny
  4749  9c44 a50c                   lda DISPM+1
  4750  9c46 917c                   sta (CELL),y
  4751  9c48 a57c                   lda CELL
  4752  9c4a 851e                   sta AA
  4753  9c4c a57d                   lda CELL+1
  4754  9c4e 851f                   sta AA+1
  4755                          STFR
  4756  9c50 20708a                 jsr NXCELL
  4757  9c53 b05a                   bcs TADJ
  4758  9c55 b17c                   lda (CELL),y
  4759  9c57 4a                     lsr
  4760  9c58 90f6                   bcc STFR
  4761  9c5a a57c                   lda CELL
  4762  9c5c 8520                   sta AB
  4763  9c5e e51e                   sbc AA
  4764  9c60 aa                     tax
  4765  9c61 a57d                   lda CELL+1
  4766  9c63 8521                   sta AB+1
  4767  9c65 e51f                   sbc AA+1
  4768  9c67 a8                     tay
  4769  9c68 8a                     txa
  4770  9c69 18                     clc
  4771  9c6a 650b                   adc DISPM
  4772  9c6c 850b                   sta DISPM
  4773  9c6e 98                     tya
  4774  9c6f 650c                   adc DISPM+1
  4775  9c71 850c                   sta DISPM+1
  4776  9c73 a000                   ldy #0
  4777  9c75 b17c                   lda (CELL),y
  4778  9c77 4a                     lsr
  4779                          STUSE
  4780  9c78 2a                     rol
  4781  9c79 18                     clc
  4782  9c7a 300a                   bmi SIXG
  4783  9c7c c908                   cmp #SUBRF
  4784  9c7e b006                   bcs SIXG
  4785  9c80 c8                     iny
  4786  9c81 b17c                   lda (CELL),y
  4787  9c83 88                     dey
  4788  9c84 9002                   bcc ADDIN
  4789                          SIXG
  4790  9c86 a905                   lda #5
  4791                          ADDIN
  4792  9c88 657c                   adc CELL
  4793  9c8a 857c                   sta CELL
  4794  9c8c 9010                   bcc NHCIQ
  4795  9c8e a67d                   ldx CELL+1
  4796  9c90 e67d                   inc CELL+1
  4797  9c92 a50b                   lda DISPM
  4798  9c94 9d5004                 sta DL,x
  4799  9c97 a50c                   lda DISPM+1
  4800  9c99 9d2005                 sta DH,x
  4801  9c9c a57c                   lda CELL
  4802                          NHCIQ
  4803  9c9e cd2d04                 cmp AREVAL
  4804  9ca1 a57d                   lda CELL+1
  4805  9ca3 ed2e04                 sbc AREVAL+1
  4806  9ca6 b007                   bcs TADJ
  4807  9ca8 b17c                   lda (CELL),y
  4808  9caa 4a                     lsr
  4809  9cab b0cb                   bcs STUSE
  4810  9cad 908e                   bcc DLOP
  4811                          TADJ
  4812  9caf a50b                   lda DISPM
  4813  9cb1 8509                   sta l0009
  4814  9cb3 a50c                   lda DISPM+1
  4815  9cb5 850a                   sta l000a
  4816                          
  4817                              ; ******************************
  4818                              ; Having calculated the
  4819                              ; dispacements, now to alter
  4820                              ; the pointers
  4821                              ; ******************************
  4822                          ADJUSS
  4823  9cb7 a57e                   lda SP                                         ; Adjust stack
  4824  9cb9 857c                   sta CELL
  4825  9cbb a57f                   lda SP+1
  4826  9cbd 857d                   sta CELL+1
  4827                          ASP
  4828  9cbf a000                   ldy #0
  4829  9cc1 8404                   sty GCA
  4830  9cc3 b17c                   lda (CELL),y
  4831  9cc5 f006                   beq NOLEAP
  4832  9cc7 48                     pha
  4833  9cc8 a8                     tay
  4834  9cc9 20f59d                 jsr AJCELL
  4835  9ccc 68                     pla
  4836                          NOLEAP
  4837  9ccd 38                     sec
  4838  9cce 657c                   adc CELL
  4839  9cd0 857c                   sta CELL
  4840  9cd2 9002                   bcc LUCK
  4841  9cd4 e67d                   inc CELL+1
  4842                          LUCK
  4843  9cd6 a57d                   lda CELL+1
  4844  9cd8 c579                   cmp ARETOP
  4845  9cda 90e3                   bcc ASP
  4846  9cdc a932                   lda #BINDER                                    ; Adjust workspace
  4847  9cde 857c                   sta CELL
  4848  9ce0 a900                   lda #0
  4849  9ce2 857d                   sta CELL+1
  4850  9ce4 a433                   ldy TVSEXT
  4851  9ce6 88                     dey
  4852  9ce7 88                     dey
  4853  9ce8 88                     dey
  4854  9ce9 20f59d                 jsr AJCELL
  4855  9cec a92f                   lda #TVS-1
  4856  9cee 857c                   sta CELL
  4857  9cf0 a002                   ldy #2
  4858  9cf2 20f59d                 jsr AJCELL
  4859  9cf5 20be9a                 jsr SETCEL
  4860  9cf8 a000                   ldy #0                                         ; Revises pointer over
  4861                          ADJUT
  4862  9cfa b17c                   lda (CELL),y                                   ; whole of
  4863  9cfc 4a                     lsr
  4864  9cfd 9011                   bcc NXADJ
  4865  9cff a004                   ldy #4
  4866  9d01 0a                     asl
  4867  9d02 3009                   bmi LICE
  4868  9d04 c8                     iny
  4869  9d05 c908                   cmp #SUBRF
  4870  9d07 b004                   bcs LICE
  4871  9d09 c904                   cmp #NUMF
  4872  9d0b b003                   bcs NXADJ
  4873                          LICE
  4874  9d0d 20f59d                 jsr AJCELL
  4875                          NXADJ
  4876  9d10 20708a                 jsr NXCELL
  4877  9d13 90e5                   bcc ADJUT
  4878                          
  4879                              ; ******************************
  4880                              ; Now move the blocks about
  4881                              ; ******************************
  4882  9d15 a587                   lda AD                                         ; AD has top of static
  4883  9d17 857c                   sta CELL                                       ; space
  4884  9d19 a588                   lda AD+1
  4885  9d1b 857d                   sta CELL+1
  4886                          SAL
  4887  9d1d 20708a                 jsr NXCELL
  4888  9d20 b053                   bcs CLUP
  4889  9d22 b17c                   lda (CELL),y
  4890  9d24 4a                     lsr
  4891  9d25 90f6                   bcc SAL
  4892  9d27 a57c                   lda CELL
  4893  9d29 851e                   sta AA
  4894  9d2b a57d                   lda CELL+1
  4895  9d2d 851f                   sta AA+1
  4896                          MOLE
  4897  9d2f 20708a                 jsr NXCELL
  4898  9d32 b005                   bcs ABGO
  4899  9d34 b17c                   lda (CELL),y
  4900  9d36 4a                     lsr
  4901  9d37 b0f6                   bcs MOLE
  4902                          ABGO
  4903  9d39 a57c                   lda CELL
  4904  9d3b 8520                   sta AB
  4905  9d3d 38                     sec
  4906  9d3e e51e                   sbc AA
  4907  9d40 8504                   sta GCA                                        ; PUT LENGTH IN GCA
  4908  9d42 a57d                   lda CELL+1
  4909  9d44 8521                   sta AB+1
  4910                          
  4911                              ; ******************************
  4912                              ; Fast move routine
  4913                              ; ******************************
  4914  9d46 a000                   ldy #0
  4915  9d48 e51f                   sbc AA+1
  4916  9d4a f011                   beq BITMOV
  4917  9d4c 8505                   sta GCA+1
  4918                          MORMOV
  4919  9d4e b11e                   lda (AA),y
  4920  9d50 9187                   sta (AD),y
  4921  9d52 c8                     iny
  4922  9d53 d0f9                   bne MORMOV
  4923  9d55 e61f                   inc AA+1
  4924  9d57 e688                   inc AD+1
  4925  9d59 c605                   dec GCA+1
  4926  9d5b d0f1                   bne MORMOV
  4927                          BITMOV
  4928  9d5d b11e                   lda (AA),y
  4929  9d5f 9187                   sta (AD),y
  4930  9d61 c8                     iny
  4931  9d62 c404                   cpy GCA
  4932  9d64 90f7                   bcc BITMOV
  4933  9d66 d0b5                   bne SAL                                        ; If GCA is zero loop
  4934  9d68 98                     tya
  4935  9d69 18                     clc
  4936  9d6a 6587                   adc AD
  4937  9d6c 8587                   sta AD
  4938  9d6e 9002                   bcc FINMOV
  4939  9d70 e688                   inc AD+1
  4940                          FINMOV
  4941  9d72 4c1d9d                 jmp SAL
  4942                          
  4943                          
  4944                              ; ******************************
  4945                              ; Now to calculate the gain in
  4946                              ; cells etc.
  4947                              ; ******************************
  4948                          CLUP
  4949  9d75 a587                   lda AD
  4950  9d77 8d2d04                 sta AREVAL
  4951  9d7a a588                   lda AD+1
  4952  9d7c 8d2e04                 sta AREVAL+1
  4953                          CLUPB
  4954  9d7f 20c89a                 jsr CLEARF
  4955  9d82 38                     sec
  4956  9d83 a51b                   lda OLDEXT
  4957  9d85 ed2d04                 sbc AREVAL
  4958  9d88 8572                   sta ACL
  4959  9d8a 8507                   sta SA
  4960  9d8c a51c                   lda OLDEXT+1
  4961  9d8e ed2e04                 sbc AREVAL+1
  4962  9d91 8573                   sta ACL+1
  4963  9d93 8508                   sta SA+1
  4964  9d95 a51a                   lda LEVEL
  4965  9d97 2901                   and #1
  4966  9d99 f031                   beq NOMESC
  4967  9d9b a513                   lda HANDLE                                     ; Save file handle
  4968  9d9d 48                     pha
  4969  9d9e a900                   lda #0
  4970  9da0 8513                   sta HANDLE
  4971  9da2 201985                 jsr CROUT
  4972  9da5 a95e                   lda #'^'
  4973  9da7 200e85                 jsr OUT
  4974  9daa 20578c                 jsr PINT
  4975  9dad a23a                   ldx #COLOFF
  4976  9daf 200085                 jsr MESSAG                                     ; ' Bytes collected '
  4977  9db2 38                     sec
  4978  9db3 a57e                   lda SP
  4979  9db5 ed2d04                 sbc AREVAL
  4980  9db8 8572                   sta ACL
  4981  9dba a57f                   lda SP+1
  4982  9dbc ed2e04                 sbc AREVAL+1
  4983  9dbf 8573                   sta ACL+1
  4984  9dc1 20578c                 jsr PINT
  4985  9dc4 a24c                   ldx #FROFF
  4986  9dc6 200085                 jsr MESSAG                                     ; ' Bytes free<CR>'
  4987  9dc9 68                     pla
  4988  9dca 8513                   sta HANDLE                                     ; Restore file handle
  4989                          NOMESC
  4990  9dcc a903                   lda #osword_read_interval_timer
  4991  9dce a225                   ldx #<(TIMEW)
  4992  9dd0 a004                   ldy #>(TIMEW)
  4993  9dd2 20f1ff                 jsr osword                                     ; Read timer; Read interval timer
  4994  9dd5 18                     clc
  4995  9dd6 a000                   ldy #0
  4996  9dd8 a205                   ldx #5
  4997                          MORTIM
  4998  9dda b92504                 lda TIMEW,y
  4999  9ddd 792004                 adc GCTIME,y
  5000  9de0 992004                 sta GCTIME,y
  5001  9de3 c8                     iny
  5002  9de4 ca                     dex
  5003  9de5 10f3                   bpl MORTIM
  5004  9de7 a602                   ldx GARX
  5005  9de9 a403                   ldy GARRY
  5006  9deb a900                   lda #0
  5007  9ded 8d3204                 sta MEMINV
  5008  9df0 a507                   lda SA
  5009  9df2 0508                   ora SA+1
  5010  9df4 60                     rts
  5011                          
  5012                          AJCELL
  5013  9df5 b17c                   lda (CELL),y
  5014  9df7 88                     dey
  5015  9df8 c588                   cmp AD+1
  5016  9dfa 9070                   bcc NXPR
  5017  9dfc c579                   cmp ARETOP
  5018  9dfe b06c                   bcs NXPR
  5019  9e00 c521                   cmp AB+1                                       ; Bottom of top block
  5020  9e02 9019                   bcc ONW
  5021  9e04 8505                   sta GCA+1
  5022  9e06 d00a                   bne SPECS
  5023  9e08 8508                   sta SA+1
  5024  9e0a b17c                   lda (CELL),y
  5025  9e0c c520                   cmp AB
  5026  9e0e 9013                   bcc ONX
  5027  9e10 b002                   bcs SPECTR
  5028                          SPECS
  5029  9e12 b17c                   lda (CELL),y
  5030                          SPECTR
  5031  9e14 e509                   sbc l0009
  5032  9e16 aa                     tax
  5033  9e17 a505                   lda GCA+1
  5034  9e19 e50a                   sbc l000a
  5035  9e1b d048                   bne CHUGB
  5036                          ONW
  5037  9e1d 8505                   sta GCA+1
  5038  9e1f 8508                   sta SA+1
  5039  9e21 b17c                   lda (CELL),y
  5040                          ONX
  5041  9e23 aa                     tax
  5042  9e24 8406                   sty GABBY
  5043  9e26 a8                     tay
  5044  9e27 b104                   lda (GCA),y
  5045  9e29 4a                     lsr
  5046                          GCAON
  5047  9e2a 2a                     rol
  5048  9e2b 18                     clc
  5049  9e2c 300e                   bmi SIXP
  5050  9e2e c908                   cmp #SUBRF
  5051  9e30 b00a                   bcs SIXP
  5052  9e32 98                     tya
  5053  9e33 c8                     iny
  5054  9e34 f021                   beq PAGDIQ
  5055  9e36 7104                   adc (GCA),y
  5056  9e38 b01e                   bcs PAGDIP
  5057  9e3a 9005                   bcc ADDOUT
  5058                          SIXP
  5059  9e3c 98                     tya
  5060  9e3d 6905                   adc #5
  5061  9e3f b017                   bcs PAGDIP
  5062                          ADDOUT
  5063  9e41 a8                     tay
  5064  9e42 b104                   lda (GCA),y
  5065  9e44 4a                     lsr
  5066  9e45 b0e3                   bcs GCAON
  5067  9e47 8407                   sty SA
  5068  9e49 a002                   ldy #2
  5069  9e4b 8a                     txa
  5070  9e4c 38                     sec
  5071  9e4d f107                   sbc (SA),y
  5072  9e4f aa                     tax
  5073  9e50 a505                   lda GCA+1
  5074  9e52 c8                     iny
  5075  9e53 f107                   sbc (SA),y
  5076  9e55 b00c                   bcs CHUG                                       ; Always taken
  5077                          PAGDIQ
  5078  9e57 38                     sec
  5079                          PAGDIP
  5080  9e58 a405                   ldy GCA+1
  5081  9e5a 8a                     txa
  5082  9e5b f95004                 sbc DL,y
  5083  9e5e aa                     tax
  5084  9e5f 98                     tya
  5085  9e60 f92005                 sbc DH,y
  5086                          CHUG
  5087  9e63 a406                   ldy GABBY
  5088                          CHUGB
  5089  9e65 c8                     iny
  5090  9e66 917c                   sta (CELL),y
  5091  9e68 88                     dey
  5092  9e69 8a                     txa
  5093  9e6a 917c                   sta (CELL),y
  5094                          NXPR
  5095  9e6c 88                     dey
  5096  9e6d c002                   cpy #2
  5097  9e6f b084                   bcs AJCELL
  5098  9e71 60                     rts
  5099                          
  5100                          SPREG
  5101  9e72 b17c                   lda (CELL),y                                   ; Stack register
  5102  9e74 f00e                   beq NULBOW
  5103  9e76 8505                   sta GCA+1
  5104  9e78 8406                   sty GABBY
  5105  9e7a 88                     dey
  5106  9e7b b17c                   lda (CELL),y
  5107  9e7d 8504                   sta GCA
  5108  9e7f 200c9b                 jsr REGIST
  5109  9e82 a406                   ldy GABBY
  5110                          NULBOW
  5111  9e84 88                     dey
  5112  9e85 88                     dey
  5113  9e86 60                     rts
  5114                          
  5115                          
  5116                              ; ******************************
  5117                              ; The error handler
  5118                              ; The stack is "gently" taken
  5119                              ; down with diagnostic printout.
  5120                              ; ******************************
  5121                          
  5122                              ; **** Main error entry
  5123                          ERRORS
  5124                          ERROR
  5125  9e87 a97e                   lda #osbyte_acknowledge_escape                 ; Ack escape
  5126  9e89 20f4ff                 jsr osbyte                                     ; Clear escape condition and perform escape effects
  5127  9e8c 18                     clc                                            ; Increment error count
  5128  9e8d a50d                   lda ERRCNT
  5129  9e8f 6901                   adc #1
  5130  9e91 850d                   sta ERRCNT
  5131  9e93 a50e                   lda ERRCNT+1
  5132  9e95 6900                   adc #0
  5133  9e97 850e                   sta ERRCNT+1
  5134  9e99 a51a                   lda LEVEL                                      ; Save LEVEL
  5135  9e9b 8597                   sta OLDLEV
  5136  9e9d a000                   ldy #0
  5137  9e9f b1fd                   lda (BRKAD),y                                  ; Get errno.
  5138  9ea1 8511                   sta ERRNO
  5139  9ea3 8572                   sta ACL
  5140                          
  5141                              ; **** Traceback wanted?
  5142  9ea5 a2ff                   ldx #$ff
  5143                          NEXCAT
  5144  9ea7 e8                     inx
  5145  9ea8 bd7082                 lda CATTAB,x
  5146  9eab 300a                   bmi TRCOK                                      ; Allow trackback
  5147  9ead c511                   cmp ERRNO
  5148  9eaf d0f6                   bne NEXCAT
  5149  9eb1 a51a                   lda LEVEL                                      ; Match
  5150  9eb3 29e7                   and #$e7
  5151  9eb5 851a                   sta LEVEL                                      ; No traceback
  5152                          TRCOK
  5153  9eb7 a2ff                   ldx #$ff
  5154  9eb9 9a                     txs                                            ; Reset stack
  5155  9eba e8                     inx
  5156  9ebb 868b                   stx DEPTH
  5157  9ebd 8613                   stx HANDLE
  5158  9ebf a90e                   lda #$0e                                       ; Page mode
  5159  9ec1 20eeff                 jsr oswrch                                     ; Write character 14
  5160  9ec4 a918                   lda #$18                                       ; Mask for LEVEL
  5161  9ec6 850f                   sta TOPBIN
  5162  9ec8 a904                   lda #4                                         ; Error
  5163  9eca 251a                   and LEVEL
  5164  9ecc f00c                   beq NERRA
  5165  9ece a25d                   ldx #ERROFF                                    ; "^Error number "
  5166  9ed0 20fc84                 jsr MESSAH
  5167  9ed3 a900                   lda #0
  5168  9ed5 8573                   sta ACL+1
  5169  9ed7 20578c                 jsr PINT                                       ; Print err no.
  5170                          NERRA
  5171  9eda a9ff                   lda #$ff
  5172  9edc 241a                   bit LEVEL                                      ; Err mess mask
  5173  9ede f003                   beq NERRB
  5174  9ee0 20a59f                 jsr PSTRNG                                     ; Print err mess
  5175                          NERRB
  5176  9ee3 a908                   lda #8                                         ; Top args mask
  5177  9ee5 251a                   and LEVEL
  5178  9ee7 f003                   beq NERRC
  5179  9ee9 20b69f                 jsr PARG                                       ; Print ARG
  5180                          NERRC
  5181  9eec a57f                   lda SP+1
  5182                          DWARF=NERRC-1
  5183  9eee c579                   cmp ARETOP                                     ; Pop return
  5184  9ef0 900c                   bcc WINDER                                     ; stack completely
  5185  9ef2 a90f                   lda #$0f
  5186  9ef4 20eeff                 jsr oswrch                                     ; Page mode off; Write character 15
  5187  9ef7 a597                   lda OLDLEV
  5188  9ef9 851a                   sta LEVEL                                      ; Old LEVEL
  5189  9efb 4cc682                 jmp SUPER                                      ; Restart
  5190                          
  5191                          
  5192                              ; **** Collapse the stack
  5193                          WINDER
  5194  9efe a200                   ldx #0
  5195  9f00 8673                   stx ACL+1
  5196  9f02 8639                   stx WSC+1                                      ; Used bind count
  5197  9f04 a17e                   lda (SP,x)                                     ; Get binding state
  5198  9f06 a8                     tay
  5199  9f07 c8                     iny
  5200  9f08 18                     clc
  5201  9f09 717e                   adc (SP),y                                     ; Add work space
  5202  9f0b a8                     tay
  5203  9f0c c8                     iny
  5204  9f0d b17e                   lda (SP),y                                     ; To get ARG
  5205  9f0f 8537                   sta WSB+1
  5206  9f11 88                     dey                                            ; Put ARG in WSB
  5207  9f12 b17e                   lda (SP),y
  5208  9f14 8536                   sta WSB
  5209  9f16 88                     dey
  5210  9f17 b17e                   lda (SP),y                                     ; Check ret addr for
  5211  9f19 88                     dey                                            ;  ERRORSET
  5212  9f1a c99f                   cmp #>ELFIN-1
  5213  9f1c d01e                   bne SLIP
  5214  9f1e b17e                   lda (SP),y                                     ; and low byte
  5215  9f20 c9c6                   cmp #<ELFIN-1
  5216  9f22 d018                   bne SLIP                                       ; Not ERRORSET
  5217  9f24 98                     tya
  5218  9f25 18                     clc
  5219  9f26 6904                   adc #4                                         ; Remove ERRORSET
  5220  9f28 657e                   adc SP                                         ; stack entry
  5221  9f2a 857e                   sta SP
  5222  9f2c 9002                   bcc QZQ
  5223  9f2e e67f                   inc SP+1
  5224                          QZQ
  5225  9f30 a511                   lda ERRNO                                      ; Return err no.
  5226  9f32 8572                   sta ACL
  5227  9f34 a90f                   lda #$0f
  5228  9f36 20eeff                 jsr oswrch                                     ; Page mode off; Write character 15
  5229  9f39 4ca492                 jmp ACLRET                                     ; POP via ACLRET
  5230                          
  5231                          SLIP
  5232  9f3c a9eb                   lda #<DWARF
  5233  9f3e 917e                   sta (SP),y                                     ; Set up return for POP
  5234  9f40 c8                     iny
  5235  9f41 a99e                   lda #>DWARF
  5236  9f43 917e                   sta (SP),y
  5237  9f45 a51a                   lda LEVEL                                      ; Check trace print
  5238  9f47 250f                   and TOPBIN                                     ; is this second arg
  5239  9f49 f047                   beq NOPE                                       ; Skip rint
  5240  9f4b 2910                   and #$10                                       ; Clear top arg flag
  5241  9f4d 850f                   sta TOPBIN
  5242  9f4f f036                   beq BINS
  5243  9f51 a17e                   lda (SP,x)                                     ; Any bound vars?
  5244  9f53 f032                   beq BINS
  5245                          
  5246                              ; **** Do bound var pairs
  5247  9f55 a8                     tay
  5248                          ERBIN
  5249  9f56 b17e                   lda (SP),y                                     ; Get var name into
  5250  9f58 8531                   sta ARG+1                                      ; ARG
  5251  9f5a 88                     dey
  5252  9f5b b17e                   lda (SP),y
  5253  9f5d 8530                   sta ARG
  5254  9f5f 88                     dey
  5255  9f60 88                     dey
  5256  9f61 88                     dey
  5257  9f62 8438                   sty WSC                                        ; NB. WSC +&01 is &00
  5258  9f64 201985                 jsr CROUT
  5259  9f67 20818b                 jsr PRINA                                      ; Print var name
  5260  9f6a a93d                   lda #'='
  5261  9f6c 200e85                 jsr OUT
  5262  9f6f a920                   lda #' '                                       ; Print a space
  5263  9f71 200e85                 jsr OUT
  5264  9f74 a003                   ldy #3                                         ; Get the value of the
  5265  9f76 b130                   lda (ARG),y                                    ; variable into ARG
  5266  9f78 aa                     tax
  5267  9f79 88                     dey
  5268  9f7a b130                   lda (ARG),y
  5269  9f7c 8530                   sta ARG
  5270  9f7e 8631                   stx ARG+1
  5271  9f80 20818b                 jsr PRINA                                      ; Print it
  5272  9f83 a438                   ldy WSC                                        ; Repeat if more
  5273  9f85 d0cf                   bne ERBIN
  5274                          
  5275                              ; **** Remove rest of stack
  5276                          BINS
  5277  9f87 a536                   lda WSB
  5278  9f89 8530                   sta ARG
  5279  9f8b a537                   lda WSB+1
  5280  9f8d 8531                   sta ARG+1
  5281  9f8f 20b69f                 jsr PARG
  5282                          NOPE
  5283  9f92 4c3a83                 jmp POP                                        ; And back to NERRC
  5284                          
  5285                          ERCN
  5286  9f95 a000                   ldy #0
  5287  9f97 a201                   ldx #1
  5288                          ERCND
  5289  9f99 b50d                   lda ERRCNT,x
  5290  9f9b 9572                   sta ACL,x
  5291  9f9d 940d                   sty ERRCNT,x
  5292  9f9f ca                     dex
  5293  9fa0 10f7                   bpl ERCND
  5294  9fa2 4ca492                 jmp ACLRET
  5295                          
  5296                          PSTRNG
  5297  9fa5 a200                   ldx #0                                         ; Print err mess
  5298  9fa7 a90d                   lda #$0d
  5299                          NXOUT
  5300  9fa9 200e85                 jsr OUT
  5301  9fac e8                     inx
  5302  9fad 8a                     txa
  5303  9fae a8                     tay
  5304  9faf b1fd                   lda (BRKAD),y
  5305  9fb1 d0f6                   bne NXOUT
  5306  9fb3 4c1985                 jmp CROUT
  5307                          
  5308                          PARG
  5309  9fb6 a631                   ldx ARG+1                                      ; Look for flag
  5310  9fb8 e8                     inx
  5311  9fb9 f008                   beq ARGRTS
  5312  9fbb a26b                   ldx #ARGOFF                                    ; Print ARG
  5313  9fbd 20fc84                 jsr MESSAH                                     ; 'Arg :'
  5314  9fc0 4c818b                 jmp PRINA
  5315                          
  5316                          ARGRTS
  5317  9fc3 60                     rts
  5318                          
  5319                          
  5320                              ; **** ERRORSET
  5321                          ERRSET
  5322  9fc4 20d89f                 jsr STEVAL
  5323                          ELFIN
  5324  9fc7 205384                 jsr ALPAIR
  5325  9fca a002                   ldy #2
  5326  9fcc a531                   lda ARG+1
  5327  9fce 917a                   sta (POINT),y
  5328  9fd0 88                     dey
  5329  9fd1 a530                   lda ARG
  5330  9fd3 917a                   sta (POINT),y
  5331  9fd5 4c6788                 jmp AMADE
  5332                          
  5333                          STEVAL
  5334  9fd8 209383                 jsr STACK                                      ; ELFIN on stack
  5335  9fdb 201e85                 jsr NXEVAL
  5336  9fde 4c3a83                 jmp POP
  5337                          
  5338                          
  5339                              ; ******************************
  5340                              ; Useful arithmetic routines
  5341                              ; ******************************
  5342                              ; **** 16 bit multiply
  5343                          MULPM
  5344  9fe1 2025a0                 jsr MDA
  5345                          MUL
  5346  9fe4 a010                   ldy #$10                                       ; Index for 16 bits
  5347                          MULB
  5348  9fe6 a572                   lda ACL
  5349  9fe8 4a                     lsr
  5350  9fe9 900c                   bcc MULD
  5351  9feb 18                     clc
  5352  9fec a2fe                   ldx #$fe
  5353                          MULC
  5354  9fee b576                   lda AUXL,x
  5355  9ff0 7578                   adc SIGN,x
  5356  9ff2 9576                   sta AUXL,x
  5357  9ff4 e8                     inx
  5358  9ff5 d0f7                   bne MULC
  5359                          MULD
  5360  9ff7 a203                   ldx #3
  5361                          MULE
  5362  9ff9 7672                   ror ACL,x
  5363  9ffb ca                     dex
  5364  9ffc 10fb                   bpl MULE
  5365  9ffe 88                     dey
  5366  9fff d0e5                   bne MULB
  5367  a001 60                     rts
  5368                          
  5369                          
  5370                              ; **** 16 bit divide
  5371                          DIVPM
  5372  a002 2025a0                 jsr MDA
  5373                          DIV
  5374  a005 a010                   ldy #$10
  5375                          DIVB
  5376  a007 0672                   asl ACL
  5377  a009 2673                   rol ACL+1
  5378  a00b 2674                   rol XTNDL
  5379  a00d 2675                   rol XTNDL+1
  5380  a00f 38                     sec
  5381  a010 a574                   lda XTNDL
  5382  a012 e576                   sbc AUXL
  5383  a014 aa                     tax
  5384  a015 a575                   lda XTNDL+1
  5385  a017 e577                   sbc AUXL+1
  5386  a019 9006                   bcc DIVC
  5387  a01b 8674                   stx XTNDL
  5388  a01d 8575                   sta XTNDL+1
  5389  a01f e672                   inc ACL
  5390                          DIVC
  5391  a021 88                     dey
  5392  a022 d0e3                   bne DIVB
  5393  a024 60                     rts
  5394                          
  5395                          
  5396                              ; **** Negation routines
  5397                          MDA
  5398  a025 a000                   ldy #0
  5399  a027 8478                   sty SIGN                                       ; Abs value of
  5400  a029 a276                   ldx #AUXL                                      ; AUXL with sign in
  5401  a02b 2030a0                 jsr MDB
  5402  a02e a272                   ldx #ACL                                       ; ls bit of SIGN
  5403                          MDB
  5404  a030 b501                   lda GCNO+1,x
  5405  a032 100d                   bpl MDRTS
  5406                          MD
  5407  a034 38                     sec
  5408  a035 98                     tya
  5409  a036 f500                   sbc GCNO,x
  5410  a038 9500                   sta GCNO,x
  5411  a03a 98                     tya
  5412  a03b f501                   sbc GCNO+1,x
  5413  a03d 9501                   sta GCNO+1,x
  5414  a03f e678                   inc SIGN
  5415                          MDRTS
  5416  a041 60                     rts
  5417                          
  5418                          
  5419                              ; **** 40 bit divide
  5420                          DIV40
  5421  a042 a928                   lda #$28
  5422                          DIV40B
  5423  a044 48                     pha
  5424  a045 0e0204                 asl ACL40
  5425  a048 a201                   ldx #1
  5426  a04a a003                   ldy #3
  5427                          MDIV1
  5428  a04c 3e0204                 rol ACL40,x
  5429  a04f e8                     inx
  5430  a050 88                     dey
  5431  a051 10f9                   bpl MDIV1
  5432  a053 a200                   ldx #0
  5433  a055 a004                   ldy #4
  5434                          MDIV2
  5435  a057 3e0704                 rol REM40,x
  5436  a05a e8                     inx
  5437  a05b 88                     dey
  5438  a05c 10f9                   bpl MDIV2
  5439  a05e 38                     sec
  5440  a05f a200                   ldx #0
  5441  a061 a004                   ldy #4
  5442                          MDIV3
  5443  a063 bd0704                 lda REM40,x
  5444  a066 fd0c04                 sbc AUX40,x
  5445  a069 9d1104                 sta TEMP40,x
  5446  a06c e8                     inx
  5447  a06d 88                     dey
  5448  a06e 10f3                   bpl MDIV3
  5449  a070 900e                   bcc DIV40C
  5450  a072 a204                   ldx #4
  5451                          MDIV4
  5452  a074 bd1104                 lda TEMP40,x
  5453  a077 9d0704                 sta REM40,x
  5454  a07a ca                     dex
  5455  a07b 10f7                   bpl MDIV4
  5456  a07d ee0204                 inc ACL40
  5457                          DIV40C
  5458  a080 68                     pla
  5459  a081 a8                     tay
  5460  a082 88                     dey
  5461  a083 98                     tya
  5462  a084 d0be                   bne DIV40B
  5463  a086 60                     rts
  5464                          
  5465                          LISPEN
  5466                          unused1
  5467  a087 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5468  a08f ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5469  a097 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5470  a09f ff00000000000000       !byte $ff,   0,   0,   0,   0,   0,   0,   0
  5471  a0a7 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  5472  a0af 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  5473  a0b7 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  5474  a0bf 00ffffffffffffff       !byte   0, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5475  a0c7 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5476  a0cf ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5477  a0d7 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5478  a0df ff00000000000000       !byte $ff,   0,   0,   0,   0,   0,   0,   0
  5479  a0e7 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  5480  a0ef 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  5481  a0f7 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  5482  a0ff 0000ffffffffffff       !byte   0,   0, $ff, $ff, $ff, $ff, $ff, $ff
  5483  a107 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5484  a10f ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5485  a117 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5486  a11f ff00000000000000       !byte $ff,   0,   0,   0,   0,   0,   0,   0
  5487  a127 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  5488  a12f 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  5489  a137 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  5490  a13f 00ffffffffffffff       !byte   0, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5491  a147 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5492  a14f ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5493  a157 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5494  a15f ff00000000000000       !byte $ff,   0,   0,   0,   0,   0,   0,   0
  5495  a167 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  5496  a16f 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  5497  a177 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  5498  a17f 0000ffffffffffff       !byte   0,   0, $ff, $ff, $ff, $ff, $ff, $ff
  5499  a187 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5500  a18f ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5501  a197 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5502  a19f ff00000000000000       !byte $ff,   0,   0,   0,   0,   0,   0,   0
  5503  a1a7 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  5504  a1af 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  5505  a1b7 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  5506  a1bf 00ffffffffffffff       !byte   0, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5507  a1c7 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5508  a1cf ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5509  a1d7 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5510  a1df ff00000000000000       !byte $ff,   0,   0,   0,   0,   0,   0,   0
  5511  a1e7 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  5512  a1ef 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  5513  a1f7 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  5514  a1ff 0000ffffffffffff       !byte   0,   0, $ff, $ff, $ff, $ff, $ff, $ff
  5515  a207 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5516  a20f ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5517  a217 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5518  a21f ff00000000000000       !byte $ff,   0,   0,   0,   0,   0,   0,   0
  5519  a227 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  5520  a22f 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  5521  a237 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  5522  a23f 00ffffffffffffff       !byte   0, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5523  a247 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5524  a24f ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5525  a257 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5526  a25f ff00000000000000       !byte $ff,   0,   0,   0,   0,   0,   0,   0
  5527  a267 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  5528  a26f 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  5529  a277 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  5530  a27f 0000ffffffffffff       !byte   0,   0, $ff, $ff, $ff, $ff, $ff, $ff
  5531  a287 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5532  a28f ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5533  a297 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5534  a29f ff00000000000000       !byte $ff,   0,   0,   0,   0,   0,   0,   0
  5535  a2a7 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  5536  a2af 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  5537  a2b7 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  5538  a2bf 00ffffffffffffff       !byte   0, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5539  a2c7 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5540  a2cf ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5541  a2d7 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5542  a2df ff00000000000000       !byte $ff,   0,   0,   0,   0,   0,   0,   0
  5543  a2e7 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  5544  a2ef 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  5545  a2f7 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  5546  a2ff 0000ffffffffffff       !byte   0,   0, $ff, $ff, $ff, $ff, $ff, $ff
  5547  a307 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5548  a30f ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5549  a317 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5550  a31f ff00000000000000       !byte $ff,   0,   0,   0,   0,   0,   0,   0
  5551  a327 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  5552  a32f 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  5553  a337 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  5554  a33f 00ffffffffffffff       !byte   0, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5555  a347 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5556  a34f ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5557  a357 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5558  a35f ff00000000000000       !byte $ff,   0,   0,   0,   0,   0,   0,   0
  5559  a367 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  5560  a36f 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  5561  a377 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  5562  a37f 0000ffffffffffff       !byte   0,   0, $ff, $ff, $ff, $ff, $ff, $ff
  5563  a387 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5564  a38f ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5565  a397 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5566  a39f ff00000000000000       !byte $ff,   0,   0,   0,   0,   0,   0,   0
  5567  a3a7 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  5568  a3af 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  5569  a3b7 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  5570  a3bf 00ffffffffffffff       !byte   0, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5571  a3c7 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5572  a3cf ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5573  a3d7 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5574  a3df ff00000000000000       !byte $ff,   0,   0,   0,   0,   0,   0,   0
  5575  a3e7 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  5576  a3ef 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  5577  a3f7 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  5578  a3ff 00                     !byte   0
  5579                          
  5580                          
  5581                              ; ******************************
  5582                              ; This file holds the vectored
  5583                              ; core routines. These are
  5584                              ; held in 2 pages immediately
  5585                              ; preceding the image.
  5586                              ; ******************************
  5587                          VECTAB
  5588  a400 4c2983                 jmp NULL
  5589                          
  5590  a403 4c048b                 jmp PRINT
  5591                          
  5592  a406 4c1e8e                 jmp CONS
  5593                          
  5594  a409 4cb394                 jmp EVAL
  5595                          
  5596  a40c 4c998d                 jmp CAR
  5597                          
  5598  a40f 4cfb82                 jmp EQ
  5599                          
  5600  a412 4c3a8e                 jmp SETQ
  5601                          
  5602  a415 4c348e                 jmp SET
  5603                          
  5604  a418 4cef82                 jmp ATOM
  5605                          
  5606  a41b 4cdc88                 jmp READX
  5607                          
  5608  a41e 4c8d8d                 jmp CDR
  5609                          
  5610  a421 4c088b                 jmp PRINZ
  5611                          
  5612  a424 4cee8c                 jmp COND
  5613                          
  5614  a427 4c4d8d                 jmp QUO
  5615                          
  5616  a42a 4c288d                 jmp PROGN
  5617                          
  5618  a42d 4cfa8d                 jmp LOOP
  5619                          
  5620  a430 4c388d                 jmp WHILE
  5621                          
  5622  a433 4c6c8e                 jmp LIST
  5623                          
  5624  a436 4c958d                 jmp CAAR
  5625                          
  5626  a439 4c818d                 jmp CADR
  5627                          
  5628  a43c 4c898d                 jmp CDAR
  5629                          
  5630  a43f 4c798d                 jmp CDDR
  5631                          
  5632  a442 4c918d                 jmp CAAAR
  5633                          
  5634  a445 4c718d                 jmp CAADR
  5635                          
  5636  a448 4c7d8d                 jmp CADAR
  5637                          
  5638  a44b 4c698d                 jmp CADDR
  5639                          
  5640  a44e 4c858d                 jmp CDAAR
  5641                          
  5642  a451 4c6d8d                 jmp CDADR
  5643                          
  5644  a454 4c758d                 jmp CDDAR
  5645                          
  5646  a457 4c658d                 jmp CDDDR
  5647                          
  5648  a45a 4cd88d                 jmp _AND
  5649                          
  5650  a45d 4ce98d                 jmp OR
  5651                          
  5652  a460 4cc48d                 jmp ERRORL
  5653                          
  5654  a463 4cd98e                 jmp NUMP
  5655                          
  5656  a466 4ceb8e                 jmp ZEROP
  5657                          
  5658  a469 4cef8e                 jmp ONEP
  5659                          
  5660  a46c 4c0a8f                 jmp MINUSP
  5661                          
  5662  a46f 4c778f                 jmp DUMP
  5663                          
  5664  a472 4c5c8f                 jmp LOAD
  5665                          
  5666  a475 4c2992                 jmp PLUS
  5667                          
  5668  a478 4cc191                 jmp DIFF
  5669                          
  5670  a47b 4cd991                 jmp MINUS
  5671                          
  5672  a47e 4ccd8e                 jmp SUBRP
  5673                          
  5674  a481 4c5d92                 jmp TIMES
  5675                          
  5676  a484 4c7a91                 jmp QUOT
  5677                          
  5678  a487 4c7e91                 jmp REM
  5679                          
  5680  a48a 4c2793                 jmp LESSP
  5681                          
  5682  a48d 4cf291                 jmp SUBA
  5683                          
  5684  a490 4cfd91                 jmp ADDA
  5685                          
  5686  a493 4c7491                 jmp RECLAM
  5687                          
  5688  a496 4cef92                 jmp RPLACA
  5689                          
  5690  a499 4cf392                 jmp RPLACD
  5691                          
  5692  a49c 4cb592                 jmp CHARS
  5693                          
  5694  a49f 4c5297                 jmp MESSON
  5695                          
  5696  a4a2 4cd693                 jmp GET
  5697                          
  5698  a4a5 4cec93                 jmp PUT
  5699                          
  5700  a4a8 4c4a94                 jmp REMPR
  5701                          
  5702  a4ab 4c3493                 jmp GT
  5703                          
  5704  a4ae 4ce092                 jmp GPLIST
  5705                          
  5706  a4b1 4cc08e                 jmp CHARP
  5707                          
  5708  a4b4 4cd58e                 jmp LISTP
  5709                          
  5710  a4b7 4caa93                 jmp ASSOC
  5711                          
  5712  a4ba 4c2f8d                 jmp UNTIL
  5713                          
  5714  a4bd 4cd18e                 jmp FSUBRP
  5715                          
  5716  a4c0 4c959f                 jmp ERCN
  5717                          
  5718  a4c3 4cc49f                 jmp ERRSET
  5719                          
  5720  a4c6 4cc98f                 jmp CALL
  5721                          
  5722  a4c9 4cd78f                 jmp PEEK
  5723                          
  5724  a4cc 4ce78f                 jmp POKE
  5725                          
  5726  a4cf 4cf98f                 jmp OBLIST
  5727                          
  5728  a4d2 4c3695                 jmp APPLY
  5729                          
  5730  a4d5 4ca595                 jmp MAPCAR
  5731                          
  5732  a4d8 4c9595                 jmp MAP
  5733                          
  5734  a4db 4c2296                 jmp ASCII
  5735                          
  5736  a4de 4c2f96                 jmp ORDINL
  5737                          
  5738  a4e1 4caa96                 jmp EXPLOD
  5739                          
  5740  a4e4 4cfe96                 jmp IMPLOD
  5741                          
  5742  a4e7 4c0596                 jmp GETCHA
  5743                          
  5744  a4ea 4c7290                 jmp STAR
  5745                          
  5746  a4ed 4c6097                 jmp MESSOF
  5747                          
  5748  a4f0 4ca68a                 jmp IPLINE
  5749                          
  5750  a4f3 4cd08c                 jmp CLOS
  5751                          
  5752  a4f6 4c9890                 jmp OPE
  5753                          
  5754  a4f9 4cf28a                 jmp WRTTZ
  5755                          
  5756  a4fc 4cd78a                 jmp WRIT
  5757                          
  5758  a4ff 4ca98c                 jmp EOF
  5759                          
  5760  a502 4ca38e                 jmp VDU
  5761                          
  5762  a505 4c0c8b                 jmp PRINTC
  5763                          
  5764  a508 4c2a8b                 jmp PRINC
  5765                          
  5766  a50b 4c7097                 jmp MODE
  5767                          
  5768  a50e 4cd297                 jmp USR
  5769                          
  5770  a511 4c5e98                 jmp SOUND
  5771                          
  5772  a514 4c8b98                 jmp ENV
  5773                          
  5774  a517 4cf498                 jmp GCTIM
  5775                          
  5776  a51a 4cee98                 jmp TIME
  5777                          
  5778  a51d 4cbf98                 jmp RESET
  5779                          
  5780  a520 4c1199                 jmp CLOCK
  5781                          
  5782  a523 4c6699                 jmp PVAL
  5783                          
  5784  a526 4c9f99                 jmp ADVAL
  5785                          
  5786  a529 4c469a                 jmp BNOT
  5787                          
  5788  a52c 4c5e9a                 jmp BAND
  5789                          
  5790  a52f 4c8e9a                 jmp BOR
  5791                          
  5792  a532 4cc299                 jmp INKEY
  5793                          
  5794  a535 4c0a9a                 jmp GENSYM
  5795                          
  5796                          unused2
  5797  a538 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  5798  a540 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5799  a548 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5800  a550 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5801  a558 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5802  a560 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  5803  a568 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  5804  a570 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  5805  a578 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  5806  a580 00ffffffffffffff       !byte   0, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5807  a588 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5808  a590 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5809  a598 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5810  a5a0 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  5811  a5a8 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  5812  a5b0 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  5813  a5b8 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  5814  a5c0 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5815  a5c8 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5816  a5d0 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5817  a5d8 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  5818  a5e0 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  5819  a5e8 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  5820  a5f0 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  5821  a5f8 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  5822                          
  5823                              ; Calculated expressions put at the end of the assembly so they resolve on the
  5824                              ; first pass which makes the asserts at the end of the file work.
  5825                          HIWARM  = WRMCHK + HILISP - LISVAL
  5826                          EVOFF   = TEXT   - TEXT
  5827                          VALOFF  = VALTXT - TEXT
  5828                          NILOFF  = NILTXT - TEXT
  5829                          DOTOFF  = DOTTXT - TEXT
  5830                          INSOFF  = INSTXT - TEXT
  5831                          GCOFF   = GCTXT  - TEXT
  5832                          COLOFF  = COLTXT - TEXT
  5833                          FROFF   = FRTXT  - TEXT
  5834                          SUBOFF  = SUBTXT - TEXT
  5835                          ERROFF  = ERRTXT - TEXT
  5836                          ARGOFF  = ARGTXT - TEXT
  5837                          WRMOFF  = WRMTXT - TEXT
  5838                          HLPOFF  = HLPTXT - TEXT
  5839                          
  5840                              ; ******************************
  5841                              ; The first LISP image file
  5842                              ; ******************************
  5843                          IMAGE
  5844  a600 f918                   !byte $f9, $18
  5845                          
  5846                          ZA
  5847  a602 000f                   !byte CHARF,   $0f
  5848  a604 020a                   !word $0a02
  5849  a606 020a                   !word $0a02
  5850  a608 554e444546494e45...    !text "UNDEFINED"
  5851                          
  5852                          TRUE
  5853  a611 0007                   !byte CHARF,     7
  5854  a613 110a                   !word $0a11
  5855  a615 0000                   !word     0
  5856  a617 54                     !text "T"
  5857                          
  5858                          LAMBDA
  5859  a618 000c                   !byte CHARF,   $0c
  5860  a61a 180a                   !word $0a18
  5861  a61c 0000                   !word     0
  5862  a61e 4c414d424441           !text "LAMBDA"
  5863                          
  5864                          NIL
  5865  a624 0009                   !byte CHARF,     9
  5866  a626 0000                   !word 0
  5867  a628 0000                   !word 0
  5868  a62a 4e494c                 !text "NIL"
  5869                          
  5870                          QUOTE
  5871  a62d 000b                   !byte CHARF,   $0b
  5872  a62f 040b                   !word $0b04
  5873  a631 0000                   !word     0
  5874  a633 51554f5445             !text "QUOTE"
  5875                          
  5876                          ZB
  5877  a638 000a                   !byte CHARF,   $0a
  5878  a63a b60a                   !word $0ab6
  5879  a63c 0000                   !word     0
  5880  a63e 4e554c4c               !text "NULL"
  5881                          
  5882                          ZC
  5883  a642 000b                   !byte CHARF,   $0b
  5884  a644 bc0a                   !word $0abc
  5885  a646 0000                   !word     0
  5886  a648 5052494e54             !text "PRINT"
  5887                          
  5888                          ZD
  5889  a64d 000a                   !byte CHARF,   $0a
  5890  a64f c20a                   !word $0ac2
  5891  a651 0000                   !word     0
  5892  a653 434f4e53               !text "CONS"
  5893                          
  5894                          ZE
  5895  a657 000a                   !byte CHARF,   $0a
  5896  a659 c80a                   !word $0ac8
  5897  a65b 0000                   !word     0
  5898  a65d 4556414c               !text "EVAL"
  5899                          
  5900                          ZF
  5901  a661 0009                   !byte CHARF,     9
  5902  a663 ce0a                   !word $0ace
  5903  a665 0000                   !word     0
  5904  a667 434152                 !text "CAR"
  5905                          
  5906                          ZG
  5907  a66a 0008                   !byte CHARF,     8
  5908  a66c d40a                   !word $0ad4
  5909  a66e 0000                   !word     0
  5910  a670 4551                   !text "EQ"
  5911                          
  5912                          ZH
  5913  a672 000a                   !byte CHARF,   $0a
  5914  a674 da0a                   !word $0ada
  5915  a676 0000                   !word     0
  5916  a678 53455451               !text "SETQ"
  5917                          
  5918                          ZI
  5919  a67c 0009                   !byte CHARF,     9
  5920  a67e e00a                   !word $0ae0
  5921  a680 0000                   !word     0
  5922  a682 534554                 !text "SET"
  5923                          
  5924                          ZJ
  5925  a685 000a                   !byte CHARF,   $0a
  5926  a687 e60a                   !word $0ae6
  5927  a689 0000                   !word     0
  5928  a68b 41544f4d               !text "ATOM"
  5929                          
  5930                          ZK
  5931  a68f 000a                   !byte CHARF,   $0a
  5932  a691 ec0a                   !word $0aec
  5933  a693 0000                   !word     0
  5934  a695 52454144               !text "READ"
  5935                          
  5936                          ZL
  5937  a699 0009                   !byte CHARF,     9
  5938  a69b f20a                   !word $0af2
  5939  a69d 0000                   !word     0
  5940  a69f 434452                 !text "CDR"
  5941                          
  5942                          ZM
  5943  a6a2 000a                   !byte CHARF,   $0a
  5944  a6a4 f80a                   !word $0af8
  5945  a6a6 0000                   !word     0
  5946  a6a8 5052494e               !text "PRIN"
  5947                          
  5948                          ZN
  5949  a6ac 000a                   !byte CHARF,   $0a
  5950  a6ae fe0a                   !word $0afe
  5951  a6b0 0000                   !word     0
  5952  a6b2 434f4e44               !text "COND"
  5953                          
  5954                          ZO
  5955  a6b6 0801                   !byte SUBRF,     1
  5956  a6b8 0000                   !word     0
  5957  a6ba 0008                   !word $0800
  5958                          
  5959                          ZP
  5960  a6bc 0800                   !byte SUBRF,     0
  5961  a6be 0000                   !word     0
  5962  a6c0 0308                   !word $0803
  5963                          
  5964                          ZQ
  5965  a6c2 0802                   !byte SUBRF,     2
  5966  a6c4 0000                   !word     0
  5967  a6c6 0608                   !word $0806
  5968                          
  5969                          ZR
  5970  a6c8 0801                   !byte SUBRF,     1
  5971  a6ca 0000                   !word     0
  5972  a6cc 0908                   !word $0809
  5973                          
  5974                          ZS
  5975  a6ce 0801                   !byte SUBRF,     1
  5976  a6d0 0000                   !word     0
  5977  a6d2 0c08                   !word $080c
  5978                          
  5979                          ZT
  5980  a6d4 0802                   !byte SUBRF,     2
  5981  a6d6 0000                   !word     0
  5982  a6d8 0f08                   !word $080f
  5983                          
  5984                          ZU
  5985  a6da 0c00                   !byte FSUBRF,      0
  5986  a6dc 0000                   !word     0
  5987  a6de 1208                   !word $0812
  5988                          
  5989                          ZV
  5990  a6e0 0c00                   !byte FSUBRF,      0
  5991  a6e2 0000                   !word     0
  5992  a6e4 1508                   !word $0815
  5993                          
  5994                          ZW
  5995  a6e6 0801                   !byte SUBRF,     1
  5996  a6e8 0000                   !word     0
  5997  a6ea 1808                   !word $0818
  5998                          
  5999                          ZX
  6000  a6ec 0800                   !byte SUBRF,     0
  6001  a6ee 0000                   !word     0
  6002  a6f0 1b08                   !word $081b
  6003                          
  6004                          ZY
  6005  a6f2 0801                   !byte SUBRF,     1
  6006  a6f4 0000                   !word     0
  6007  a6f6 1e08                   !word $081e
  6008                          
  6009                          ZZ
  6010  a6f8 0800                   !byte SUBRF,     0
  6011  a6fa 0000                   !word     0
  6012  a6fc 2108                   !word $0821
  6013                          
  6014                          ZAA
  6015  a6fe 0c00                   !byte FSUBRF,      0
  6016  a700 0000                   !word     0
  6017  a702 2408                   !word $0824
  6018                          
  6019                          ZAB
  6020  a704 0c00                   !byte FSUBRF,      0
  6021  a706 0000                   !word     0
  6022  a708 2708                   !word $0827
  6023                          
  6024                          ZBA
  6025  a70a 000b                   !byte CHARF,   $0b
  6026  a70c 220c                   !word $0c22
  6027  a70e 0000                   !word     0
  6028  a710 50524f474e             !text "PROGN"
  6029                          
  6030                          ZBB
  6031  a715 000a                   !byte CHARF,   $0a
  6032  a717 280c                   !word $0c28
  6033  a719 0000                   !word     0
  6034  a71b 4c4f4f50               !text "LOOP"
  6035                          
  6036                          ZBC
  6037  a71f 000b                   !byte CHARF,   $0b
  6038  a721 2e0c                   !word $0c2e
  6039  a723 0000                   !word     0
  6040  a725 5748494c45             !text "WHILE"
  6041                          
  6042                          ZBF
  6043  a72a 000a                   !byte CHARF,   $0a
  6044  a72c 340c                   !word $0c34
  6045  a72e 0000                   !word     0
  6046  a730 4c495354               !text "LIST"
  6047                          
  6048                          ZBH
  6049  a734 000a                   !byte CHARF,   $0a
  6050  a736 3a0c                   !word $0c3a
  6051  a738 0000                   !word     0
  6052  a73a 43414152               !text "CAAR"
  6053                          
  6054                          ZBI
  6055  a73e 000a                   !byte CHARF,   $0a
  6056  a740 400c                   !word $0c40
  6057  a742 0000                   !word     0
  6058  a744 43414452               !text "CADR"
  6059                          
  6060                          ZBJ
  6061  a748 000a                   !byte CHARF,   $0a
  6062  a74a 460c                   !word $0c46
  6063  a74c 0000                   !word     0
  6064  a74e 43444152               !text "CDAR"
  6065                          
  6066                          ZBK
  6067  a752 000a                   !byte CHARF,   $0a
  6068  a754 4c0c                   !word $0c4c
  6069  a756 0000                   !word     0
  6070  a758 43444452               !text "CDDR"
  6071                          
  6072                          ZBL
  6073  a75c 000b                   !byte CHARF,   $0b
  6074  a75e 520c                   !word $0c52
  6075  a760 0000                   !word     0
  6076  a762 4341414152             !text "CAAAR"
  6077                          
  6078                          ZBM
  6079  a767 000b                   !byte CHARF,   $0b
  6080  a769 580c                   !word $0c58
  6081  a76b 0000                   !word     0
  6082  a76d 4341414452             !text "CAADR"
  6083                          
  6084                          ZBN
  6085  a772 000b                   !byte CHARF,   $0b
  6086  a774 5e0c                   !word $0c5e
  6087  a776 0000                   !word     0
  6088  a778 4341444152             !text "CADAR"
  6089                          
  6090                          ZBO
  6091  a77d 000b                   !byte CHARF,   $0b
  6092  a77f 640c                   !word $0c64
  6093  a781 0000                   !word     0
  6094  a783 4341444452             !text "CADDR"
  6095                          
  6096                          ZPB
  6097  a788 000b                   !byte CHARF,   $0b
  6098  a78a 6a0c                   !word $0c6a
  6099  a78c 0000                   !word     0
  6100  a78e 4344414152             !text "CDAAR"
  6101                          
  6102                          ZBQ
  6103  a793 000b                   !byte CHARF,   $0b
  6104  a795 700c                   !word $0c70
  6105  a797 0000                   !word     0
  6106  a799 4344414452             !text "CDADR"
  6107                          
  6108                          ZBR
  6109  a79e 000b                   !byte CHARF,   $0b
  6110  a7a0 760c                   !word $0c76
  6111  a7a2 0000                   !word     0
  6112  a7a4 4344444152             !text "CDDAR"
  6113                          
  6114                          ZBS
  6115  a7a9 000b                   !byte CHARF,   $0b
  6116  a7ab 7c0c                   !word $0c7c
  6117  a7ad 0000                   !word     0
  6118  a7af 4344444452             !text "CDDDR"
  6119                          
  6120                          ZBT
  6121  a7b4 0009                   !byte CHARF,     9
  6122  a7b6 820c                   !word $0c82
  6123  a7b8 0000                   !word     0
  6124  a7ba 414e44                 !text "AND"
  6125                          
  6126                          ZBU
  6127  a7bd 0008                   !byte CHARF,     8
  6128  a7bf 880c                   !word $0c88
  6129  a7c1 0000                   !word     0
  6130  a7c3 4f52                   !text "OR"
  6131                          
  6132                          ZBV
  6133  a7c5 000b                   !byte CHARF,   $0b
  6134  a7c7 8e0c                   !word $0c8e
  6135  a7c9 0000                   !word     0
  6136  a7cb 4552524f52             !text "ERROR"
  6137                          
  6138                          ZBW
  6139  a7d0 0009                   !byte CHARF,     9
  6140  a7d2 b60a                   !word $0ab6
  6141  a7d4 0000                   !word     0
  6142  a7d6 4e4f54                 !text "NOT"
  6143                          
  6144                          ZBX
  6145  a7d9 000d                   !byte CHARF,   $0d
  6146  a7db 940c                   !word $0c94
  6147  a7dd 0000                   !word     0
  6148  a7df 4e554d42455250         !text "NUMBERP"
  6149                          
  6150                          ZBY
  6151  a7e6 000b                   !byte CHARF,   $0b
  6152  a7e8 9a0c                   !word $0c9a
  6153  a7ea 0000                   !word     0
  6154  a7ec 5a45524f50             !text "ZEROP"
  6155                          
  6156                          ZBZ
  6157  a7f1 000a                   !byte CHARF,   $0a
  6158  a7f3 a00c                   !word $0ca0
  6159  a7f5 0000                   !word     0
  6160  a7f7 4f4e4550               !text "ONEP"
  6161                          
  6162                          ZCA
  6163  a7fb 000c                   !byte CHARF,   $0c
  6164  a7fd a60c                   !word $0ca6
  6165  a7ff 0000                   !word     0
  6166  a801 4d494e555350           !text "MINUSP"
  6167                          
  6168                          ZCB
  6169  a807 0007                   !byte CHARF,     7
  6170  a809 0000                   !word 0
  6171  a80b 0000                   !word 0
  6172  a80d 46                     !text "F"
  6173                          
  6174                          ZCC
  6175  a80e 000a                   !byte CHARF,   $0a
  6176  a810 ac0c                   !word $0cac
  6177  a812 0000                   !word     0
  6178  a814 53415645               !text "SAVE"
  6179                          
  6180                          ZCD
  6181  a818 000a                   !byte CHARF,   $0a
  6182  a81a b20c                   !word $0cb2
  6183  a81c 0000                   !word     0
  6184  a81e 4c4f4144               !text "LOAD"
  6185                          
  6186                          ZEA
  6187  a822 0c00                   !byte FSUBRF,      0
  6188  a824 0000                   !word     0
  6189  a826 2a08                   !word $082a
  6190                          
  6191                          ZEB
  6192  a828 0c00                   !byte FSUBRF,      0
  6193  a82a 0000                   !word     0
  6194  a82c 2d08                   !word $082d
  6195                          
  6196                          ZEC
  6197  a82e 0c00                   !byte FSUBRF,      0
  6198  a830 0000                   !word     0
  6199  a832 3008                   !word $0830
  6200                          
  6201                          ZEF
  6202  a834 0800                   !byte SUBRF,     0
  6203  a836 0000                   !word     0
  6204  a838 3308                   !word $0833
  6205                          
  6206                          ZEH
  6207  a83a 0801                   !byte SUBRF,     1
  6208  a83c 0000                   !word     0
  6209  a83e 3608                   !word $0836
  6210                          
  6211                          ZEI
  6212  a840 0801                   !byte SUBRF,     1
  6213  a842 0000                   !word     0
  6214  a844 3908                   !word $0839
  6215                          
  6216                          ZEJ
  6217  a846 0801                   !byte SUBRF,     1
  6218  a848 0000                   !word     0
  6219  a84a 3c08                   !word $083c
  6220                          
  6221                          ZEK
  6222  a84c 0801                   !byte SUBRF,     1
  6223  a84e 0000                   !word     0
  6224  a850 3f08                   !word $083f
  6225                          
  6226                          ZEL
  6227  a852 0801                   !byte SUBRF,     1
  6228  a854 0000                   !word     0
  6229  a856 4208                   !word $0842
  6230                          
  6231                          ZEM
  6232  a858 0801                   !byte SUBRF,     1
  6233  a85a 0000                   !word     0
  6234  a85c 4508                   !word $0845
  6235                          
  6236                          ZEN
  6237  a85e 0801                   !byte SUBRF,     1
  6238  a860 0000                   !word     0
  6239  a862 4808                   !word $0848
  6240                          
  6241                          ZEO
  6242  a864 0801                   !byte SUBRF,     1
  6243  a866 0000                   !word     0
  6244  a868 4b08                   !word $084b
  6245                          
  6246                          ZEP
  6247  a86a 0801                   !byte SUBRF,     1
  6248  a86c 0000                   !word     0
  6249  a86e 4e08                   !word $084e
  6250                          
  6251                          ZEQ
  6252  a870 0801                   !byte SUBRF,     1
  6253  a872 0000                   !word     0
  6254  a874 5108                   !word $0851
  6255                          
  6256                          ZER
  6257  a876 0801                   !byte SUBRF,     1
  6258  a878 0000                   !word     0
  6259  a87a 5408                   !word $0854
  6260                          
  6261                          ZES
  6262  a87c 0801                   !byte SUBRF,     1
  6263  a87e 0000                   !word     0
  6264  a880 5708                   !word $0857
  6265                          
  6266                          ZET
  6267  a882 0c00                   !byte FSUBRF,      0
  6268  a884 0000                   !word     0
  6269  a886 5a08                   !word $085a
  6270                          
  6271                          ZEU
  6272  a888 0c00                   !byte FSUBRF,      0
  6273  a88a 0000                   !word     0
  6274  a88c 5d08                   !word $085d
  6275                          
  6276                          ZEV
  6277  a88e 0800                   !byte SUBRF,     0
  6278  a890 0000                   !word     0
  6279  a892 6008                   !word $0860
  6280                          
  6281                          ZEX
  6282  a894 0801                   !byte SUBRF,     1
  6283  a896 0000                   !word     0
  6284  a898 6308                   !word $0863
  6285                          
  6286                          ZEY
  6287  a89a 0801                   !byte SUBRF,     1
  6288  a89c 0000                   !word     0
  6289  a89e 6608                   !word $0866
  6290                          
  6291                          ZEZ
  6292  a8a0 0801                   !byte SUBRF,     1
  6293  a8a2 0000                   !word     0
  6294  a8a4 6908                   !word $0869
  6295                          
  6296                          ZFA
  6297  a8a6 0801                   !byte SUBRF,     1
  6298  a8a8 0000                   !word     0
  6299  a8aa 6c08                   !word $086c
  6300                          
  6301                          ZFC
  6302  a8ac 0801                   !byte SUBRF,     1
  6303  a8ae 0000                   !word     0
  6304  a8b0 6f08                   !word $086f
  6305                          
  6306                          ZFD
  6307  a8b2 0801                   !byte SUBRF,     1
  6308  a8b4 0000                   !word     0
  6309  a8b6 7208                   !word $0872
  6310                          
  6311                          ZFE
  6312  a8b8 0800                   !byte SUBRF,     0
  6313  a8ba 0000                   !word     0
  6314  a8bc 7508                   !word $0875
  6315                          
  6316                          ZFF
  6317  a8be 0802                   !byte SUBRF,     2
  6318  a8c0 0000                   !word     0
  6319  a8c2 7808                   !word $0878
  6320                          
  6321                          ZFG
  6322  a8c4 0801                   !byte SUBRF,     1
  6323  a8c6 0000                   !word     0
  6324  a8c8 7b08                   !word $087b
  6325                          
  6326                          ZFH
  6327  a8ca 0801                   !byte SUBRF,     1
  6328  a8cc 0000                   !word     0
  6329  a8ce 7e08                   !word $087e
  6330                          
  6331                          ZFI
  6332  a8d0 0800                   !byte SUBRF,     0
  6333  a8d2 0000                   !word     0
  6334  a8d4 8108                   !word $0881
  6335                          
  6336                          ZFJ
  6337  a8d6 0802                   !byte SUBRF,     2
  6338  a8d8 0000                   !word     0
  6339  a8da 8408                   !word $0884
  6340                          
  6341                          ZFK
  6342  a8dc 0802                   !byte SUBRF,     2
  6343  a8de 0000                   !word     0
  6344  a8e0 8708                   !word $0887
  6345                          
  6346                          ZFL
  6347  a8e2 0802                   !byte SUBRF,     2
  6348  a8e4 0000                   !word     0
  6349  a8e6 8a08                   !word $088a
  6350                          
  6351                          ZFM
  6352  a8e8 0801                   !byte SUBRF,     1
  6353  a8ea 0000                   !word     0
  6354  a8ec 8d08                   !word $088d
  6355                          
  6356                          ZFN
  6357  a8ee 0801                   !byte SUBRF,     1
  6358  a8f0 0000                   !word     0
  6359  a8f2 9008                   !word $0890
  6360                          
  6361                          ZFQ
  6362  a8f4 0800                   !byte SUBRF,     0
  6363  a8f6 0000                   !word     0
  6364  a8f8 9308                   !word $0893
  6365                          
  6366                          ZFR
  6367  a8fa 0802                   !byte SUBRF,     2
  6368  a8fc 0000                   !word     0
  6369  a8fe 9608                   !word $0896
  6370                          
  6371                          ZFS
  6372  a900 0802                   !byte SUBRF,     2
  6373  a902 0000                   !word     0
  6374  a904 9908                   !word $0899
  6375                          
  6376                          ZFT
  6377  a906 0801                   !byte SUBRF,     1
  6378  a908 0000                   !word     0
  6379  a90a 9c08                   !word $089c
  6380                          
  6381                          ZFU
  6382  a90c 0800                   !byte SUBRF,     0
  6383  a90e 0000                   !word     0
  6384  a910 9f08                   !word $089f
  6385                          
  6386                          ZFV
  6387  a912 0802                   !byte SUBRF,     2
  6388  a914 0000                   !word     0
  6389  a916 a208                   !word $08a2
  6390                          
  6391                          ZFW
  6392  a918 0803                   !byte SUBRF,     3
  6393  a91a 0000                   !word     0
  6394  a91c a508                   !word $08a5
  6395                          
  6396                          ZFX
  6397  a91e 0802                   !byte SUBRF,     2
  6398  a920 0000                   !word     0
  6399  a922 a808                   !word $08a8
  6400                          
  6401                          ZFY
  6402  a924 0802                   !byte SUBRF,     2
  6403  a926 0000                   !word     0
  6404  a928 ab08                   !word $08ab
  6405                          
  6406                          ZFZ
  6407  a92a 0801                   !byte SUBRF,     1
  6408  a92c 0000                   !word     0
  6409  a92e ae08                   !word $08ae
  6410                          
  6411                          ZGA
  6412  a930 0801                   !byte SUBRF,     1
  6413  a932 0000                   !word     0
  6414  a934 b108                   !word $08b1
  6415                          
  6416                          ZGB
  6417  a936 0801                   !byte SUBRF,     1
  6418  a938 0000                   !word     0
  6419  a93a b408                   !word $08b4
  6420                          
  6421                          ZGD
  6422  a93c 0802                   !byte SUBRF,     2
  6423  a93e 0000                   !word     0
  6424  a940 b708                   !word $08b7
  6425                          
  6426                          ZGE
  6427  a942 0c00                   !byte FSUBRF,      0
  6428  a944 0000                   !word     0
  6429  a946 ba08                   !word $08ba
  6430                          
  6431                          ZGF
  6432  a948 0801                   !byte SUBRF,     1
  6433  a94a 0000                   !word     0
  6434  a94c bd08                   !word $08bd
  6435                          
  6436                          ZGG
  6437  a94e 000a                   !byte CHARF,   $0a
  6438  a950 b80c                   !word $0cb8
  6439  a952 0000                   !word     0
  6440  a954 504c5553               !text "PLUS"
  6441                          
  6442                              ; ******************************
  6443                              ; The second LISP image file
  6444                              ; ******************************
  6445                          
  6446  a958 0010                   !byte CHARF,   $10
  6447  a95a be0c                   !word $0cbe
  6448  a95c 0000                   !word     0
  6449  a95e 444946464552454e...    !text "DIFFERENCE"
  6450                          
  6451  a968 000b                   !byte CHARF,   $0b
  6452  a96a c40c                   !word $0cc4
  6453  a96c 0000                   !word     0
  6454  a96e 4d494e5553             !text "MINUS"
  6455                          
  6456  a973 000b                   !byte CHARF,   $0b
  6457  a975 ca0c                   !word $0cca
  6458  a977 0000                   !word     0
  6459  a979 5355425250             !text "SUBRP"
  6460                          
  6461  a97e 000b                   !byte CHARF,   $0b
  6462  a980 d00c                   !word $0cd0
  6463  a982 0000                   !word     0
  6464  a984 54494d4553             !text "TIMES"
  6465                          
  6466  a989 000e                   !byte CHARF,   $0e
  6467  a98b d60c                   !word $0cd6
  6468  a98d 0000                   !word     0
  6469  a98f 51554f5449454e54       !text "QUOTIENT"
  6470                          
  6471  a997 000f                   !byte CHARF,   $0f
  6472  a999 dc0c                   !word $0cdc
  6473  a99b 0000                   !word     0
  6474  a99d 52454d41494e4445...    !text "REMAINDER"
  6475                          
  6476  a9a6 000b                   !byte CHARF,   $0b
  6477  a9a8 e20c                   !word $0ce2
  6478  a9aa 0000                   !word     0
  6479  a9ac 4c45535350             !text "LESSP"
  6480                          
  6481  a9b1 000a                   !byte CHARF,   $0a
  6482  a9b3 e80c                   !word $0ce8
  6483  a9b5 0000                   !word     0
  6484  a9b7 53554231               !text "SUB1"
  6485                          
  6486  a9bb 000a                   !byte CHARF,   $0a
  6487  a9bd ee0c                   !word $0cee
  6488  a9bf 0000                   !word     0
  6489  a9c1 41444431               !text "ADD1"
  6490                          
  6491  a9c5 000d                   !byte CHARF,   $0d
  6492  a9c7 f40c                   !word $0cf4
  6493  a9c9 0000                   !word     0
  6494  a9cb 5245434c41494d         !text "RECLAIM"
  6495                          
  6496  a9d2 000c                   !byte CHARF,   $0c
  6497  a9d4 fa0c                   !word $0cfa
  6498  a9d6 0000                   !word     0
  6499  a9d8 52504c414341           !text "RPLACA"
  6500                          
  6501  a9de 000c                   !byte CHARF,   $0c
  6502  a9e0 000d                   !word $0d00
  6503  a9e2 0000                   !word     0
  6504  a9e4 52504c414344           !text "RPLACD"
  6505                          
  6506  a9ea 000b                   !byte CHARF,   $0b
  6507  a9ec 060d                   !word $0d06
  6508  a9ee 0000                   !word     0
  6509  a9f0 4348415253             !text "CHARS"
  6510                          
  6511  a9f5 000c                   !byte CHARF,   $0c
  6512  a9f7 5a0e                   !word $0e5a
  6513  a9f9 0000                   !word     0
  6514  a9fb 444f4c4c4152           !text "DOLLAR"
  6515                          
  6516  aa01 0008                   !byte CHARF,     8
  6517  aa03 610e                   !word $0e61
  6518  aa05 0000                   !word     0
  6519  aa07 4352                   !text "CR"
  6520                          
  6521  aa09 000c                   !byte CHARF,   $0c
  6522  aa0b 0c0d                   !word $0d0c
  6523  aa0d 0000                   !word     0
  6524  aa0f 4d4553534f4e           !text "MESSON"
  6525                          
  6526  aa15 000d                   !byte CHARF,   $0d
  6527  aa17 5410                   !word $1054
  6528  aa19 0000                   !word     0
  6529  aa1b 4d4553534f4646         !text "MESSOFF"
  6530                          
  6531  aa22 0009                   !byte CHARF,     9
  6532  aa24 120d                   !word $0d12
  6533  aa26 0000                   !word     0
  6534  aa28 474554                 !text "GET"
  6535                          
  6536  aa2b 0009                   !byte CHARF,     9
  6537  aa2d 180d                   !word $0d18
  6538  aa2f 0000                   !word     0
  6539  aa31 505554                 !text "PUT"
  6540                          
  6541  aa34 000d                   !byte CHARF,   $0d
  6542  aa36 1e0d                   !word $0d1e
  6543  aa38 0000                   !word     0
  6544  aa3a 52454d50524f50         !text "REMPROP"
  6545                          
  6546  aa41 000e                   !byte CHARF,   $0e
  6547  aa43 240d                   !word $0d24
  6548  aa45 0000                   !word     0
  6549  aa47 4752454154455250       !text "GREATERP"
  6550                          
  6551  aa4f 000b                   !byte CHARF,   $0b
  6552  aa51 2a0d                   !word $0d2a
  6553  aa53 0000                   !word     0
  6554  aa55 504c495354             !text "PLIST"
  6555                          
  6556  aa5a 0007                   !byte CHARF,     7
  6557  aa5c 5a0e                   !word $0e5a
  6558  aa5e 0000                   !word     0
  6559  aa60 24                     !text "$"
  6560                          
  6561  aa61 0007                   !byte CHARF,     7
  6562  aa63 610e                   !word $0e61
  6563  aa65 0000                   !word     0
  6564  aa67 0d                     !byte $0d
  6565                          
  6566  aa68 000b                   !byte CHARF,   $0b
  6567  aa6a 300d                   !word $0d30
  6568  aa6c 0000                   !word     0
  6569  aa6e 4348415250             !text "CHARP"
  6570                          
  6571  aa73 000b                   !byte CHARF,   $0b
  6572  aa75 360d                   !word $0d36
  6573  aa77 0000                   !word     0
  6574  aa79 4c49535450             !text "LISTP"
  6575                          
  6576  aa7e 000b                   !byte CHARF,   $0b
  6577  aa80 3c0d                   !word $0d3c
  6578  aa82 0000                   !word     0
  6579  aa84 4153534f43             !text "ASSOC"
  6580                          
  6581  aa89 0007                   !byte CHARF,     7
  6582  aa8b 4e10                   !word $104e
  6583  aa8d 0000                   !word     0
  6584  aa8f 2a                     !text "*"
  6585                          
  6586  aa90 000a                   !byte CHARF,   $0a
  6587  aa92 bb0e                   !word $0ebb
  6588  aa94 0000                   !word     0
  6589  aa96 4c504152               !text "LPAR"
  6590                          
  6591  aa9a 000b                   !byte CHARF,   $0b
  6592  aa9c c20e                   !word $0ec2
  6593  aa9e 0000                   !word     0
  6594  aaa0 424c414e4b             !text "BLANK"
  6595                          
  6596  aaa5 000a                   !byte CHARF,   $0a
  6597  aaa7 c90e                   !word $0ec9
  6598  aaa9 0000                   !word     0
  6599  aaab 52504152               !text "RPAR"
  6600                          
  6601  aaaf 000c                   !byte CHARF,   $0c
  6602  aab1 d00e                   !word $0ed0
  6603  aab3 0000                   !word     0
  6604  aab5 504552494f44           !text "PERIOD"
  6605                          
  6606  aabb 0007                   !byte CHARF,     7
  6607  aabd bb0e                   !word $0ebb
  6608  aabf 0000                   !word     0
  6609  aac1 28                     !text "("
  6610                          
  6611  aac2 0007                   !byte CHARF,     7
  6612  aac4 c20e                   !word $0ec2
  6613  aac6 0000                   !word     0
  6614  aac8 20                     !text " "
  6615                          
  6616  aac9 0007                   !byte CHARF,     7
  6617  aacb c90e                   !word $0ec9
  6618  aacd 0000                   !word     0
  6619  aacf 29                     !text ")"
  6620                          
  6621  aad0 0007                   !byte CHARF,     7
  6622  aad2 d00e                   !word $0ed0
  6623  aad4 0000                   !word     0
  6624  aad6 2e                     !text "."
  6625                          
  6626  aad7 000b                   !byte CHARF,   $0b
  6627  aad9 420d                   !word $0d42
  6628  aadb 0000                   !word     0
  6629  aadd 554e54494c             !text "UNTIL"
  6630                          
  6631  aae2 000c                   !byte CHARF,   $0c
  6632  aae4 480d                   !word $0d48
  6633  aae6 0000                   !word     0
  6634  aae8 465355425250           !text "FSUBRP"
  6635                          
  6636  aaee 0010                   !byte CHARF,   $10
  6637  aaf0 fa0f                   !word $0ffa
  6638  aaf2 0000                   !word     0
  6639  aaf4 4552524f52434f55...    !text "ERRORCOUNT"
  6640                          
  6641  aafe 000e                   !byte CHARF,   $0e
  6642  ab00 0010                   !word $1000
  6643  ab02 0000                   !word     0
  6644  ab04 4552524f52534554       !text "ERRORSET"
  6645                          
  6646  ab0c 000a                   !byte CHARF,   $0a
  6647  ab0e 0610                   !word $1006
  6648  ab10 0000                   !word     0
  6649  ab12 43414c4c               !text "CALL"
  6650                          
  6651  ab16 000a                   !byte CHARF,   $0a
  6652  ab18 0c10                   !word $100c
  6653  ab1a 0000                   !word     0
  6654  ab1c 5045454b               !text "PEEK"
  6655                          
  6656  ab20 000a                   !byte CHARF,   $0a
  6657  ab22 1210                   !word $1012
  6658  ab24 0000                   !word     0
  6659  ab26 504f4b45               !text "POKE"
  6660                          
  6661  ab2a 000c                   !byte CHARF,   $0c
  6662  ab2c 1810                   !word $1018
  6663  ab2e 0000                   !word     0
  6664  ab30 4f424c495354           !text "OBLIST"
  6665                          
  6666  ab36 000b                   !byte CHARF,   $0b
  6667  ab38 1e10                   !word $101e
  6668  ab3a 0000                   !word     0
  6669  ab3c 4150504c59             !text "APPLY"
  6670                          
  6671  ab41 000a                   !byte CHARF,   $0a
  6672  ab43 2410                   !word $1024
  6673  ab45 0000                   !word     0
  6674  ab47 4d415043               !text "MAPC"
  6675                          
  6676  ab4b 0009                   !byte CHARF,     9
  6677  ab4d 2a10                   !word $102a
  6678  ab4f 0000                   !word     0
  6679  ab51 4d4150                 !text "MAP"
  6680                          
  6681  ab54 000f                   !byte CHARF,   $0f
  6682  ab56 3010                   !word $1030
  6683  ab58 0000                   !word     0
  6684  ab5a 4348415241435445...    !text "CHARACTER"
  6685                          
  6686  ab63 000d                   !byte CHARF,   $0d
  6687  ab65 3610                   !word $1036
  6688  ab67 0000                   !word     0
  6689  ab69 4f5244494e414c         !text "ORDINAL"
  6690                          
  6691  ab70 000d                   !byte CHARF,   $0d
  6692  ab72 3c10                   !word $103c
  6693  ab74 0000                   !word     0
  6694  ab76 4558504c4f4445         !text "EXPLODE"
  6695                          
  6696  ab7d 000d                   !byte CHARF,   $0d
  6697  ab7f 4210                   !word $1042
  6698  ab81 0000                   !word     0
  6699  ab83 494d504c4f4445         !text "IMPLODE"
  6700                          
  6701  ab8a 000d                   !byte CHARF,   $0d
  6702  ab8c 4810                   !word $1048
  6703  ab8e 0000                   !word     0
  6704  ab90 47455443484152         !text "GETCHAR"                                ; N.B. ZMQ IS USED
  6705                          
  6706  ab97 000e                   !byte CHARF,   $0e
  6707  ab99 5a10                   !word $105a
  6708  ab9b 0000                   !word     0
  6709  ab9d 524541444c494e45       !text "READLINE"
  6710                          
  6711  aba5 000b                   !byte CHARF,   $0b
  6712  aba7 6010                   !word $1060
  6713  aba9 0000                   !word     0
  6714  abab 434c4f5345             !text "CLOSE"
  6715                          
  6716  abb0 000a                   !byte CHARF,   $0a
  6717  abb2 6610                   !word $1066
  6718  abb4 0000                   !word     0
  6719  abb6 4f50454e               !text "OPEN"
  6720                          
  6721  abba 000c                   !byte CHARF,   $0c
  6722  abbc 6c10                   !word $106c
  6723  abbe 0000                   !word     0
  6724  abc0 575249544530           !text "WRITE0"
  6725                          
  6726  abc6 000b                   !byte CHARF,   $0b
  6727  abc8 7210                   !word $1072
  6728  abca 0000                   !word     0
  6729  abcc 5752495445             !text "WRITE"
  6730                          
  6731  abd1 0009                   !byte CHARF,     9
  6732  abd3 7810                   !word $1078
  6733  abd5 0000                   !word     0
  6734  abd7 454f46                 !text "EOF"
  6735                          
  6736  abda 0009                   !byte CHARF,     9
  6737  abdc 7e10                   !word $107e
  6738  abde 0000                   !word     0
  6739  abe0 564455                 !text "VDU"
  6740                          
  6741  abe3 000c                   !byte CHARF,   $0c
  6742  abe5 8410                   !word $1084
  6743  abe7 0000                   !word     0
  6744  abe9 5052494e5443           !text "PRINTC"
  6745                          
  6746  abef 000b                   !byte CHARF,   $0b
  6747  abf1 8a10                   !word $108a
  6748  abf3 0000                   !word     0
  6749  abf5 5052494e43             !text "PRINC"
  6750                          
  6751  abfa 0800                   !byte SUBRF,     0
  6752  abfc 0000                   !word     0
  6753  abfe c008                   !word $08c0
  6754                          
  6755  ac00 0c00                   !byte FSUBRF,      0
  6756  ac02 0000                   !word     0
  6757  ac04 c308                   !word $08c3
  6758                          
  6759  ac06 0801                   !byte SUBRF,     1
  6760  ac08 0000                   !word     0
  6761  ac0a c608                   !word $08c6
  6762                          
  6763  ac0c 0801                   !byte SUBRF,     1
  6764  ac0e 0000                   !word     0
  6765  ac10 c908                   !word $08c9
  6766                          
  6767  ac12 0802                   !byte SUBRF,     2
  6768  ac14 0000                   !word     0
  6769  ac16 cc08                   !word $08cc
  6770                          
  6771  ac18 0800                   !byte SUBRF,     0
  6772  ac1a 0000                   !word     0
  6773  ac1c cf08                   !word $08cf
  6774                          
  6775  ac1e 0802                   !byte SUBRF,     2
  6776  ac20 0000                   !word     0
  6777  ac22 d208                   !word $08d2
  6778                          
  6779  ac24 0802                   !byte SUBRF,     2
  6780  ac26 0000                   !word     0
  6781  ac28 d508                   !word $08d5
  6782                          
  6783  ac2a 0802                   !byte SUBRF,     2
  6784  ac2c 0000                   !word     0
  6785  ac2e d808                   !word $08d8
  6786                          
  6787  ac30 0801                   !byte SUBRF,     1
  6788  ac32 0000                   !word     0
  6789  ac34 db08                   !word $08db
  6790                          
  6791  ac36 0801                   !byte SUBRF,     1
  6792  ac38 0000                   !word     0
  6793  ac3a de08                   !word $08de
  6794                          
  6795  ac3c 0801                   !byte SUBRF,     1
  6796  ac3e 0000                   !word     0
  6797  ac40 e108                   !word $08e1
  6798                          
  6799  ac42 0801                   !byte SUBRF,     1
  6800  ac44 0000                   !word     0
  6801  ac46 e408                   !word $08e4
  6802                          
  6803  ac48 0800                   !byte SUBRF,     0
  6804  ac4a 0000                   !word     0
  6805  ac4c e708                   !word $08e7
  6806                          
  6807  ac4e 0801                   !byte SUBRF,     1
  6808  ac50 0000                   !word     0
  6809  ac52 ea08                   !word $08ea
  6810                          
  6811  ac54 0801                   !byte SUBRF,     1
  6812  ac56 0000                   !word     0
  6813  ac58 ed08                   !word $08ed
  6814                          
  6815  ac5a 0800                   !byte SUBRF,     0
  6816  ac5c 0000                   !word     0
  6817  ac5e f008                   !word $08f0
  6818                          
  6819  ac60 0801                   !byte SUBRF,     1
  6820  ac62 0000                   !word     0
  6821  ac64 f308                   !word $08f3
  6822                          
  6823  ac66 0802                   !byte SUBRF,     2
  6824  ac68 0000                   !word     0
  6825  ac6a f608                   !word $08f6
  6826                          
  6827  ac6c 0801                   !byte SUBRF,     1
  6828  ac6e 0000                   !word     0
  6829  ac70 f908                   !word $08f9
  6830                          
  6831  ac72 0801                   !byte SUBRF,     1
  6832  ac74 0000                   !word     0
  6833  ac76 fc08                   !word $08fc
  6834                          
  6835  ac78 0801                   !byte SUBRF,     1
  6836  ac7a 0000                   !word     0
  6837  ac7c ff08                   !word $08ff
  6838                          
  6839  ac7e 0800                   !byte SUBRF,     0
  6840  ac80 0000                   !word     0
  6841  ac82 0209                   !word $0902
  6842                          
  6843  ac84 0800                   !byte SUBRF,     0
  6844  ac86 0000                   !word     0
  6845  ac88 0509                   !word $0905
  6846                          
  6847  ac8a 0800                   !byte SUBRF,     0
  6848  ac8c 0000                   !word     0
  6849  ac8e 0809                   !word $0908
  6850                          
  6851  ac90 000a                   !byte CHARF,   $0a
  6852  ac92 3211                   !word $1132
  6853  ac94 0000                   !word     0
  6854  ac96 4d4f4445               !text "MODE"
  6855                          
  6856                              ; ******************************
  6857                              ; Routines new to version 2
  6858                              ; ******************************
  6859                          
  6860  ac9a 0009                   !byte CHARF,     9
  6861  ac9c 3811                   !word $1138
  6862  ac9e 0000                   !word     0
  6863  aca0 555352                 !text "USR"
  6864                          
  6865  aca3 000b                   !byte CHARF,   $0b
  6866  aca5 3e11                   !word $113e
  6867  aca7 0000                   !word     0
  6868  aca9 534f554e44             !text "SOUND"
  6869                          
  6870  acae 000e                   !byte CHARF,   $0e
  6871  acb0 4411                   !word $1144
  6872  acb2 0000                   !word     0
  6873  acb4 454e56454c4f5045       !text "ENVELOPE"
  6874                          
  6875  acbc 000c                   !byte CHARF,   $0c
  6876  acbe 4a11                   !word $114a
  6877  acc0 0000                   !word     0
  6878  acc2 474354494d45           !text "GCTIME"
  6879                          
  6880  acc8 000a                   !byte CHARF,   $0a
  6881  acca 5011                   !word $1150
  6882  accc 0000                   !word     0
  6883  acce 54494d45               !text "TIME"
  6884                          
  6885  acd2 000b                   !byte CHARF,   $0b
  6886  acd4 5611                   !word $1156
  6887  acd6 0000                   !word     0
  6888  acd8 5245534554             !text "RESET"
  6889                          
  6890  acdd 000b                   !byte CHARF,   $0b
  6891  acdf 5c11                   !word $115c
  6892  ace1 0000                   !word     0
  6893  ace3 504f494e54             !text "POINT"
  6894                          
  6895  ace8 000b                   !byte CHARF,   $0b
  6896  acea 6211                   !word $1162
  6897  acec 0000                   !word     0
  6898  acee 414456414c             !text "ADVAL"
  6899                          
  6900  acf3 000b                   !byte CHARF,   $0b
  6901  acf5 6811                   !word $1168
  6902  acf7 0000                   !word     0
  6903  acf9 434c4f434b             !text "CLOCK"
  6904                          
  6905  acfe 000a                   !byte CHARF,   $0a
  6906  ad00 6e11                   !word $116e
  6907  ad02 0000                   !word     0
  6908  ad04 424e4f54               !text "BNOT"
  6909                          
  6910  ad08 000a                   !byte CHARF,   $0a
  6911  ad0a 7411                   !word $1174
  6912  ad0c 0000                   !word     0
  6913  ad0e 42414e44               !text "BAND"
  6914                          
  6915  ad12 0009                   !byte CHARF,     9
  6916  ad14 7a11                   !word $117a
  6917  ad16 0000                   !word     0
  6918  ad18 424f52                 !text "BOR"
  6919                          
  6920  ad1b 000b                   !byte CHARF,   $0b
  6921  ad1d 8011                   !word $1180
  6922  ad1f 0000                   !word     0
  6923  ad21 494e4b4559             !text "INKEY"
  6924                          
  6925  ad26 000c                   !byte CHARF,   $0c
  6926  ad28 8611                   !word $1186
  6927  ad2a 0000                   !word     0
  6928  ad2c 47454e53594d           !text "GENSYM"
  6929                          
  6930  ad32 0801                   !byte SUBRF,     1
  6931  ad34 0000                   !word     0
  6932  ad36 0b09                   !word $090b
  6933                          
  6934  ad38 0805                   !byte SUBRF,     5
  6935  ad3a 0000                   !word     0
  6936  ad3c 0e09                   !word $090e
  6937                          
  6938  ad3e 0804                   !byte SUBRF,     4
  6939  ad40 0000                   !word     0
  6940  ad42 1109                   !word $0911
  6941                          
  6942  ad44 080e                   !byte SUBRF,   $0e
  6943  ad46 0000                   !word     0
  6944  ad48 1409                   !word $0914
  6945                          
  6946  ad4a 0800                   !byte SUBRF,     0
  6947  ad4c 0000                   !word     0
  6948  ad4e 1709                   !word $0917
  6949                          
  6950  ad50 0800                   !byte SUBRF,     0
  6951  ad52 0000                   !word     0
  6952  ad54 1a09                   !word $091a
  6953                          
  6954  ad56 0800                   !byte SUBRF,     0
  6955  ad58 0000                   !word     0
  6956  ad5a 1d09                   !word $091d
  6957                          
  6958  ad5c 0802                   !byte SUBRF,     2
  6959  ad5e 0000                   !word     0
  6960  ad60 2309                   !word $0923
  6961                          
  6962  ad62 0801                   !byte SUBRF,     1
  6963  ad64 0000                   !word     0
  6964  ad66 2609                   !word $0926
  6965                          
  6966  ad68 0800                   !byte SUBRF,     0
  6967  ad6a 0000                   !word     0
  6968  ad6c 2009                   !word $0920
  6969                          
  6970  ad6e 0801                   !byte SUBRF,     1
  6971  ad70 0000                   !word     0
  6972  ad72 2909                   !word $0929
  6973                          
  6974  ad74 0800                   !byte SUBRF,     0
  6975  ad76 0000                   !word     0
  6976  ad78 2c09                   !word $092c
  6977                          
  6978  ad7a 0800                   !byte SUBRF,     0
  6979  ad7c 0000                   !word     0
  6980  ad7e 2f09                   !word $092f
  6981                          
  6982  ad80 0801                   !byte SUBRF,     1
  6983  ad82 0000                   !word     0
  6984  ad84 3209                   !word $0932
  6985                          
  6986  ad86 0800                   !byte SUBRF,     0
  6987  ad88 0000                   !word     0
  6988  ad8a 3509                   !word $0935
  6989                          
  6990  ad8c 000d                   !byte CHARF,   $0d
  6991  ad8e 9911                   !word $1199
  6992  ad90 2c00                   !word   $2c
  6993  ad92 56455253494f4e         !text "VERSION"
  6994  ad99 04040400               !byte 4, 4, 4, 0
  6995                          
  6996  ad9d 000f                   !byte CHARF,   $0f
  6997  ad9f ac11                   !word $11ac
  6998  ada1 e300                   !word   $e3
  6999  ada3 4c494e4557494454...    !text "LINEWIDTH"
  7000                          
  7001  adac 0404                   !byte NUMF,    4
  7002  adae 1f00                   !word   $1f
  7003  adb0 000b                   !word $0b00
  7004  adb2 bb118000               !byte $bb, $11, $80,   0
  7005  adb6 444546554e             !text "DEFUN"
  7006                          
  7007  adbb 8018                   !byte LISTF,   $18
  7008  adbd 0ac7                   !word $c70a
  7009  adbf 1100                   !word   $11
  7010  adc1 07020aff0058           !byte   7,   2, $0a, $ff,   0, $58
  7011                          
  7012  adc7 80c0                   !byte LISTF,   $c0
  7013  adc9 1108                   !word $0811
  7014  adcb 1280                   !word $8012
  7015  adcd 7c                     !text "|"
  7016  adce 0adb1180610ad611       !byte $0a, $db, $11, $80, $61, $0a, $d6, $11
  7017  add6 80c011140080d111       !byte $80, $c0, $11, $14,   0, $80, $d1, $11
  7018  adde 0312804d0aef1180       !byte   3, $12, $80, $4d, $0a, $ef, $11, $80
  7019  ade6 2d0aea1180180a02       !byte $2d, $0a, $ea, $11, $80, $18, $0a,   2
  7020  adee 0080e511fe118099       !byte   0, $80, $e5, $11, $fe, $11, $80, $99
  7021  adf6 0af91180c0118000       !byte $0a, $f9, $11, $80, $c0, $11, $80,   0
  7022  adfe 80f411800080e011       !byte $80, $f4, $11, $80,   0, $80, $e0, $11
  7023  ae06 800080cc11171280       !byte $80,   0, $80, $cc, $11, $17, $12, $80
  7024  ae0e 610a121280c01180       !byte $61, $0a, $12, $12, $80, $c0, $11, $80
  7025  ae16 00800d128000           !byte   0, $80, $0d, $12, $80,   0
  7026                          
  7027  ae1c 000f                   !byte CHARF,   $0f
  7028  ae1e 8213                   !word $1382
  7029  ae20 6f00                   !word   $6f
  7030  ae22 43484152434f554e...    !text "CHARCOUNT"
  7031                          
  7032  ae2b 80c0                   !byte LISTF,   $c0
  7033  ae2d 113a                   !word $3a11
  7034  ae2f 1200                   !word   $12
  7035  ae31 0a020a7e00             !byte $0a,   2, $0a, $7e,   0
  7036  ae36 4c454654               !text "LEFT"
  7037                          
  7038  ae3a 8030                   !byte LISTF,   $30
  7039  ae3c 1280                   !word $8012
  7040  ae3e 0080                   !word $8000
  7041  ae40 2b                     !text "+"
  7042  ae41 127d1380ac0aa312       !byte $12, $7d, $13, $80, $ac, $0a, $a3, $12
  7043  ae49 80850a4e1280c011       !byte $80, $85, $0a, $4e, $12, $80, $c0, $11
  7044  ae51 00008049129e1280       !byte   0,   0, $80, $49, $12, $9e, $12, $80
  7045  ae59 ac0a991280410e62       !byte $ac, $0a, $99, $12, $80, $41, $0e, $62
  7046  ae61 12803012711280ea       !byte $12, $80, $30, $12, $71, $12, $80, $ea
  7047  ae69 0d6c1280c011d000       !byte $0d, $6c, $12, $80, $c0, $11, $d0,   0
  7048  ae71 8067120000805d12       !byte $80, $67, $12,   0,   0, $80, $5d, $12
  7049  ae79 941280580d801280       !byte $94, $12, $80, $58, $0d, $80, $12, $80
  7050  ae81 30128f1280ea0d8a       !byte $30, $12, $8f, $12, $80, $ea, $0d, $8a
  7051  ae89 1280c011ff008085       !byte $12, $80, $c0, $11, $ff,   0, $80, $85
  7052  ae91 12ff00807b12ff00       !byte $12, $ff,   0, $80, $7b, $12, $ff,   0
  7053  ae99 8076124d00805812       !byte $80, $76, $12, $4d,   0, $80, $58, $12
  7054  aea1 0200805312781380       !byte   2,   0, $80, $53, $12, $78, $13, $80
  7055  aea9 150b0f1380d70ebc       !byte $15, $0b, $0f, $13, $80, $d7, $0e, $bc
  7056  aeb1 1280850ab71280c0       !byte $12, $80, $85, $0a, $b7, $12, $80, $c0
  7057  aeb9 11480080b2120a13       !byte $11, $48,   0, $80, $b2, $12, $0a, $13
  7058  aec1 801c12c61280c011       !byte $80, $1c, $12, $c6, $12, $80, $c0, $11
  7059  aec9 051380580dd01280       !byte   5, $13, $80, $58, $0d, $d0, $12, $80
  7060  aed1 3012001380ac0ae8       !byte $30, $12,   0, $13, $80, $ac, $0a, $e8
  7061  aed9 1280c011e3120404       !byte $12, $80, $c0, $11, $e3, $12,   4,   4
  7062  aee1 040080df12160080       !byte   4,   0, $80, $df, $12, $16,   0, $80
  7063  aee9 da12fb1280110af6       !byte $da, $12, $fb, $12, $80, $11, $0a, $f6
  7064  aef1 120404feff80f212       !byte $12,   4,   4, $fe, $ff, $80, $f2, $12
  7065  aef9 2c0080ed122d0080       !byte $2c,   0, $80, $ed, $12, $2d,   0, $80
  7066  af01 d512c00080cb125c       !byte $d5, $12, $c0,   0, $80, $cb, $12, $5c
  7067  af09 0080c112520080ad       !byte   0, $80, $c1, $12, $52,   0, $80, $ad
  7068  af11 125013801f0b4b13       !byte $12, $50, $13, $80, $1f, $0b, $4b, $13
  7069  af19 80720a1e13803012       !byte $80, $72, $0a, $1e, $13, $80, $30, $12
  7070  af21 4613801c12321380       !byte $46, $13, $80, $1c, $12, $32, $13, $80
  7071  af29 610a2d1380c0112d       !byte $61, $0a, $2d, $13, $80, $c0, $11, $2d
  7072  af31 00802813411380b1       !byte   0, $80, $28, $13, $41, $13, $80, $b1
  7073  af39 0d3c138030120000       !byte $0d, $3c, $13, $80, $30, $12,   0,   0
  7074  af41 8037130000802313       !byte $80, $37, $13,   0,   0, $80, $23, $13
  7075  af49 1600801913000080       !byte $16,   0, $80, $19, $13,   0,   0, $80
  7076  af51 14136e1380720a5a       !byte $14, $13, $6e, $13, $80, $72, $0a, $5a
  7077  af59 1380c01169138099       !byte $13, $80, $c0, $11, $69, $13, $80, $99
  7078  af61 0a641380c0111400       !byte $0a, $64, $13, $80, $c0, $11, $14,   0
  7079  af69 805f131600805513       !byte $80, $5f, $13, $16,   0, $80, $55, $13
  7080  af71 000080a812160080       !byte   0,   0, $80, $a8, $12, $16,   0, $80
  7081  af79 73130000804412ff       !byte $73, $13,   0,   0, $80, $44, $12, $ff
  7082  af81 0080180a3f12           !byte   0, $80, $18, $0a, $3f, $12
  7083                          
  7084  af87 000a                   !byte CHARF,   $0a
  7085  af89 1b14                   !word $141b
  7086  af8b 1600                   !word   $16
  7087  af8d 45444954               !text "EDIT"
  7088                          
  7089  af91 0007                   !byte CHARF,     7
  7090  af93 020a                   !word $0a02
  7091  af95 1700                   !word   $17
  7092  af97 4c                     !text "L"
  7093                          
  7094  af98 8091                   !byte LISTF,   $91
  7095  af9a 13c7                   !word $c713
  7096  af9c 1300                   !word   $13
  7097  af9e 0c61185800             !byte $0c, $61, $18, $58,   0
  7098  afa3 535052494e54           !text "SPRINT"
  7099  afa9 809d13c21380570a       !byte $80, $9d, $13, $c2, $13, $80, $57, $0a
  7100  afb1 bd1380610ab81380       !byte $bd, $13, $80, $61, $0a, $b8, $13, $80
  7101  afb9 9113160080b3130f       !byte $91, $13, $16,   0, $80, $b3, $13, $0f
  7102  afc1 0080ae13110080a9       !byte   0, $80, $ae, $13, $11,   0, $80, $a9
  7103  afc9 13d11380e30f1700       !byte $13, $d1, $13, $80, $e3, $0f, $17,   0
  7104  afd1 80cc131614807c0a       !byte $80, $cc, $13, $16, $14, $80, $7c, $0a
  7105  afd9 e51380610ae01380       !byte $e5, $13, $80, $61, $0a, $e0, $13, $80
  7106  afe1 9113130080db1311       !byte $91, $13, $13,   0, $80, $db, $13, $11
  7107  afe9 14                     !byte $14
  7108                          
  7109  afea 0009                   !byte CHARF,     9
  7110  afec c216                   !word $16c2
  7111  afee 1a00                   !word   $1a
  7112  aff0 534544                 !text "SED"
  7113                          
  7114  aff3 80ea                   !byte LISTF,   $ea
  7115  aff5 130c                   !word $0c13
  7116  aff7 1480                   !word $8014
  7117  aff9 57                     !text "W"
  7118  affa 0a071480610a0214       !byte $0a,   7, $14, $80, $61, $0a,   2, $14
  7119  b002 809113cc0080fd13       !byte $80, $91, $13, $cc,   0, $80, $fd, $13
  7120  b00a 4e0080f813cc0080       !byte $4e,   0, $80, $f8, $13, $cc,   0, $80
  7121  b012 f313040080d61317       !byte $f3, $13,   4,   0, $80, $d6, $13, $17
  7122  b01a 0080180a98130007       !byte   0, $80, $18, $0a, $98, $13,   0,   7
  7123  b022 020a990041802014       !byte   2, $0a, $99,   0, $41, $80, $20, $14
  7124  b02a 38140007020a8000       !byte $38, $14,   0,   7,   2, $0a, $80,   0
  7125  b032 51802c149e008033       !byte $51, $80, $2c, $14, $9e,   0, $80, $33
  7126  b03a 149400802714bd16       !byte $14, $94,   0, $80, $27, $14, $bd, $16
  7127  b042 80150b651480720a       !byte $80, $15, $0b, $65, $14, $80, $72, $0a
  7128  b04a 4c14802c14601480       !byte $4c, $14, $80, $2c, $14, $60, $14, $80
  7129  b052 ef0f5b14808a0fc1       !byte $ef, $0f, $5b, $14, $80, $8a, $0f, $c1
  7130  b05a 00805614b7008051       !byte   0, $80, $56, $14, $b7,   0, $80, $51
  7131  b062 14ef008047149914       !byte $14, $ef,   0, $80, $47, $14, $99, $14
  7132  b06a 80d70e8f14806a0a       !byte $80, $d7, $0e, $8f, $14, $80, $6a, $0a
  7133  b072 7414802c148a1480       !byte $74, $14, $80, $2c, $14, $8a, $14, $80
  7134  b07a 2d0a85140007020a       !byte $2d, $0a, $85, $14,   0,   7,   2, $0a
  7135  b082 0e0042807e14fd00       !byte $0e,   0, $42, $80, $7e, $14, $fd,   0
  7136  b08a 807914e300806f14       !byte $80, $79, $14, $e3,   0, $80, $6f, $14
  7137  b092 94148020140c0080       !byte $94, $14, $80, $20, $14, $0c,   0, $80
  7138  b09a 6a14b81680720aa3       !byte $6a, $14, $b8, $16, $80, $72, $0a, $a3
  7139  b0a2 14802014b31680ac       !byte $14, $80, $20, $14, $b3, $16, $80, $ac
  7140  b0aa 0ae614806a0ab214       !byte $0a, $e6, $14, $80, $6a, $0a, $b2, $14
  7141  b0b2 802c14c814802d0a       !byte $80, $2c, $14, $c8, $14, $80, $2d, $0a
  7142  b0ba c3140007020a1800       !byte $c3, $14,   0,   7,   2, $0a, $18,   0
  7143  b0c2 5280bc14800080b7       !byte $52, $80, $bc, $14, $80,   0, $80, $b7
  7144  b0ca 14800080ad14d714       !byte $14, $80,   0, $80, $ad, $14, $d7, $14
  7145  b0d2 80e30f800080d214       !byte $80, $e3, $0f, $80,   0, $80, $d2, $14
  7146  b0da e114808f0a800080       !byte $e1, $14, $80, $8f, $0a, $80,   0, $80
  7147  b0e2 dc14800080cd141d       !byte $dc, $14, $80,   0, $80, $cd, $14, $1d
  7148  b0ea 15806a0af014802c       !byte $15, $80, $6a, $0a, $f0, $14, $80, $2c
  7149  b0f2 14f51480010e0000       !byte $14, $f5, $14, $80,   1, $0e,   0,   0
  7150  b0fa 80eb140915809d13       !byte $80, $eb, $14,   9, $15, $80, $9d, $13
  7151  b102 0415802014800080       !byte   4, $15, $80, $20, $14, $80,   0, $80
  7152  b10a ff14131580e30fbc       !byte $ff, $14, $13, $15, $80, $e3, $0f, $bc
  7153  b112 00800e1518158020       !byte   0, $80, $0e, $15, $18, $15, $80, $20
  7154  b11a 14b20080fa146a15       !byte $14, $b2,   0, $80, $fa, $14, $6a, $15
  7155  b122 806a0a2715802c14       !byte $80, $6a, $0a, $27, $15, $80, $2c, $14
  7156  b12a 3d15802d0a381500       !byte $3d, $15, $80, $2d, $0a, $38, $15,   0
  7157  b132 07020a8000438031       !byte   7,   2, $0a, $80,   0, $43, $80, $31
  7158  b13a 159a00802c159000       !byte $15, $9a,   0, $80, $2c, $15, $90,   0
  7159  b142 8022154c1580e30f       !byte $80, $22, $15, $4c, $15, $80, $e3, $0f
  7160  b14a 8600804715651580       !byte $86,   0, $80, $47, $15, $65, $15, $80
  7161  b152 4d0a5b15808f0ac1       !byte $4d, $0a, $5b, $15, $80, $8f, $0a, $c1
  7162  b15a 0080561560158020       !byte   0, $80, $56, $15, $60, $15, $80, $20
  7163  b162 1418008051150e00       !byte $14, $18,   0, $80, $51, $15, $0e,   0
  7164  b16a 8042159c1580850a       !byte $80, $42, $15, $9c, $15, $80, $85, $0a
  7165  b172 7415802014800080       !byte $74, $15, $80, $20, $14, $80,   0, $80
  7166  b17a 6f15921580ef0f8d       !byte $6f, $15, $92, $15, $80, $ef, $0f, $8d
  7167  b182 15802d0a88158089       !byte $15, $80, $2d, $0a, $88, $15, $80, $89
  7168  b18a 0e00008083150000       !byte $0e,   0,   0, $80, $83, $15,   0,   0
  7169  b192 807e159715802014       !byte $80, $7e, $15, $97, $15, $80, $20, $14
  7170  b19a 0a00807915f81580       !byte $0a,   0, $80, $79, $15, $f8, $15, $80
  7171  b1a2 6a0aa615802c14bc       !byte $6a, $0a, $a6, $15, $80, $2c, $14, $bc
  7172  b1aa 15802d0ab7150007       !byte $15, $80, $2d, $0a, $b7, $15,   0,   7
  7173  b1b2 020a4f004480b015       !byte   2, $0a, $4f,   0, $44, $80, $b0, $15
  7174  b1ba 100080ab154c0080       !byte $10,   0, $80, $ab, $15, $4c,   0, $80
  7175  b1c2 a115f315804d0ad5       !byte $a1, $15, $f3, $15, $80, $4d, $0a, $d5
  7176  b1ca 1580610ad0158020       !byte $15, $80, $61, $0a, $d0, $15, $80, $20
  7177  b1d2 14000080cb15ee15       !byte $14,   0,   0, $80, $cb, $15, $ee, $15
  7178  b1da 80ea13e91580990a       !byte $80, $ea, $13, $e9, $15, $80, $99, $0a
  7179  b1e2 e415802014430080       !byte $e4, $15, $80, $20, $14, $43,   0, $80
  7180  b1ea df15430080da150d       !byte $df, $15, $43,   0, $80, $da, $15, $0d
  7181  b1f2 0080c6154f0080c1       !byte   0, $80, $c6, $15, $4f,   0, $80, $c1
  7182  b1fa 154d16806a0a0216       !byte $15, $4d, $16, $80, $6a, $0a,   2, $16
  7183  b202 802c141116802d0a       !byte $80, $2c, $14, $11, $16, $80, $2d, $0a
  7184  b20a 0c16802014000080       !byte $0c, $16, $80, $20, $14,   0,   0, $80
  7185  b212 07164f0080fd1548       !byte   7, $16, $4f,   0, $80, $fd, $15, $48
  7186  b21a 16804d0a341680ea       !byte $16, $80, $4d, $0a, $34, $16, $80, $ea
  7187  b222 132f1680610a2a16       !byte $13, $2f, $16, $80, $61, $0a, $2a, $16
  7188  b22a 8020144400802516       !byte $80, $20, $14, $44,   0, $80, $25, $16
  7189  b232 0000802016431680       !byte   0,   0, $80, $20, $16, $43, $16, $80
  7190  b23a 990a3e1680201400       !byte $99, $0a, $3e, $16, $80, $20, $14,   0
  7191  b242 008039164e00801b       !byte   0, $80, $39, $16, $4e,   0, $80, $1b
  7192  b24a 1600008016167f16       !byte $16,   0,   0, $80, $16, $16, $7f, $16
  7193  b252 806a0a5716802c14       !byte $80, $6a, $0a, $57, $16, $80, $2c, $14
  7194  b25a 6616802d0a611680       !byte $66, $16, $80, $2d, $0a, $61, $16, $80
  7195  b262 c0114500805c167e       !byte $c0, $11, $45,   0, $80, $5c, $16, $7e
  7196  b26a 008052167a168099       !byte   0, $80, $52, $16, $7a, $16, $80, $99
  7197  b272 0a75168020144900       !byte $0a, $75, $16, $80, $20, $14, $49,   0
  7198  b27a 8070160b00806b16       !byte $80, $70, $16, $0b,   0, $80, $6b, $16
  7199  b282 ae1680110aa41680       !byte $ae, $16, $80, $11, $0a, $a4, $16, $80
  7200  b28a ef0f9f16802d0a9a       !byte $ef, $0f, $9f, $16, $80, $2d, $0a, $9a
  7201  b292 160007020a00003f       !byte $16,   0,   7,   2, $0a,   0,   0, $3f
  7202  b29a 8093160000808e16       !byte $80, $93, $16,   0,   0, $80, $8e, $16
  7203  b2a2 0000808916a91680       !byte   0,   0, $80, $89, $16, $a9, $16, $80
  7204  b2aa 2014000080841600       !byte $20, $14,   0,   0, $80, $84, $16,   0
  7205  b2b2 0080a8140000809e       !byte   0, $80, $a8, $14,   0,   0, $80, $9e
  7206  b2ba 1400008042140000       !byte $14,   0,   0, $80, $42, $14,   0,   0
  7207  b2c2 80180a3d1480c011       !byte $80, $18, $0a, $3d, $14, $80, $c0, $11
  7208  b2ca dc160007020a0000       !byte $dc, $16,   0,   7,   2, $0a,   0,   0
  7209  b2d2 4e80cc16d8160404       !byte $4e, $80, $cc, $16, $d8, $16,   4,   4
  7210  b2da 000080d316000080       !byte   0,   0, $80, $d3, $16,   0,   0, $80
  7211  b2e2 c7165c1880ac0a36       !byte $c7, $16, $5c, $18, $80, $ac, $0a, $36
  7212  b2ea 1780bd0bfa168085       !byte $17, $80, $bd, $0b, $fa, $16, $80, $85
  7213  b2f2 0af51680c0110000       !byte $0a, $f5, $16, $80, $c0, $11,   0,   0
  7214  b2fa 80f0161d17801c12       !byte $80, $f0, $16, $1d, $17, $80, $1c, $12
  7215  b302 041780c011181780       !byte   4, $17, $80, $c0, $11, $18, $17, $80
  7216  b30a 580d0e17809d1113       !byte $58, $0d, $0e, $17, $80, $9d, $11, $13
  7217  b312 1780cc1600008009       !byte $17, $80, $cc, $16,   0,   0, $80,   9
  7218  b31a 17000080ff160000       !byte $17,   0,   0, $80, $ff, $16,   0,   0
  7219  b322 80eb16311780ef0f       !byte $80, $eb, $16, $31, $17, $80, $ef, $0f
  7220  b32a 2c1780c011000080       !byte $2c, $17, $80, $c0, $11,   0,   0, $80
  7221  b332 2717000080221757       !byte $27, $17,   0,   0, $80, $22, $17, $57
  7222  b33a 1880ef0f40178090       !byte $18, $80, $ef, $0f, $40, $17, $80, $90
  7223  b342 0e0000803b176317       !byte $0e,   0,   0, $80, $3b, $17, $63, $17
  7224  b34a 809d13591780610a       !byte $80, $9d, $13, $59, $17, $80, $61, $0a
  7225  b352 541780c011000080       !byte $54, $17, $80, $c0, $11,   0,   0, $80
  7226  b35a 4f175e1780cc1600       !byte $4f, $17, $5e, $17, $80, $cc, $16,   0
  7227  b362 00804a178a178072       !byte   0, $80, $4a, $17, $8a, $17, $80, $72
  7228  b36a 0a6d1780cc168517       !byte $0a, $6d, $17, $80, $cc, $16, $85, $17
  7229  b372 804e0d771780cc16       !byte $80, $4e, $0d, $77, $17, $80, $cc, $16
  7230  b37a 801704040300807c       !byte $80, $17,   4,   4,   3,   0, $80, $7c
  7231  b382 1700008072170000       !byte $17,   0,   0, $80, $72, $17,   0,   0
  7232  b38a 806817521880150b       !byte $80, $68, $17, $52, $18, $80, $15, $0b
  7233  b392 ad1780720a991780       !byte $ad, $17, $80, $72, $0a, $99, $17, $80
  7234  b39a c011a81780990aa3       !byte $c0, $11, $a8, $17, $80, $99, $0a, $a3
  7235  b3a2 1780c0110000809e       !byte $17, $80, $c0, $11,   0,   0, $80, $9e
  7236  b3aa 170000809417ee17       !byte $17,   0,   0, $80, $94, $17, $ee, $17
  7237  b3b2 80ac0ae91780b40b       !byte $80, $ac, $0a, $e9, $17, $80, $b4, $0b
  7238  b3ba bc1780c011cb1780       !byte $bc, $17, $80, $c0, $11, $cb, $17, $80
  7239  b3c2 850ac61780c01100       !byte $85, $0a, $c6, $17, $80, $c0, $11,   0
  7240  b3ca 0080c117000080b7       !byte   0, $80, $c1, $17,   0,   0, $80, $b7
  7241  b3d2 17e41780ef0fda17       !byte $17, $e4, $17, $80, $ef, $0f, $da, $17
  7242  b3da 80af0edf1780c011       !byte $80, $af, $0e, $df, $17, $80, $c0, $11
  7243  b3e2 000080d517000080       !byte   0,   0, $80, $d5, $17,   0,   0, $80
  7244  b3ea d017000080b21716       !byte $d0, $17,   0,   0, $80, $b2, $17, $16
  7245  b3f2 1880d70e02188085       !byte $18, $80, $d7, $0e,   2, $18, $80, $85
  7246  b3fa 0afd1780c0110000       !byte $0a, $fd, $17, $80, $c0, $11,   0,   0
  7247  b402 80f817111880ef0f       !byte $80, $f8, $17, $11, $18, $80, $ef, $0f
  7248  b40a 0c1880a50e000080       !byte $0c, $18, $80, $a5, $0e,   0,   0, $80
  7249  b412 0718000080f3172f       !byte   7, $18,   0,   0, $80, $f3, $17, $2f
  7250  b41a 18                     !byte $18
  7251                          
  7252  b41b 000a                   !byte CHARF,   $0a
  7253  b41d d518                   !word $18d5
  7254  b41f 0000                   !word     0
  7255  b421 58544142               !text "XTAB"
  7256                          
  7257  b425 801b                   !byte LISTF,   $1b
  7258  b427 182a                   !word $2a18
  7259  b429 1880                   !word $8018
  7260  b42b cc1600008025184d       !byte $cc, $16,   0,   0, $80, $25, $18, $4d
  7261  b433 18809d1343188061       !byte $18, $80, $9d, $13, $43, $18, $80, $61
  7262  b43b 0a3e1880c0110000       !byte $0a, $3e, $18, $80, $c0, $11,   0,   0
  7263  b443 803918481880cc16       !byte $80, $39, $18, $48, $18, $80, $cc, $16
  7264  b44b 0000803418000080       !byte   0,   0, $80, $34, $18,   0,   0, $80
  7265  b453 8f17000080451700       !byte $8f, $17,   0,   0, $80, $45, $17,   0
  7266  b45b 0080e61600008018       !byte   0, $80, $e6, $16,   0,   0, $80, $18
  7267  b463 0ae1160007020a00       !byte $0a, $e1, $16,   0,   7,   2, $0a,   0
  7268  b46b 0053806618000080       !byte   0, $53, $80, $66, $18,   0,   0, $80
  7269  b473 6d187c1880e30f00       !byte $6d, $18, $7c, $18, $80, $e3, $0f,   0
  7270  b47b 00807718d0188015       !byte   0, $80, $77, $18, $d0, $18, $80, $15
  7271  b483 0bbc1880d70eb718       !byte $0b, $bc, $18, $80, $d7, $0e, $b7, $18
  7272  b48b 80fb0bb21880720a       !byte $80, $fb, $0b, $b2, $18, $80, $72, $0a
  7273  b493 9518806618ad1880       !byte $95, $18, $80, $66, $18, $ad, $18, $80
  7274  b49b 580d9f18806618a8       !byte $58, $0d, $9f, $18, $80, $66, $18, $a8
  7275  b4a3 180404010080a418       !byte $18,   4,   4,   1,   0, $80, $a4, $18
  7276  b4ab 0000809a18000080       !byte   0,   0, $80, $9a, $18,   0,   0, $80
  7277  b4b3 90180000808b1800       !byte $90, $18,   0,   0, $80, $8b, $18,   0
  7278  b4bb 00808618cb1880ef       !byte   0, $80, $86, $18, $cb, $18, $80, $ef
  7279  b4c3 0fc618809a0e0000       !byte $0f, $c6, $18, $80, $9a, $0e,   0,   0
  7280  b4cb 80c1180000808118       !byte $80, $c1, $18,   0,   0, $80, $81, $18
  7281  b4d3 000080180a721880       !byte   0,   0, $80, $18, $0a, $72, $18, $80
  7282  b4db 0e0cf418               !byte $0e, $0c, $f4, $18
  7283                          
  7284  b4df 000b                   !byte CHARF,   $0b
  7285  b4e1 020a                   !word $0a02
  7286  b4e3 0000                   !word     0
  7287  b4e5 494d414745             !text "IMAGE"
  7288                          
  7289  b4ea 80df                   !byte LISTF,   $df
  7290  b4ec 1800                   !word   $18
  7291  b4ee 0080                   !word $8000
  7292  b4f0 2d                     !text "-"
  7293  b4f1 0aea1880ef18           !byte $0a, $ea, $18, $80, $ef, $18
  7294                          unused3
  7295  b4f7 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7296  b4ff 0000ffffffffffff       !byte   0,   0, $ff, $ff, $ff, $ff, $ff, $ff
  7297  b507 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7298  b50f ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7299  b517 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7300  b51f ff00000000000000       !byte $ff,   0,   0,   0,   0,   0,   0,   0
  7301  b527 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7302  b52f 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7303  b537 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7304  b53f 00ffffffffffffff       !byte   0, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7305  b547 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7306  b54f ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7307  b557 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7308  b55f ff00000000000000       !byte $ff,   0,   0,   0,   0,   0,   0,   0
  7309  b567 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7310  b56f 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7311  b577 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7312  b57f 0000ffffffffffff       !byte   0,   0, $ff, $ff, $ff, $ff, $ff, $ff
  7313  b587 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7314  b58f ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7315  b597 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7316  b59f ff00000000000000       !byte $ff,   0,   0,   0,   0,   0,   0,   0
  7317  b5a7 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7318  b5af 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7319  b5b7 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7320  b5bf 00ffffffffffffff       !byte   0, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7321  b5c7 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7322  b5cf ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7323  b5d7 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7324  b5df ff00000000000000       !byte $ff,   0,   0,   0,   0,   0,   0,   0
  7325  b5e7 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7326  b5ef 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7327  b5f7 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7328  b5ff 0000ffffffffffff       !byte   0,   0, $ff, $ff, $ff, $ff, $ff, $ff
  7329  b607 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7330  b60f ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7331  b617 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7332  b61f ff00000000000000       !byte $ff,   0,   0,   0,   0,   0,   0,   0
  7333  b627 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7334  b62f 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7335  b637 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7336  b63f 00ffffffffffffff       !byte   0, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7337  b647 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7338  b64f ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7339  b657 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7340  b65f ff00000000000000       !byte $ff,   0,   0,   0,   0,   0,   0,   0
  7341  b667 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7342  b66f 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7343  b677 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7344  b67f 0000ffffffffffff       !byte   0,   0, $ff, $ff, $ff, $ff, $ff, $ff
  7345  b687 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7346  b68f ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7347  b697 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7348  b69f ff00000000000000       !byte $ff,   0,   0,   0,   0,   0,   0,   0
  7349  b6a7 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7350  b6af 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7351  b6b7 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7352  b6bf 00ffffffffffffff       !byte   0, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7353  b6c7 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7354  b6cf ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7355  b6d7 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7356  b6df ff00000000000000       !byte $ff,   0,   0,   0,   0,   0,   0,   0
  7357  b6e7 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7358  b6ef 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7359  b6f7 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7360  b6ff 0000ffffffffffff       !byte   0,   0, $ff, $ff, $ff, $ff, $ff, $ff
  7361  b707 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7362  b70f ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7363  b717 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7364  b71f ff00000000000000       !byte $ff,   0,   0,   0,   0,   0,   0,   0
  7365  b727 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7366  b72f 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7367  b737 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7368  b73f 00ffffffffffffff       !byte   0, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7369  b747 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7370  b74f ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7371  b757 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7372  b75f ff00000000000000       !byte $ff,   0,   0,   0,   0,   0,   0,   0
  7373  b767 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7374  b76f 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7375  b777 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7376  b77f 0000ffffffffffff       !byte   0,   0, $ff, $ff, $ff, $ff, $ff, $ff
  7377  b787 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7378  b78f ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7379  b797 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7380  b79f ff00000000000000       !byte $ff,   0,   0,   0,   0,   0,   0,   0
  7381  b7a7 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7382  b7af 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7383  b7b7 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7384  b7bf 00ffffffffffffff       !byte   0, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7385  b7c7 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7386  b7cf ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7387  b7d7 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7388  b7df ff00000000000000       !byte $ff,   0,   0,   0,   0,   0,   0,   0
  7389  b7e7 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7390  b7ef 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7391  b7f7 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7392  b7ff 00                     !byte   0
  7393                          
  7394                          ; relocation table (entries point to high bytes of addresses)
  7395                          MOVE_OFFSET = HILISP-LISVAL
  7396                          RELTAB
  7397  b800 02d7                   !word MOVE_OFFSET + $8002
  7398  b802 05d7                   !word MOVE_OFFSET + $8005
  7399  b804 50d7                   !word MOVE_OFFSET + $8050
  7400  b806 7bd7                   !word MOVE_OFFSET + $807b
  7401  b808 a3d7                   !word MOVE_OFFSET + $80a3
  7402  b80a a9d7                   !word MOVE_OFFSET + $80a9
  7403  b80c b5d7                   !word MOVE_OFFSET + $80b5
  7404  b80e b8d7                   !word MOVE_OFFSET + $80b8
  7405  b810 c5d7                   !word MOVE_OFFSET + $80c5
  7406  b812 fcd7                   !word MOVE_OFFSET + $80fc
  7407  b814 32d8                   !word MOVE_OFFSET + $8132
  7408  b816 49d8                   !word MOVE_OFFSET + $8149
  7409  b818 84d9                   !word MOVE_OFFSET + $8284
  7410  b81a 91d9                   !word MOVE_OFFSET + $8291
  7411  b81c 94d9                   !word MOVE_OFFSET + $8294
  7412  b81e 9ed9                   !word MOVE_OFFSET + $829e
  7413  b820 b3d9                   !word MOVE_OFFSET + $82b3
  7414  b822 bbd9                   !word MOVE_OFFSET + $82bb
  7415  b824 bed9                   !word MOVE_OFFSET + $82be
  7416  b826 c2d9                   !word MOVE_OFFSET + $82c2
  7417  b828 d8d9                   !word MOVE_OFFSET + $82d8
  7418  b82a ddd9                   !word MOVE_OFFSET + $82dd
  7419  b82c e0d9                   !word MOVE_OFFSET + $82e0
  7420  b82e e3d9                   !word MOVE_OFFSET + $82e3
  7421  b830 e8d9                   !word MOVE_OFFSET + $82e8
  7422  b832 ebd9                   !word MOVE_OFFSET + $82eb
  7423  b834 eed9                   !word MOVE_OFFSET + $82ee
  7424  b836 afda                   !word MOVE_OFFSET + $83af
  7425  b838 02db                   !word MOVE_OFFSET + $8402
  7426  b83a 75db                   !word MOVE_OFFSET + $8475
  7427  b83c bbdb                   !word MOVE_OFFSET + $84bb
  7428  b83e e3db                   !word MOVE_OFFSET + $84e3
  7429  b840 e6db                   !word MOVE_OFFSET + $84e6
  7430  b842 fbdb                   !word MOVE_OFFSET + $84fb
  7431  b844 02dc                   !word MOVE_OFFSET + $8502
  7432  b846 08dc                   !word MOVE_OFFSET + $8508
  7433  b848 38dc                   !word MOVE_OFFSET + $8538
  7434  b84a 3bdc                   !word MOVE_OFFSET + $853b
  7435  b84c 71dc                   !word MOVE_OFFSET + $8571
  7436  b84e 8adc                   !word MOVE_OFFSET + $858a
  7437  b850 8ddc                   !word MOVE_OFFSET + $858d
  7438  b852 90dc                   !word MOVE_OFFSET + $8590
  7439  b854 93dc                   !word MOVE_OFFSET + $8593
  7440  b856 96dc                   !word MOVE_OFFSET + $8596
  7441  b858 c9dc                   !word MOVE_OFFSET + $85c9
  7442  b85a e5dc                   !word MOVE_OFFSET + $85e5
  7443  b85c 36dd                   !word MOVE_OFFSET + $8636
  7444  b85e 9add                   !word MOVE_OFFSET + $869a
  7445  b860 b5dd                   !word MOVE_OFFSET + $86b5
  7446  b862 b8dd                   !word MOVE_OFFSET + $86b8
  7447  b864 c1dd                   !word MOVE_OFFSET + $86c1
  7448  b866 10de                   !word MOVE_OFFSET + $8710
  7449  b868 13de                   !word MOVE_OFFSET + $8713
  7450  b86a 2dde                   !word MOVE_OFFSET + $872d
  7451  b86c 3ade                   !word MOVE_OFFSET + $873a
  7452  b86e 55de                   !word MOVE_OFFSET + $8755
  7453  b870 62de                   !word MOVE_OFFSET + $8762
  7454  b872 6bde                   !word MOVE_OFFSET + $876b
  7455  b874 9cde                   !word MOVE_OFFSET + $879c
  7456  b876 d5de                   !word MOVE_OFFSET + $87d5
  7457  b878 d8de                   !word MOVE_OFFSET + $87d8
  7458  b87a f4de                   !word MOVE_OFFSET + $87f4
  7459  b87c f7de                   !word MOVE_OFFSET + $87f7
  7460  b87e 0ddf                   !word MOVE_OFFSET + $880d
  7461  b880 22df                   !word MOVE_OFFSET + $8822
  7462  b882 25df                   !word MOVE_OFFSET + $8825
  7463  b884 34df                   !word MOVE_OFFSET + $8834
  7464  b886 47df                   !word MOVE_OFFSET + $8847
  7465  b888 4edf                   !word MOVE_OFFSET + $884e
  7466  b88a 57df                   !word MOVE_OFFSET + $8857
  7467  b88c 5cdf                   !word MOVE_OFFSET + $885c
  7468  b88e 61df                   !word MOVE_OFFSET + $8861
  7469  b890 66df                   !word MOVE_OFFSET + $8866
  7470  b892 71df                   !word MOVE_OFFSET + $8871
  7471  b894 7cdf                   !word MOVE_OFFSET + $887c
  7472  b896 83df                   !word MOVE_OFFSET + $8883
  7473  b898 93df                   !word MOVE_OFFSET + $8893
  7474  b89a 96df                   !word MOVE_OFFSET + $8896
  7475  b89c c0df                   !word MOVE_OFFSET + $88c0
  7476  b89e c7df                   !word MOVE_OFFSET + $88c7
  7477  b8a0 cadf                   !word MOVE_OFFSET + $88ca
  7478  b8a2 d8df                   !word MOVE_OFFSET + $88d8
  7479  b8a4 dbdf                   !word MOVE_OFFSET + $88db
  7480  b8a6 dedf                   !word MOVE_OFFSET + $88de
  7481  b8a8 e1df                   !word MOVE_OFFSET + $88e1
  7482  b8aa e4df                   !word MOVE_OFFSET + $88e4
  7483  b8ac e7df                   !word MOVE_OFFSET + $88e7
  7484  b8ae f4df                   !word MOVE_OFFSET + $88f4
  7485  b8b0 13e0                   !word MOVE_OFFSET + $8913
  7486  b8b2 4de0                   !word MOVE_OFFSET + $894d
  7487  b8b4 b8e0                   !word MOVE_OFFSET + $89b8
  7488  b8b6 c5e0                   !word MOVE_OFFSET + $89c5
  7489  b8b8 f1e0                   !word MOVE_OFFSET + $89f1
  7490  b8ba 4de1                   !word MOVE_OFFSET + $8a4d
  7491  b8bc 54e1                   !word MOVE_OFFSET + $8a54
  7492  b8be 9ee1                   !word MOVE_OFFSET + $8a9e
  7493  b8c0 a8e1                   !word MOVE_OFFSET + $8aa8
  7494  b8c2 ade1                   !word MOVE_OFFSET + $8aad
  7495  b8c4 bbe1                   !word MOVE_OFFSET + $8abb
  7496  b8c6 d9e1                   !word MOVE_OFFSET + $8ad9
  7497  b8c8 dee1                   !word MOVE_OFFSET + $8ade
  7498  b8ca ebe1                   !word MOVE_OFFSET + $8aeb
  7499  b8cc f0e1                   !word MOVE_OFFSET + $8af0
  7500  b8ce f4e1                   !word MOVE_OFFSET + $8af4
  7501  b8d0 00e2                   !word MOVE_OFFSET + $8b00
  7502  b8d2 03e2                   !word MOVE_OFFSET + $8b03
  7503  b8d4 13e2                   !word MOVE_OFFSET + $8b13
  7504  b8d6 18e2                   !word MOVE_OFFSET + $8b18
  7505  b8d8 25e2                   !word MOVE_OFFSET + $8b25
  7506  b8da 28e2                   !word MOVE_OFFSET + $8b28
  7507  b8dc 49e2                   !word MOVE_OFFSET + $8b49
  7508  b8de 58e2                   !word MOVE_OFFSET + $8b58
  7509  b8e0 6ee2                   !word MOVE_OFFSET + $8b6e
  7510  b8e2 88e2                   !word MOVE_OFFSET + $8b88
  7511  b8e4 93e2                   !word MOVE_OFFSET + $8b93
  7512  b8e6 9ee2                   !word MOVE_OFFSET + $8b9e
  7513  b8e8 a1e2                   !word MOVE_OFFSET + $8ba1
  7514  b8ea b0e2                   !word MOVE_OFFSET + $8bb0
  7515  b8ec b3e2                   !word MOVE_OFFSET + $8bb3
  7516  b8ee b6e2                   !word MOVE_OFFSET + $8bb6
  7517  b8f0 cde2                   !word MOVE_OFFSET + $8bcd
  7518  b8f2 d0e2                   !word MOVE_OFFSET + $8bd0
  7519  b8f4 d5e2                   !word MOVE_OFFSET + $8bd5
  7520  b8f6 d8e2                   !word MOVE_OFFSET + $8bd8
  7521  b8f8 ffe2                   !word MOVE_OFFSET + $8bff
  7522  b8fa 04e3                   !word MOVE_OFFSET + $8c04
  7523  b8fc 12e3                   !word MOVE_OFFSET + $8c12
  7524  b8fe 15e3                   !word MOVE_OFFSET + $8c15
  7525  b900 23e3                   !word MOVE_OFFSET + $8c23
  7526  b902 26e3                   !word MOVE_OFFSET + $8c26
  7527  b904 2be3                   !word MOVE_OFFSET + $8c2b
  7528  b906 33e3                   !word MOVE_OFFSET + $8c33
  7529  b908 37e3                   !word MOVE_OFFSET + $8c37
  7530  b90a 3ae3                   !word MOVE_OFFSET + $8c3a
  7531  b90c 4fe3                   !word MOVE_OFFSET + $8c4f
  7532  b90e 56e3                   !word MOVE_OFFSET + $8c56
  7533  b910 6ce3                   !word MOVE_OFFSET + $8c6c
  7534  b912 87e3                   !word MOVE_OFFSET + $8c87
  7535  b914 abe3                   !word MOVE_OFFSET + $8cab
  7536  b916 cce3                   !word MOVE_OFFSET + $8ccc
  7537  b918 cfe3                   !word MOVE_OFFSET + $8ccf
  7538  b91a d2e3                   !word MOVE_OFFSET + $8cd2
  7539  b91c dfe3                   !word MOVE_OFFSET + $8cdf
  7540  b91e f4e3                   !word MOVE_OFFSET + $8cf4
  7541  b920 f7e3                   !word MOVE_OFFSET + $8cf7
  7542  b922 16e4                   !word MOVE_OFFSET + $8d16
  7543  b924 27e4                   !word MOVE_OFFSET + $8d27
  7544  b926 2ee4                   !word MOVE_OFFSET + $8d2e
  7545  b928 31e4                   !word MOVE_OFFSET + $8d31
  7546  b92a 3ae4                   !word MOVE_OFFSET + $8d3a
  7547  b92c 43e4                   !word MOVE_OFFSET + $8d43
  7548  b92e 4ce4                   !word MOVE_OFFSET + $8d4c
  7549  b930 4fe4                   !word MOVE_OFFSET + $8d4f
  7550  b932 52e4                   !word MOVE_OFFSET + $8d52
  7551  b934 afe4                   !word MOVE_OFFSET + $8daf
  7552  b936 bee4                   !word MOVE_OFFSET + $8dbe
  7553  b938 c3e4                   !word MOVE_OFFSET + $8dc3
  7554  b93a c6e4                   !word MOVE_OFFSET + $8dc6
  7555  b93c dee4                   !word MOVE_OFFSET + $8dde
  7556  b93e e1e4                   !word MOVE_OFFSET + $8de1
  7557  b940 e8e4                   !word MOVE_OFFSET + $8de8
  7558  b942 efe4                   !word MOVE_OFFSET + $8def
  7559  b944 f2e4                   !word MOVE_OFFSET + $8df2
  7560  b946 f9e4                   !word MOVE_OFFSET + $8df9
  7561  b948 12e5                   !word MOVE_OFFSET + $8e12
  7562  b94a 1de5                   !word MOVE_OFFSET + $8e1d
  7563  b94c 20e5                   !word MOVE_OFFSET + $8e20
  7564  b94e 33e5                   !word MOVE_OFFSET + $8e33
  7565  b950 36e5                   !word MOVE_OFFSET + $8e36
  7566  b952 39e5                   !word MOVE_OFFSET + $8e39
  7567  b954 3ce5                   !word MOVE_OFFSET + $8e3c
  7568  b956 49e5                   !word MOVE_OFFSET + $8e49
  7569  b958 4ce5                   !word MOVE_OFFSET + $8e4c
  7570  b95a 5ae5                   !word MOVE_OFFSET + $8e5a
  7571  b95c 7ae5                   !word MOVE_OFFSET + $8e7a
  7572  b95e a2e5                   !word MOVE_OFFSET + $8ea2
  7573  b960 a5e5                   !word MOVE_OFFSET + $8ea5
  7574  b962 bfe5                   !word MOVE_OFFSET + $8ebf
  7575  b964 cce5                   !word MOVE_OFFSET + $8ecc
  7576  b966 e7e5                   !word MOVE_OFFSET + $8ee7
  7577  b968 eae5                   !word MOVE_OFFSET + $8eea
  7578  b96a 09e6                   !word MOVE_OFFSET + $8f09
  7579  b96c 1ee6                   !word MOVE_OFFSET + $8f1e
  7580  b96e 21e6                   !word MOVE_OFFSET + $8f21
  7581  b970 5ee6                   !word MOVE_OFFSET + $8f5e
  7582  b972 73e6                   !word MOVE_OFFSET + $8f73
  7583  b974 76e6                   !word MOVE_OFFSET + $8f76
  7584  b976 79e6                   !word MOVE_OFFSET + $8f79
  7585  b978 7ce6                   !word MOVE_OFFSET + $8f7c
  7586  b97a 7fe6                   !word MOVE_OFFSET + $8f7f
  7587  b97c 8be6                   !word MOVE_OFFSET + $8f8b
  7588  b97e bce6                   !word MOVE_OFFSET + $8fbc
  7589  b980 cbe6                   !word MOVE_OFFSET + $8fcb
  7590  b982 cde6                   !word MOVE_OFFSET + $8fcd
  7591  b984 d9e6                   !word MOVE_OFFSET + $8fd9
  7592  b986 e6e6                   !word MOVE_OFFSET + $8fe6
  7593  b988 e9e6                   !word MOVE_OFFSET + $8fe9
  7594  b98a f8e6                   !word MOVE_OFFSET + $8ff8
  7595  b98c fbe6                   !word MOVE_OFFSET + $8ffb
  7596  b98e 06e7                   !word MOVE_OFFSET + $9006
  7597  b990 13e7                   !word MOVE_OFFSET + $9013
  7598  b992 37e7                   !word MOVE_OFFSET + $9037
  7599  b994 3ce7                   !word MOVE_OFFSET + $903c
  7600  b996 54e7                   !word MOVE_OFFSET + $9054
  7601  b998 74e7                   !word MOVE_OFFSET + $9074
  7602  b99a 97e7                   !word MOVE_OFFSET + $9097
  7603  b99c 9ae7                   !word MOVE_OFFSET + $909a
  7604  b99e a5e7                   !word MOVE_OFFSET + $90a5
  7605  b9a0 bde7                   !word MOVE_OFFSET + $90bd
  7606  b9a2 09e8                   !word MOVE_OFFSET + $9109
  7607  b9a4 0ee8                   !word MOVE_OFFSET + $910e
  7608  b9a6 19e8                   !word MOVE_OFFSET + $9119
  7609  b9a8 20e8                   !word MOVE_OFFSET + $9120
  7610  b9aa 23e8                   !word MOVE_OFFSET + $9123
  7611  b9ac 2ce8                   !word MOVE_OFFSET + $912c
  7612  b9ae 3ce8                   !word MOVE_OFFSET + $913c
  7613  b9b0 76e8                   !word MOVE_OFFSET + $9176
  7614  b9b2 79e8                   !word MOVE_OFFSET + $9179
  7615  b9b4 84e8                   !word MOVE_OFFSET + $9184
  7616  b9b6 8de8                   !word MOVE_OFFSET + $918d
  7617  b9b8 a7e8                   !word MOVE_OFFSET + $91a7
  7618  b9ba b0e8                   !word MOVE_OFFSET + $91b0
  7619  b9bc c0e8                   !word MOVE_OFFSET + $91c0
  7620  b9be c3e8                   !word MOVE_OFFSET + $91c3
  7621  b9c0 c6e8                   !word MOVE_OFFSET + $91c6
  7622  b9c2 dbe8                   !word MOVE_OFFSET + $91db
  7623  b9c4 dee8                   !word MOVE_OFFSET + $91de
  7624  b9c6 f1e8                   !word MOVE_OFFSET + $91f1
  7625  b9c8 f4e8                   !word MOVE_OFFSET + $91f4
  7626  b9ca f7e8                   !word MOVE_OFFSET + $91f7
  7627  b9cc ffe8                   !word MOVE_OFFSET + $91ff
  7628  b9ce 02e9                   !word MOVE_OFFSET + $9202
  7629  b9d0 2be9                   !word MOVE_OFFSET + $922b
  7630  b9d2 2ee9                   !word MOVE_OFFSET + $922e
  7631  b9d4 5ce9                   !word MOVE_OFFSET + $925c
  7632  b9d6 5fe9                   !word MOVE_OFFSET + $925f
  7633  b9d8 88e9                   !word MOVE_OFFSET + $9288
  7634  b9da 9be9                   !word MOVE_OFFSET + $929b
  7635  b9dc a6e9                   !word MOVE_OFFSET + $92a6
  7636  b9de b4e9                   !word MOVE_OFFSET + $92b4
  7637  b9e0 b7e9                   !word MOVE_OFFSET + $92b7
  7638  b9e2 d3e9                   !word MOVE_OFFSET + $92d3
  7639  b9e4 dfe9                   !word MOVE_OFFSET + $92df
  7640  b9e6 e2e9                   !word MOVE_OFFSET + $92e2
  7641  b9e8 eee9                   !word MOVE_OFFSET + $92ee
  7642  b9ea 0aea                   !word MOVE_OFFSET + $930a
  7643  b9ec 0dea                   !word MOVE_OFFSET + $930d
  7644  b9ee 36ea                   !word MOVE_OFFSET + $9336
  7645  b9f0 4fea                   !word MOVE_OFFSET + $934f
  7646  b9f2 54ea                   !word MOVE_OFFSET + $9354
  7647  b9f4 beea                   !word MOVE_OFFSET + $93be
  7648  b9f6 d5ea                   !word MOVE_OFFSET + $93d5
  7649  b9f8 d8ea                   !word MOVE_OFFSET + $93d8
  7650  b9fa dbea                   !word MOVE_OFFSET + $93db
  7651  b9fc ebea                   !word MOVE_OFFSET + $93eb
  7652  b9fe eeea                   !word MOVE_OFFSET + $93ee
  7653  ba00 f1ea                   !word MOVE_OFFSET + $93f1
  7654  ba02 03eb                   !word MOVE_OFFSET + $9403
  7655  ba04 06eb                   !word MOVE_OFFSET + $9406
  7656  ba06 11eb                   !word MOVE_OFFSET + $9411
  7657  ba08 49eb                   !word MOVE_OFFSET + $9449
  7658  ba0a 4ceb                   !word MOVE_OFFSET + $944c
  7659  ba0c 4feb                   !word MOVE_OFFSET + $944f
  7660  ba0e 78eb                   !word MOVE_OFFSET + $9478
  7661  ba10 86eb                   !word MOVE_OFFSET + $9486
  7662  ba12 b5eb                   !word MOVE_OFFSET + $94b5
  7663  ba14 b8eb                   !word MOVE_OFFSET + $94b8
  7664  ba16 bbeb                   !word MOVE_OFFSET + $94bb
  7665  ba18 38ec                   !word MOVE_OFFSET + $9538
  7666  ba1a 74ec                   !word MOVE_OFFSET + $9574
  7667  ba1c 77ec                   !word MOVE_OFFSET + $9577
  7668  ba1e 7aec                   !word MOVE_OFFSET + $957a
  7669  ba20 94ec                   !word MOVE_OFFSET + $9594
  7670  ba22 97ec                   !word MOVE_OFFSET + $9597
  7671  ba24 9cec                   !word MOVE_OFFSET + $959c
  7672  ba26 9fec                   !word MOVE_OFFSET + $959f
  7673  ba28 a4ec                   !word MOVE_OFFSET + $95a4
  7674  ba2a a7ec                   !word MOVE_OFFSET + $95a7
  7675  ba2c acec                   !word MOVE_OFFSET + $95ac
  7676  ba2e beec                   !word MOVE_OFFSET + $95be
  7677  ba30 c1ec                   !word MOVE_OFFSET + $95c1
  7678  ba32 f6ec                   !word MOVE_OFFSET + $95f6
  7679  ba34 04ed                   !word MOVE_OFFSET + $9604
  7680  ba36 0ded                   !word MOVE_OFFSET + $960d
  7681  ba38 10ed                   !word MOVE_OFFSET + $9610
  7682  ba3a 13ed                   !word MOVE_OFFSET + $9613
  7683  ba3c 24ed                   !word MOVE_OFFSET + $9624
  7684  ba3e 2bed                   !word MOVE_OFFSET + $962b
  7685  ba40 2eed                   !word MOVE_OFFSET + $962e
  7686  ba42 31ed                   !word MOVE_OFFSET + $9631
  7687  ba44 34ed                   !word MOVE_OFFSET + $9634
  7688  ba46 44ed                   !word MOVE_OFFSET + $9644
  7689  ba48 47ed                   !word MOVE_OFFSET + $9647
  7690  ba4a 6eed                   !word MOVE_OFFSET + $966e
  7691  ba4c aced                   !word MOVE_OFFSET + $96ac
  7692  ba4e b9ed                   !word MOVE_OFFSET + $96b9
  7693  ba50 d4ed                   !word MOVE_OFFSET + $96d4
  7694  ba52 e7ed                   !word MOVE_OFFSET + $96e7
  7695  ba54 04ee                   !word MOVE_OFFSET + $9704
  7696  ba56 20ee                   !word MOVE_OFFSET + $9720
  7697  ba58 51ee                   !word MOVE_OFFSET + $9751
  7698  ba5a 54ee                   !word MOVE_OFFSET + $9754
  7699  ba5c 5fee                   !word MOVE_OFFSET + $975f
  7700  ba5e 62ee                   !word MOVE_OFFSET + $9762
  7701  ba60 6fee                   !word MOVE_OFFSET + $976f
  7702  ba62 72ee                   !word MOVE_OFFSET + $9772
  7703  ba64 75ee                   !word MOVE_OFFSET + $9775
  7704  ba66 8aee                   !word MOVE_OFFSET + $978a
  7705  ba68 d4ee                   !word MOVE_OFFSET + $97d4
  7706  ba6a f2ee                   !word MOVE_OFFSET + $97f2
  7707  ba6c f5ee                   !word MOVE_OFFSET + $97f5
  7708  ba6e 0eef                   !word MOVE_OFFSET + $980e
  7709  ba70 12ef                   !word MOVE_OFFSET + $9812
  7710  ba72 16ef                   !word MOVE_OFFSET + $9816
  7711  ba74 1aef                   !word MOVE_OFFSET + $981a
  7712  ba76 1def                   !word MOVE_OFFSET + $981d
  7713  ba78 22ef                   !word MOVE_OFFSET + $9822
  7714  ba7a 25ef                   !word MOVE_OFFSET + $9825
  7715  ba7c 49ef                   !word MOVE_OFFSET + $9849
  7716  ba7e 60ef                   !word MOVE_OFFSET + $9860
  7717  ba80 8aef                   !word MOVE_OFFSET + $988a
  7718  ba82 8def                   !word MOVE_OFFSET + $988d
  7719  ba84 c1ef                   !word MOVE_OFFSET + $98c1
  7720  ba86 c4ef                   !word MOVE_OFFSET + $98c4
  7721  ba88 c7ef                   !word MOVE_OFFSET + $98c7
  7722  ba8a cbef                   !word MOVE_OFFSET + $98cb
  7723  ba8c d4ef                   !word MOVE_OFFSET + $98d4
  7724  ba8e f0ef                   !word MOVE_OFFSET + $98f0
  7725  ba90 f3ef                   !word MOVE_OFFSET + $98f3
  7726  ba92 feef                   !word MOVE_OFFSET + $98fe
  7727  ba94 10f0                   !word MOVE_OFFSET + $9910
  7728  ba96 13f0                   !word MOVE_OFFSET + $9913
  7729  ba98 2ff0                   !word MOVE_OFFSET + $992f
  7730  ba9a 3cf0                   !word MOVE_OFFSET + $993c
  7731  ba9c 46f0                   !word MOVE_OFFSET + $9946
  7732  ba9e 53f0                   !word MOVE_OFFSET + $9953
  7733  baa0 59f0                   !word MOVE_OFFSET + $9959
  7734  baa2 62f0                   !word MOVE_OFFSET + $9962
  7735  baa4 65f0                   !word MOVE_OFFSET + $9965
  7736  baa6 68f0                   !word MOVE_OFFSET + $9968
  7737  baa8 8bf0                   !word MOVE_OFFSET + $998b
  7738  baaa 9ef0                   !word MOVE_OFFSET + $999e
  7739  baac a1f0                   !word MOVE_OFFSET + $99a1
  7740  baae a4f0                   !word MOVE_OFFSET + $99a4
  7741  bab0 c1f0                   !word MOVE_OFFSET + $99c1
  7742  bab2 c4f0                   !word MOVE_OFFSET + $99c4
  7743  bab4 cdf0                   !word MOVE_OFFSET + $99cd
  7744  bab6 eaf0                   !word MOVE_OFFSET + $99ea
  7745  bab8 f4f0                   !word MOVE_OFFSET + $99f4
  7746  baba 06f1                   !word MOVE_OFFSET + $9a06
  7747  babc 09f1                   !word MOVE_OFFSET + $9a09
  7748  babe 2cf1                   !word MOVE_OFFSET + $9a2c
  7749  bac0 45f1                   !word MOVE_OFFSET + $9a45
  7750  bac2 48f1                   !word MOVE_OFFSET + $9a48
  7751  bac4 4bf1                   !word MOVE_OFFSET + $9a4b
  7752  bac6 5df1                   !word MOVE_OFFSET + $9a5d
  7753  bac8 60f1                   !word MOVE_OFFSET + $9a60
  7754  baca 63f1                   !word MOVE_OFFSET + $9a63
  7755  bacc 8df1                   !word MOVE_OFFSET + $9a8d
  7756  bace 90f1                   !word MOVE_OFFSET + $9a90
  7757  bad0 93f1                   !word MOVE_OFFSET + $9a93
  7758  bad2 bdf1                   !word MOVE_OFFSET + $9abd
  7759  bad4 caf1                   !word MOVE_OFFSET + $9aca
  7760  bad6 d5f1                   !word MOVE_OFFSET + $9ad5
  7761  bad8 3af2                   !word MOVE_OFFSET + $9b3a
  7762  bada 45f2                   !word MOVE_OFFSET + $9b45
  7763  badc 53f2                   !word MOVE_OFFSET + $9b53
  7764  bade 71f2                   !word MOVE_OFFSET + $9b71
  7765  bae0 7cf2                   !word MOVE_OFFSET + $9b7c
  7766  bae2 82f2                   !word MOVE_OFFSET + $9b82
  7767  bae4 97f2                   !word MOVE_OFFSET + $9b97
  7768  bae6 acf2                   !word MOVE_OFFSET + $9bac
  7769  bae8 c2f2                   !word MOVE_OFFSET + $9bc2
  7770  baea d5f2                   !word MOVE_OFFSET + $9bd5
  7771  baec daf2                   !word MOVE_OFFSET + $9bda
  7772  baee f0f2                   !word MOVE_OFFSET + $9bf0
  7773  baf0 f3f2                   !word MOVE_OFFSET + $9bf3
  7774  baf2 05f3                   !word MOVE_OFFSET + $9c05
  7775  baf4 15f3                   !word MOVE_OFFSET + $9c15
  7776  baf6 19f3                   !word MOVE_OFFSET + $9c19
  7777  baf8 21f3                   !word MOVE_OFFSET + $9c21
  7778  bafa 2ff3                   !word MOVE_OFFSET + $9c2f
  7779  bafc 34f3                   !word MOVE_OFFSET + $9c34
  7780  bafe 52f3                   !word MOVE_OFFSET + $9c52
  7781  bb00 cbf3                   !word MOVE_OFFSET + $9ccb
  7782  bb02 ebf3                   !word MOVE_OFFSET + $9ceb
  7783  bb04 f4f3                   !word MOVE_OFFSET + $9cf4
  7784  bb06 f7f3                   !word MOVE_OFFSET + $9cf7
  7785  bb08 0ff4                   !word MOVE_OFFSET + $9d0f
  7786  bb0a 12f4                   !word MOVE_OFFSET + $9d12
  7787  bb0c 1ff4                   !word MOVE_OFFSET + $9d1f
  7788  bb0e 31f4                   !word MOVE_OFFSET + $9d31
  7789  bb10 74f4                   !word MOVE_OFFSET + $9d74
  7790  bb12 81f4                   !word MOVE_OFFSET + $9d81
  7791  bb14 a4f4                   !word MOVE_OFFSET + $9da4
  7792  bb16 a9f4                   !word MOVE_OFFSET + $9da9
  7793  bb18 acf4                   !word MOVE_OFFSET + $9dac
  7794  bb1a b1f4                   !word MOVE_OFFSET + $9db1
  7795  bb1c c3f4                   !word MOVE_OFFSET + $9dc3
  7796  bb1e c8f4                   !word MOVE_OFFSET + $9dc8
  7797  bb20 81f5                   !word MOVE_OFFSET + $9e81
  7798  bb22 aaf5                   !word MOVE_OFFSET + $9eaa
  7799  bb24 d2f5                   !word MOVE_OFFSET + $9ed2
  7800  bb26 d9f5                   !word MOVE_OFFSET + $9ed9
  7801  bb28 e2f5                   !word MOVE_OFFSET + $9ee2
  7802  bb2a ebf5                   !word MOVE_OFFSET + $9eeb
  7803  bb2c fdf5                   !word MOVE_OFFSET + $9efd
  7804  bb2e 1bf6                   !word MOVE_OFFSET + $9f1b
  7805  bb30 3bf6                   !word MOVE_OFFSET + $9f3b
  7806  bb32 42f6                   !word MOVE_OFFSET + $9f42
  7807  bb34 66f6                   !word MOVE_OFFSET + $9f66
  7808  bb36 69f6                   !word MOVE_OFFSET + $9f69
  7809  bb38 6ef6                   !word MOVE_OFFSET + $9f6e
  7810  bb3a 73f6                   !word MOVE_OFFSET + $9f73
  7811  bb3c 82f6                   !word MOVE_OFFSET + $9f82
  7812  bb3e 91f6                   !word MOVE_OFFSET + $9f91
  7813  bb40 94f6                   !word MOVE_OFFSET + $9f94
  7814  bb42 a4f6                   !word MOVE_OFFSET + $9fa4
  7815  bb44 abf6                   !word MOVE_OFFSET + $9fab
  7816  bb46 b5f6                   !word MOVE_OFFSET + $9fb5
  7817  bb48 bff6                   !word MOVE_OFFSET + $9fbf
  7818  bb4a c2f6                   !word MOVE_OFFSET + $9fc2
  7819  bb4c c6f6                   !word MOVE_OFFSET + $9fc6
  7820  bb4e c9f6                   !word MOVE_OFFSET + $9fc9
  7821  bb50 d7f6                   !word MOVE_OFFSET + $9fd7
  7822  bb52 daf6                   !word MOVE_OFFSET + $9fda
  7823  bb54 ddf6                   !word MOVE_OFFSET + $9fdd
  7824  bb56 e0f6                   !word MOVE_OFFSET + $9fe0
  7825  bb58 e3f6                   !word MOVE_OFFSET + $9fe3
  7826  bb5a 04f7                   !word MOVE_OFFSET + $a004
  7827  bb5c 2df7                   !word MOVE_OFFSET + $a02d
  7828                          unused4
  7829  bb5e 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7830  bb66 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7831  bb6e 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7832  bb76 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7833  bb7e 000000ffffffffff       !byte   0,   0,   0, $ff, $ff, $ff, $ff, $ff
  7834  bb86 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7835  bb8e ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7836  bb96 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7837  bb9e ffff000000000000       !byte $ff, $ff,   0,   0,   0,   0,   0,   0
  7838  bba6 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7839  bbae 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7840  bbb6 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7841  bbbe 0000ffffffffffff       !byte   0,   0, $ff, $ff, $ff, $ff, $ff, $ff
  7842  bbc6 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7843  bbce ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7844  bbd6 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7845  bbde ffff000000000000       !byte $ff, $ff,   0,   0,   0,   0,   0,   0
  7846  bbe6 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7847  bbee 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7848  bbf6 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7849  bbfe 000000ffffffffff       !byte   0,   0,   0, $ff, $ff, $ff, $ff, $ff
  7850  bc06 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7851  bc0e ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7852  bc16 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7853  bc1e ffff000000000000       !byte $ff, $ff,   0,   0,   0,   0,   0,   0
  7854  bc26 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7855  bc2e 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7856  bc36 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7857  bc3e 0000ffffffffffff       !byte   0,   0, $ff, $ff, $ff, $ff, $ff, $ff
  7858  bc46 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7859  bc4e ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7860  bc56 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7861  bc5e ffff000000000000       !byte $ff, $ff,   0,   0,   0,   0,   0,   0
  7862  bc66 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7863  bc6e 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7864  bc76 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7865  bc7e 000000ffffffffff       !byte   0,   0,   0, $ff, $ff, $ff, $ff, $ff
  7866  bc86 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7867  bc8e ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7868  bc96 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7869  bc9e ffff000000000000       !byte $ff, $ff,   0,   0,   0,   0,   0,   0
  7870  bca6 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7871  bcae 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7872  bcb6 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7873  bcbe 0000ffffffffffff       !byte   0,   0, $ff, $ff, $ff, $ff, $ff, $ff
  7874  bcc6 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7875  bcce ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7876  bcd6 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7877  bcde ffff000000000000       !byte $ff, $ff,   0,   0,   0,   0,   0,   0
  7878  bce6 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7879  bcee 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7880  bcf6 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7881  bcfe 000000ffffffffff       !byte   0,   0,   0, $ff, $ff, $ff, $ff, $ff
  7882  bd06 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7883  bd0e ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7884  bd16 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7885  bd1e ffff000000000000       !byte $ff, $ff,   0,   0,   0,   0,   0,   0
  7886  bd26 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7887  bd2e 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7888  bd36 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7889  bd3e 0000ffffffffffff       !byte   0,   0, $ff, $ff, $ff, $ff, $ff, $ff
  7890  bd46 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7891  bd4e ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7892  bd56 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7893  bd5e ffff000000000000       !byte $ff, $ff,   0,   0,   0,   0,   0,   0
  7894  bd66 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7895  bd6e 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7896  bd76 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7897  bd7e 000000ffffffffff       !byte   0,   0,   0, $ff, $ff, $ff, $ff, $ff
  7898  bd86 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7899  bd8e ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7900  bd96 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7901  bd9e ffff000000000000       !byte $ff, $ff,   0,   0,   0,   0,   0,   0
  7902  bda6 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7903  bdae 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7904  bdb6 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7905  bdbe 0000ffffffffffff       !byte   0,   0, $ff, $ff, $ff, $ff, $ff, $ff
  7906  bdc6 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7907  bdce ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7908  bdd6 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7909  bdde ffff000000000000       !byte $ff, $ff,   0,   0,   0,   0,   0,   0
  7910  bde6 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7911  bdee 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7912  bdf6 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7913  bdfe 000000ffffffffff       !byte   0,   0,   0, $ff, $ff, $ff, $ff, $ff
  7914  be06 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7915  be0e ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7916  be16 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7917  be1e ffff000000000000       !byte $ff, $ff,   0,   0,   0,   0,   0,   0
  7918  be26 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7919  be2e 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7920  be36 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7921  be3e 0000ffffffffffff       !byte   0,   0, $ff, $ff, $ff, $ff, $ff, $ff
  7922  be46 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7923  be4e ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7924  be56 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7925  be5e ffff000000000000       !byte $ff, $ff,   0,   0,   0,   0,   0,   0
  7926  be66 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7927  be6e 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7928  be76 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7929  be7e 000000ffffffffff       !byte   0,   0,   0, $ff, $ff, $ff, $ff, $ff
  7930  be86 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7931  be8e ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7932  be96 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7933  be9e ffff000000000000       !byte $ff, $ff,   0,   0,   0,   0,   0,   0
  7934  bea6 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7935  beae 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7936  beb6 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7937  bebe 0000ffffffffffff       !byte   0,   0, $ff, $ff, $ff, $ff, $ff, $ff
  7938  bec6 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7939  bece ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7940  bed6 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7941  bede ffff000000000000       !byte $ff, $ff,   0,   0,   0,   0,   0,   0
  7942  bee6 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7943  beee 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7944  bef6 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7945  befe 000000ffffffffff       !byte   0,   0,   0, $ff, $ff, $ff, $ff, $ff
  7946  bf06 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7947  bf0e ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7948  bf16 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7949  bf1e ffff000000000000       !byte $ff, $ff,   0,   0,   0,   0,   0,   0
  7950  bf26 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7951  bf2e 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7952  bf36 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7953  bf3e 0000ffffffffffff       !byte   0,   0, $ff, $ff, $ff, $ff, $ff, $ff
  7954  bf46 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7955  bf4e ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7956  bf56 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7957  bf5e ffff000000000000       !byte $ff, $ff,   0,   0,   0,   0,   0,   0
  7958  bf66 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7959  bf6e 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7960  bf76 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7961  bf7e 000000ffffffffff       !byte   0,   0,   0, $ff, $ff, $ff, $ff, $ff
  7962  bf86 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7963  bf8e ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7964  bf96 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7965  bf9e ffff000000000000       !byte $ff, $ff,   0,   0,   0,   0,   0,   0
  7966  bfa6 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7967  bfae 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7968  bfb6 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7969  bfbe 0000ffffffffffff       !byte   0,   0, $ff, $ff, $ff, $ff, $ff, $ff
  7970  bfc6 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7971  bfce ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7972  bfd6 ffffffffffffffff       !byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
  7973  bfde ffff000000000000       !byte $ff, $ff,   0,   0,   0,   0,   0,   0
  7974  bfe6 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7975  bfee 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7976  bff6 0000000000000000       !byte   0,   0,   0,   0,   0,   0,   0,   0
  7977  bffe 0000                   !byte   0,   0
  7978                          ROMTOP
  7979                          pydis_end
  7980                          !if ($80+$0d) != $8d {
  7981                              !error "Assertion failed: $80+$0d == $8d"
  7982                          }
  7983                          !if ($80+' ') != $a0 {
  7984                              !error "Assertion failed: $80+' ' == $a0"
  7985                          }
  7986                          !if ($80+'#') != $a3 {
  7987                              !error "Assertion failed: $80+'#' == $a3"
  7988                          }
  7989                          !if ($80+'L') != $cc {
  7990                              !error "Assertion failed: $80+'L' == $cc"
  7991                          }
  7992                          !if ($80+'y') != $f9 {
  7993                              !error "Assertion failed: $80+'y' == $f9"
  7994                          }
  7995                          !if (' ') != $20 {
  7996                              !error "Assertion failed: ' ' == $20"
  7997                          }
  7998                          !if ('!') != $21 {
  7999                              !error "Assertion failed: '!' == $21"
  8000                          }
  8001                          !if ('(') != $28 {
  8002                              !error "Assertion failed: '(' == $28"
  8003                          }
  8004                          !if (')') != $29 {
  8005                              !error "Assertion failed: ')' == $29"
  8006                          }
  8007                          !if ('-') != $2d {
  8008                              !error "Assertion failed: '-' == $2d"
  8009                          }
  8010                          !if ('.') != $2e {
  8011                              !error "Assertion failed: '.' == $2e"
  8012                          }
  8013                          !if ('0') != $30 {
  8014                              !error "Assertion failed: '0' == $30"
  8015                          }
  8016                          !if ('=') != $3d {
  8017                              !error "Assertion failed: '=' == $3d"
  8018                          }
  8019                          !if ('C') != $43 {
  8020                              !error "Assertion failed: 'C' == $43"
  8021                          }
  8022                          !if ('F') != $46 {
  8023                              !error "Assertion failed: 'F' == $46"
  8024                          }
  8025                          !if ('G') != $47 {
  8026                              !error "Assertion failed: 'G' == $47"
  8027                          }
  8028                          !if ('I') != $49 {
  8029                              !error "Assertion failed: 'I' == $49"
  8030                          }
  8031                          !if ('L') != $4c {
  8032                              !error "Assertion failed: 'L' == $4c"
  8033                          }
  8034                          !if ('P') != $50 {
  8035                              !error "Assertion failed: 'P' == $50"
  8036                          }
  8037                          !if ('S') != $53 {
  8038                              !error "Assertion failed: 'S' == $53"
  8039                          }
  8040                          !if ('W') != $57 {
  8041                              !error "Assertion failed: 'W' == $57"
  8042                          }
  8043                          !if ('[') != $5b {
  8044                              !error "Assertion failed: '[' == $5b"
  8045                          }
  8046                          !if ('\'') != $27 {
  8047                              !error "Assertion failed: '\'' == $27"
  8048                          }
  8049                          !if ('^') != $5e {
  8050                              !error "Assertion failed: '^' == $5e"
  8051                          }
  8052                          !if ('c') != $63 {
  8053                              !error "Assertion failed: 'c' == $63"
  8054                          }
  8055                          !if ((>LISPEN-LISVAL-1)+1) != $21 {
  8056                              !error "Assertion failed: (>LISPEN-LISVAL-1)+1 == $21"
  8057                          }
  8058                          !if (<(DOSBUF)) != $00 {
  8059                              !error "Assertion failed: <(DOSBUF) == $00"
  8060                          }
  8061                          !if (<(GOSTR)) != $31 {
  8062                              !error "Assertion failed: <(GOSTR) == $31"
  8063                          }
  8064                          !if (<(INCB)) != $3e {
  8065                              !error "Assertion failed: <(INCB) == $3e"
  8066                          }
  8067                          !if (<(IODCB)) != $16 {
  8068                              !error "Assertion failed: <(IODCB) == $16"
  8069                          }
  8070                          !if (<(LISTR)) != $39 {
  8071                              !error "Assertion failed: <(LISTR) == $39"
  8072                          }
  8073                          !if (<(OSINFO)) != $38 {
  8074                              !error "Assertion failed: <(OSINFO) == $38"
  8075                          }
  8076                          !if (<(OSWBUF)) != $00 {
  8077                              !error "Assertion failed: <(OSWBUF) == $00"
  8078                          }
  8079                          !if (<(PWORD)) != $1b {
  8080                              !error "Assertion failed: <(PWORD) == $1b"
  8081                          }
  8082                          !if (<(TIMEW)) != $25 {
  8083                              !error "Assertion failed: <(TIMEW) == $25"
  8084                          }
  8085                          !if (<(TIMZER)) != $76 {
  8086                              !error "Assertion failed: <(TIMZER) == $76"
  8087                          }
  8088                          !if (<ACL) != $72 {
  8089                              !error "Assertion failed: <ACL == $72"
  8090                          }
  8091                          !if (<BACALL+1) != $dd {
  8092                              !error "Assertion failed: <BACALL+1 == $dd"
  8093                          }
  8094                          !if (<DWARF) != $eb {
  8095                              !error "Assertion failed: <DWARF == $eb"
  8096                          }
  8097                          !if (<ELFIN-1) != $c6 {
  8098                              !error "Assertion failed: <ELFIN-1 == $c6"
  8099                          }
  8100                          !if (<ERROR) != $87 {
  8101                              !error "Assertion failed: <ERROR == $87"
  8102                          }
  8103                          !if (<GCTIME) != $20 {
  8104                              !error "Assertion failed: <GCTIME == $20"
  8105                          }
  8106                          !if (<HILISP) != $00 {
  8107                              !error "Assertion failed: <HILISP == $00"
  8108                          }
  8109                          !if (<HIWARM) != $7b {
  8110                              !error "Assertion failed: <HIWARM == $7b"
  8111                          }
  8112                          !if (<KBD) != $ff {
  8113                              !error "Assertion failed: <KBD == $ff"
  8114                          }
  8115                          !if (<LAMBDA) != $18 {
  8116                              !error "Assertion failed: <LAMBDA == $18"
  8117                          }
  8118                          !if (<LISPST) != $00 {
  8119                              !error "Assertion failed: <LISPST == $00"
  8120                          }
  8121                          !if (<NAMBUF) != $00 {
  8122                              !error "Assertion failed: <NAMBUF == $00"
  8123                          }
  8124                          !if (<NIL) != $24 {
  8125                              !error "Assertion failed: <NIL == $24"
  8126                          }
  8127                          !if (<PRINGO+2) != $25 {
  8128                              !error "Assertion failed: <PRINGO+2 == $25"
  8129                          }
  8130                          !if (<QUOTE) != $2d {
  8131                              !error "Assertion failed: <QUOTE == $2d"
  8132                          }
  8133                          !if (<RELTAB) != $00 {
  8134                              !error "Assertion failed: <RELTAB == $00"
  8135                          }
  8136                          !if (<TIMEW) != $25 {
  8137                              !error "Assertion failed: <TIMEW == $25"
  8138                          }
  8139                          !if (<TRUE) != $11 {
  8140                              !error "Assertion failed: <TRUE == $11"
  8141                          }
  8142                          !if (<VECTAB) != $00 {
  8143                              !error "Assertion failed: <VECTAB == $00"
  8144                          }
  8145                          !if (<VECTAB+2) != $02 {
  8146                              !error "Assertion failed: <VECTAB+2 == $02"
  8147                          }
  8148                          !if (<WRITGO+2) != $eb {
  8149                              !error "Assertion failed: <WRITGO+2 == $eb"
  8150                          }
  8151                          !if (<ZA) != $02 {
  8152                              !error "Assertion failed: <ZA == $02"
  8153                          }
  8154                          !if (>(DOSBUF)) != $07 {
  8155                              !error "Assertion failed: >(DOSBUF) == $07"
  8156                          }
  8157                          !if (>(GOSTR)) != $82 {
  8158                              !error "Assertion failed: >(GOSTR) == $82"
  8159                          }
  8160                          !if (>(INCB)) != $82 {
  8161                              !error "Assertion failed: >(INCB) == $82"
  8162                          }
  8163                          !if (>(IODCB)) != $04 {
  8164                              !error "Assertion failed: >(IODCB) == $04"
  8165                          }
  8166                          !if (>(LISTR)) != $82 {
  8167                              !error "Assertion failed: >(LISTR) == $82"
  8168                          }
  8169                          !if (>(OSINFO)) != $04 {
  8170                              !error "Assertion failed: >(OSINFO) == $04"
  8171                          }
  8172                          !if (>(OSWBUF)) != $06 {
  8173                              !error "Assertion failed: >(OSWBUF) == $06"
  8174                          }
  8175                          !if (>(PWORD)) != $04 {
  8176                              !error "Assertion failed: >(PWORD) == $04"
  8177                          }
  8178                          !if (>(TIMEW)) != $04 {
  8179                              !error "Assertion failed: >(TIMEW) == $04"
  8180                          }
  8181                          !if (>(TIMZER)) != $82 {
  8182                              !error "Assertion failed: >(TIMZER) == $82"
  8183                          }
  8184                          !if (>BACALL+1) != $8f {
  8185                              !error "Assertion failed: >BACALL+1 == $8f"
  8186                          }
  8187                          !if (>DWARF) != $9e {
  8188                              !error "Assertion failed: >DWARF == $9e"
  8189                          }
  8190                          !if (>ELFIN-1) != $9f {
  8191                              !error "Assertion failed: >ELFIN-1 == $9f"
  8192                          }
  8193                          !if (>ERROR) != $9e {
  8194                              !error "Assertion failed: >ERROR == $9e"
  8195                          }
  8196                          !if (>GCTIME) != $04 {
  8197                              !error "Assertion failed: >GCTIME == $04"
  8198                          }
  8199                          !if (>HILISP) != $d7 {
  8200                              !error "Assertion failed: >HILISP == $d7"
  8201                          }
  8202                          !if (>HILISP-LISVAL) != $57 {
  8203                              !error "Assertion failed: >HILISP-LISVAL == $57"
  8204                          }
  8205                          !if (>HIWARM) != $d9 {
  8206                              !error "Assertion failed: >HIWARM == $d9"
  8207                          }
  8208                          !if (>KBD) != $00 {
  8209                              !error "Assertion failed: >KBD == $00"
  8210                          }
  8211                          !if (>LISPST) != $80 {
  8212                              !error "Assertion failed: >LISPST == $80"
  8213                          }
  8214                          !if (>NAMBUF) != $06 {
  8215                              !error "Assertion failed: >NAMBUF == $06"
  8216                          }
  8217                          !if (>PRINGO) != $8b {
  8218                              !error "Assertion failed: >PRINGO == $8b"
  8219                          }
  8220                          !if (>RELTAB) != $b8 {
  8221                              !error "Assertion failed: >RELTAB == $b8"
  8222                          }
  8223                          !if (>TIMEW) != $04 {
  8224                              !error "Assertion failed: >TIMEW == $04"
  8225                          }
  8226                          !if (>VECTAB) != $a4 {
  8227                              !error "Assertion failed: >VECTAB == $a4"
  8228                          }
  8229                          !if (>WRITGO) != $8a {
  8230                              !error "Assertion failed: >WRITGO == $8a"
  8231                          }
  8232                          !if (ACL) != $72 {
  8233                              !error "Assertion failed: ACL == $72"
  8234                          }
  8235                          !if (AREEXT) != $00 {
  8236                              !error "Assertion failed: AREEXT == $00"
  8237                          }
  8238                          !if (ARGINF) != $90 {
  8239                              !error "Assertion failed: ARGINF == $90"
  8240                          }
  8241                          !if (ARGOFF) != $6b {
  8242                              !error "Assertion failed: ARGOFF == $6b"
  8243                          }
  8244                          !if (AUXL) != $76 {
  8245                              !error "Assertion failed: AUXL == $76"
  8246                          }
  8247                          !if (BINDER) != $32 {
  8248                              !error "Assertion failed: BINDER == $32"
  8249                          }
  8250                          !if (CHARF) != $00 {
  8251                              !error "Assertion failed: CHARF == $00"
  8252                          }
  8253                          !if (COLDST) != $00 {
  8254                              !error "Assertion failed: COLDST == $00"
  8255                          }
  8256                          !if (COLOFF) != $3a {
  8257                              !error "Assertion failed: COLOFF == $3a"
  8258                          }
  8259                          !if (CPYOFF-ROMHDR) != $12 {
  8260                              !error "Assertion failed: CPYOFF-ROMHDR == $12"
  8261                          }
  8262                          !if (ERROFF) != $5d {
  8263                              !error "Assertion failed: ERROFF == $5d"
  8264                          }
  8265                          !if (EVOFF) != $00 {
  8266                              !error "Assertion failed: EVOFF == $00"
  8267                          }
  8268                          !if (FROFF) != $4c {
  8269                              !error "Assertion failed: FROFF == $4c"
  8270                          }
  8271                          !if (FSUBRF) != $0c {
  8272                              !error "Assertion failed: FSUBRF == $0c"
  8273                          }
  8274                          !if (GCOFF) != $33 {
  8275                              !error "Assertion failed: GCOFF == $33"
  8276                          }
  8277                          !if (HLPOFF) != $8e {
  8278                              !error "Assertion failed: HLPOFF == $8e"
  8279                          }
  8280                          !if (IMALEN) != $12 {
  8281                              !error "Assertion failed: IMALEN == $12"
  8282                          }
  8283                          !if (LISTF) != $80 {
  8284                              !error "Assertion failed: LISTF == $80"
  8285                          }
  8286                          !if (MOVE_OFFSET + $8002) != $d702 {
  8287                              !error "Assertion failed: MOVE_OFFSET + $8002 == $d702"
  8288                          }
  8289                          !if (MOVE_OFFSET + $8005) != $d705 {
  8290                              !error "Assertion failed: MOVE_OFFSET + $8005 == $d705"
  8291                          }
  8292                          !if (MOVE_OFFSET + $8050) != $d750 {
  8293                              !error "Assertion failed: MOVE_OFFSET + $8050 == $d750"
  8294                          }
  8295                          !if (MOVE_OFFSET + $807b) != $d77b {
  8296                              !error "Assertion failed: MOVE_OFFSET + $807b == $d77b"
  8297                          }
  8298                          !if (MOVE_OFFSET + $80a3) != $d7a3 {
  8299                              !error "Assertion failed: MOVE_OFFSET + $80a3 == $d7a3"
  8300                          }
  8301                          !if (MOVE_OFFSET + $80a9) != $d7a9 {
  8302                              !error "Assertion failed: MOVE_OFFSET + $80a9 == $d7a9"
  8303                          }
  8304                          !if (MOVE_OFFSET + $80b5) != $d7b5 {
  8305                              !error "Assertion failed: MOVE_OFFSET + $80b5 == $d7b5"
  8306                          }
  8307                          !if (MOVE_OFFSET + $80b8) != $d7b8 {
  8308                              !error "Assertion failed: MOVE_OFFSET + $80b8 == $d7b8"
  8309                          }
  8310                          !if (MOVE_OFFSET + $80c5) != $d7c5 {
  8311                              !error "Assertion failed: MOVE_OFFSET + $80c5 == $d7c5"
  8312                          }
  8313                          !if (MOVE_OFFSET + $80fc) != $d7fc {
  8314                              !error "Assertion failed: MOVE_OFFSET + $80fc == $d7fc"
  8315                          }
  8316                          !if (MOVE_OFFSET + $8132) != $d832 {
  8317                              !error "Assertion failed: MOVE_OFFSET + $8132 == $d832"
  8318                          }
  8319                          !if (MOVE_OFFSET + $8149) != $d849 {
  8320                              !error "Assertion failed: MOVE_OFFSET + $8149 == $d849"
  8321                          }
  8322                          !if (MOVE_OFFSET + $8284) != $d984 {
  8323                              !error "Assertion failed: MOVE_OFFSET + $8284 == $d984"
  8324                          }
  8325                          !if (MOVE_OFFSET + $8291) != $d991 {
  8326                              !error "Assertion failed: MOVE_OFFSET + $8291 == $d991"
  8327                          }
  8328                          !if (MOVE_OFFSET + $8294) != $d994 {
  8329                              !error "Assertion failed: MOVE_OFFSET + $8294 == $d994"
  8330                          }
  8331                          !if (MOVE_OFFSET + $829e) != $d99e {
  8332                              !error "Assertion failed: MOVE_OFFSET + $829e == $d99e"
  8333                          }
  8334                          !if (MOVE_OFFSET + $82b3) != $d9b3 {
  8335                              !error "Assertion failed: MOVE_OFFSET + $82b3 == $d9b3"
  8336                          }
  8337                          !if (MOVE_OFFSET + $82bb) != $d9bb {
  8338                              !error "Assertion failed: MOVE_OFFSET + $82bb == $d9bb"
  8339                          }
  8340                          !if (MOVE_OFFSET + $82be) != $d9be {
  8341                              !error "Assertion failed: MOVE_OFFSET + $82be == $d9be"
  8342                          }
  8343                          !if (MOVE_OFFSET + $82c2) != $d9c2 {
  8344                              !error "Assertion failed: MOVE_OFFSET + $82c2 == $d9c2"
  8345                          }
  8346                          !if (MOVE_OFFSET + $82d8) != $d9d8 {
  8347                              !error "Assertion failed: MOVE_OFFSET + $82d8 == $d9d8"
  8348                          }
  8349                          !if (MOVE_OFFSET + $82dd) != $d9dd {
  8350                              !error "Assertion failed: MOVE_OFFSET + $82dd == $d9dd"
  8351                          }
  8352                          !if (MOVE_OFFSET + $82e0) != $d9e0 {
  8353                              !error "Assertion failed: MOVE_OFFSET + $82e0 == $d9e0"
  8354                          }
  8355                          !if (MOVE_OFFSET + $82e3) != $d9e3 {
  8356                              !error "Assertion failed: MOVE_OFFSET + $82e3 == $d9e3"
  8357                          }
  8358                          !if (MOVE_OFFSET + $82e8) != $d9e8 {
  8359                              !error "Assertion failed: MOVE_OFFSET + $82e8 == $d9e8"
  8360                          }
  8361                          !if (MOVE_OFFSET + $82eb) != $d9eb {
  8362                              !error "Assertion failed: MOVE_OFFSET + $82eb == $d9eb"
  8363                          }
  8364                          !if (MOVE_OFFSET + $82ee) != $d9ee {
  8365                              !error "Assertion failed: MOVE_OFFSET + $82ee == $d9ee"
  8366                          }
  8367                          !if (MOVE_OFFSET + $83af) != $daaf {
  8368                              !error "Assertion failed: MOVE_OFFSET + $83af == $daaf"
  8369                          }
  8370                          !if (MOVE_OFFSET + $8402) != $db02 {
  8371                              !error "Assertion failed: MOVE_OFFSET + $8402 == $db02"
  8372                          }
  8373                          !if (MOVE_OFFSET + $8475) != $db75 {
  8374                              !error "Assertion failed: MOVE_OFFSET + $8475 == $db75"
  8375                          }
  8376                          !if (MOVE_OFFSET + $84bb) != $dbbb {
  8377                              !error "Assertion failed: MOVE_OFFSET + $84bb == $dbbb"
  8378                          }
  8379                          !if (MOVE_OFFSET + $84e3) != $dbe3 {
  8380                              !error "Assertion failed: MOVE_OFFSET + $84e3 == $dbe3"
  8381                          }
  8382                          !if (MOVE_OFFSET + $84e6) != $dbe6 {
  8383                              !error "Assertion failed: MOVE_OFFSET + $84e6 == $dbe6"
  8384                          }
  8385                          !if (MOVE_OFFSET + $84fb) != $dbfb {
  8386                              !error "Assertion failed: MOVE_OFFSET + $84fb == $dbfb"
  8387                          }
  8388                          !if (MOVE_OFFSET + $8502) != $dc02 {
  8389                              !error "Assertion failed: MOVE_OFFSET + $8502 == $dc02"
  8390                          }
  8391                          !if (MOVE_OFFSET + $8508) != $dc08 {
  8392                              !error "Assertion failed: MOVE_OFFSET + $8508 == $dc08"
  8393                          }
  8394                          !if (MOVE_OFFSET + $8538) != $dc38 {
  8395                              !error "Assertion failed: MOVE_OFFSET + $8538 == $dc38"
  8396                          }
  8397                          !if (MOVE_OFFSET + $853b) != $dc3b {
  8398                              !error "Assertion failed: MOVE_OFFSET + $853b == $dc3b"
  8399                          }
  8400                          !if (MOVE_OFFSET + $8571) != $dc71 {
  8401                              !error "Assertion failed: MOVE_OFFSET + $8571 == $dc71"
  8402                          }
  8403                          !if (MOVE_OFFSET + $858a) != $dc8a {
  8404                              !error "Assertion failed: MOVE_OFFSET + $858a == $dc8a"
  8405                          }
  8406                          !if (MOVE_OFFSET + $858d) != $dc8d {
  8407                              !error "Assertion failed: MOVE_OFFSET + $858d == $dc8d"
  8408                          }
  8409                          !if (MOVE_OFFSET + $8590) != $dc90 {
  8410                              !error "Assertion failed: MOVE_OFFSET + $8590 == $dc90"
  8411                          }
  8412                          !if (MOVE_OFFSET + $8593) != $dc93 {
  8413                              !error "Assertion failed: MOVE_OFFSET + $8593 == $dc93"
  8414                          }
  8415                          !if (MOVE_OFFSET + $8596) != $dc96 {
  8416                              !error "Assertion failed: MOVE_OFFSET + $8596 == $dc96"
  8417                          }
  8418                          !if (MOVE_OFFSET + $85c9) != $dcc9 {
  8419                              !error "Assertion failed: MOVE_OFFSET + $85c9 == $dcc9"
  8420                          }
  8421                          !if (MOVE_OFFSET + $85e5) != $dce5 {
  8422                              !error "Assertion failed: MOVE_OFFSET + $85e5 == $dce5"
  8423                          }
  8424                          !if (MOVE_OFFSET + $8636) != $dd36 {
  8425                              !error "Assertion failed: MOVE_OFFSET + $8636 == $dd36"
  8426                          }
  8427                          !if (MOVE_OFFSET + $869a) != $dd9a {
  8428                              !error "Assertion failed: MOVE_OFFSET + $869a == $dd9a"
  8429                          }
  8430                          !if (MOVE_OFFSET + $86b5) != $ddb5 {
  8431                              !error "Assertion failed: MOVE_OFFSET + $86b5 == $ddb5"
  8432                          }
  8433                          !if (MOVE_OFFSET + $86b8) != $ddb8 {
  8434                              !error "Assertion failed: MOVE_OFFSET + $86b8 == $ddb8"
  8435                          }
  8436                          !if (MOVE_OFFSET + $86c1) != $ddc1 {
  8437                              !error "Assertion failed: MOVE_OFFSET + $86c1 == $ddc1"
  8438                          }
  8439                          !if (MOVE_OFFSET + $8710) != $de10 {
  8440                              !error "Assertion failed: MOVE_OFFSET + $8710 == $de10"
  8441                          }
  8442                          !if (MOVE_OFFSET + $8713) != $de13 {
  8443                              !error "Assertion failed: MOVE_OFFSET + $8713 == $de13"
  8444                          }
  8445                          !if (MOVE_OFFSET + $872d) != $de2d {
  8446                              !error "Assertion failed: MOVE_OFFSET + $872d == $de2d"
  8447                          }
  8448                          !if (MOVE_OFFSET + $873a) != $de3a {
  8449                              !error "Assertion failed: MOVE_OFFSET + $873a == $de3a"
  8450                          }
  8451                          !if (MOVE_OFFSET + $8755) != $de55 {
  8452                              !error "Assertion failed: MOVE_OFFSET + $8755 == $de55"
  8453                          }
  8454                          !if (MOVE_OFFSET + $8762) != $de62 {
  8455                              !error "Assertion failed: MOVE_OFFSET + $8762 == $de62"
  8456                          }
  8457                          !if (MOVE_OFFSET + $876b) != $de6b {
  8458                              !error "Assertion failed: MOVE_OFFSET + $876b == $de6b"
  8459                          }
  8460                          !if (MOVE_OFFSET + $879c) != $de9c {
  8461                              !error "Assertion failed: MOVE_OFFSET + $879c == $de9c"
  8462                          }
  8463                          !if (MOVE_OFFSET + $87d5) != $ded5 {
  8464                              !error "Assertion failed: MOVE_OFFSET + $87d5 == $ded5"
  8465                          }
  8466                          !if (MOVE_OFFSET + $87d8) != $ded8 {
  8467                              !error "Assertion failed: MOVE_OFFSET + $87d8 == $ded8"
  8468                          }
  8469                          !if (MOVE_OFFSET + $87f4) != $def4 {
  8470                              !error "Assertion failed: MOVE_OFFSET + $87f4 == $def4"
  8471                          }
  8472                          !if (MOVE_OFFSET + $87f7) != $def7 {
  8473                              !error "Assertion failed: MOVE_OFFSET + $87f7 == $def7"
  8474                          }
  8475                          !if (MOVE_OFFSET + $880d) != $df0d {
  8476                              !error "Assertion failed: MOVE_OFFSET + $880d == $df0d"
  8477                          }
  8478                          !if (MOVE_OFFSET + $8822) != $df22 {
  8479                              !error "Assertion failed: MOVE_OFFSET + $8822 == $df22"
  8480                          }
  8481                          !if (MOVE_OFFSET + $8825) != $df25 {
  8482                              !error "Assertion failed: MOVE_OFFSET + $8825 == $df25"
  8483                          }
  8484                          !if (MOVE_OFFSET + $8834) != $df34 {
  8485                              !error "Assertion failed: MOVE_OFFSET + $8834 == $df34"
  8486                          }
  8487                          !if (MOVE_OFFSET + $8847) != $df47 {
  8488                              !error "Assertion failed: MOVE_OFFSET + $8847 == $df47"
  8489                          }
  8490                          !if (MOVE_OFFSET + $884e) != $df4e {
  8491                              !error "Assertion failed: MOVE_OFFSET + $884e == $df4e"
  8492                          }
  8493                          !if (MOVE_OFFSET + $8857) != $df57 {
  8494                              !error "Assertion failed: MOVE_OFFSET + $8857 == $df57"
  8495                          }
  8496                          !if (MOVE_OFFSET + $885c) != $df5c {
  8497                              !error "Assertion failed: MOVE_OFFSET + $885c == $df5c"
  8498                          }
  8499                          !if (MOVE_OFFSET + $8861) != $df61 {
  8500                              !error "Assertion failed: MOVE_OFFSET + $8861 == $df61"
  8501                          }
  8502                          !if (MOVE_OFFSET + $8866) != $df66 {
  8503                              !error "Assertion failed: MOVE_OFFSET + $8866 == $df66"
  8504                          }
  8505                          !if (MOVE_OFFSET + $8871) != $df71 {
  8506                              !error "Assertion failed: MOVE_OFFSET + $8871 == $df71"
  8507                          }
  8508                          !if (MOVE_OFFSET + $887c) != $df7c {
  8509                              !error "Assertion failed: MOVE_OFFSET + $887c == $df7c"
  8510                          }
  8511                          !if (MOVE_OFFSET + $8883) != $df83 {
  8512                              !error "Assertion failed: MOVE_OFFSET + $8883 == $df83"
  8513                          }
  8514                          !if (MOVE_OFFSET + $8893) != $df93 {
  8515                              !error "Assertion failed: MOVE_OFFSET + $8893 == $df93"
  8516                          }
  8517                          !if (MOVE_OFFSET + $8896) != $df96 {
  8518                              !error "Assertion failed: MOVE_OFFSET + $8896 == $df96"
  8519                          }
  8520                          !if (MOVE_OFFSET + $88c0) != $dfc0 {
  8521                              !error "Assertion failed: MOVE_OFFSET + $88c0 == $dfc0"
  8522                          }
  8523                          !if (MOVE_OFFSET + $88c7) != $dfc7 {
  8524                              !error "Assertion failed: MOVE_OFFSET + $88c7 == $dfc7"
  8525                          }
  8526                          !if (MOVE_OFFSET + $88ca) != $dfca {
  8527                              !error "Assertion failed: MOVE_OFFSET + $88ca == $dfca"
  8528                          }
  8529                          !if (MOVE_OFFSET + $88d8) != $dfd8 {
  8530                              !error "Assertion failed: MOVE_OFFSET + $88d8 == $dfd8"
  8531                          }
  8532                          !if (MOVE_OFFSET + $88db) != $dfdb {
  8533                              !error "Assertion failed: MOVE_OFFSET + $88db == $dfdb"
  8534                          }
  8535                          !if (MOVE_OFFSET + $88de) != $dfde {
  8536                              !error "Assertion failed: MOVE_OFFSET + $88de == $dfde"
  8537                          }
  8538                          !if (MOVE_OFFSET + $88e1) != $dfe1 {
  8539                              !error "Assertion failed: MOVE_OFFSET + $88e1 == $dfe1"
  8540                          }
  8541                          !if (MOVE_OFFSET + $88e4) != $dfe4 {
  8542                              !error "Assertion failed: MOVE_OFFSET + $88e4 == $dfe4"
  8543                          }
  8544                          !if (MOVE_OFFSET + $88e7) != $dfe7 {
  8545                              !error "Assertion failed: MOVE_OFFSET + $88e7 == $dfe7"
  8546                          }
  8547                          !if (MOVE_OFFSET + $88f4) != $dff4 {
  8548                              !error "Assertion failed: MOVE_OFFSET + $88f4 == $dff4"
  8549                          }
  8550                          !if (MOVE_OFFSET + $8913) != $e013 {
  8551                              !error "Assertion failed: MOVE_OFFSET + $8913 == $e013"
  8552                          }
  8553                          !if (MOVE_OFFSET + $894d) != $e04d {
  8554                              !error "Assertion failed: MOVE_OFFSET + $894d == $e04d"
  8555                          }
  8556                          !if (MOVE_OFFSET + $89b8) != $e0b8 {
  8557                              !error "Assertion failed: MOVE_OFFSET + $89b8 == $e0b8"
  8558                          }
  8559                          !if (MOVE_OFFSET + $89c5) != $e0c5 {
  8560                              !error "Assertion failed: MOVE_OFFSET + $89c5 == $e0c5"
  8561                          }
  8562                          !if (MOVE_OFFSET + $89f1) != $e0f1 {
  8563                              !error "Assertion failed: MOVE_OFFSET + $89f1 == $e0f1"
  8564                          }
  8565                          !if (MOVE_OFFSET + $8a4d) != $e14d {
  8566                              !error "Assertion failed: MOVE_OFFSET + $8a4d == $e14d"
  8567                          }
  8568                          !if (MOVE_OFFSET + $8a54) != $e154 {
  8569                              !error "Assertion failed: MOVE_OFFSET + $8a54 == $e154"
  8570                          }
  8571                          !if (MOVE_OFFSET + $8a9e) != $e19e {
  8572                              !error "Assertion failed: MOVE_OFFSET + $8a9e == $e19e"
  8573                          }
  8574                          !if (MOVE_OFFSET + $8aa8) != $e1a8 {
  8575                              !error "Assertion failed: MOVE_OFFSET + $8aa8 == $e1a8"
  8576                          }
  8577                          !if (MOVE_OFFSET + $8aad) != $e1ad {
  8578                              !error "Assertion failed: MOVE_OFFSET + $8aad == $e1ad"
  8579                          }
  8580                          !if (MOVE_OFFSET + $8abb) != $e1bb {
  8581                              !error "Assertion failed: MOVE_OFFSET + $8abb == $e1bb"
  8582                          }
  8583                          !if (MOVE_OFFSET + $8ad9) != $e1d9 {
  8584                              !error "Assertion failed: MOVE_OFFSET + $8ad9 == $e1d9"
  8585                          }
  8586                          !if (MOVE_OFFSET + $8ade) != $e1de {
  8587                              !error "Assertion failed: MOVE_OFFSET + $8ade == $e1de"
  8588                          }
  8589                          !if (MOVE_OFFSET + $8aeb) != $e1eb {
  8590                              !error "Assertion failed: MOVE_OFFSET + $8aeb == $e1eb"
  8591                          }
  8592                          !if (MOVE_OFFSET + $8af0) != $e1f0 {
  8593                              !error "Assertion failed: MOVE_OFFSET + $8af0 == $e1f0"
  8594                          }
  8595                          !if (MOVE_OFFSET + $8af4) != $e1f4 {
  8596                              !error "Assertion failed: MOVE_OFFSET + $8af4 == $e1f4"
  8597                          }
  8598                          !if (MOVE_OFFSET + $8b00) != $e200 {
  8599                              !error "Assertion failed: MOVE_OFFSET + $8b00 == $e200"
  8600                          }
  8601                          !if (MOVE_OFFSET + $8b03) != $e203 {
  8602                              !error "Assertion failed: MOVE_OFFSET + $8b03 == $e203"
  8603                          }
  8604                          !if (MOVE_OFFSET + $8b13) != $e213 {
  8605                              !error "Assertion failed: MOVE_OFFSET + $8b13 == $e213"
  8606                          }
  8607                          !if (MOVE_OFFSET + $8b18) != $e218 {
  8608                              !error "Assertion failed: MOVE_OFFSET + $8b18 == $e218"
  8609                          }
  8610                          !if (MOVE_OFFSET + $8b25) != $e225 {
  8611                              !error "Assertion failed: MOVE_OFFSET + $8b25 == $e225"
  8612                          }
  8613                          !if (MOVE_OFFSET + $8b28) != $e228 {
  8614                              !error "Assertion failed: MOVE_OFFSET + $8b28 == $e228"
  8615                          }
  8616                          !if (MOVE_OFFSET + $8b49) != $e249 {
  8617                              !error "Assertion failed: MOVE_OFFSET + $8b49 == $e249"
  8618                          }
  8619                          !if (MOVE_OFFSET + $8b58) != $e258 {
  8620                              !error "Assertion failed: MOVE_OFFSET + $8b58 == $e258"
  8621                          }
  8622                          !if (MOVE_OFFSET + $8b6e) != $e26e {
  8623                              !error "Assertion failed: MOVE_OFFSET + $8b6e == $e26e"
  8624                          }
  8625                          !if (MOVE_OFFSET + $8b88) != $e288 {
  8626                              !error "Assertion failed: MOVE_OFFSET + $8b88 == $e288"
  8627                          }
  8628                          !if (MOVE_OFFSET + $8b93) != $e293 {
  8629                              !error "Assertion failed: MOVE_OFFSET + $8b93 == $e293"
  8630                          }
  8631                          !if (MOVE_OFFSET + $8b9e) != $e29e {
  8632                              !error "Assertion failed: MOVE_OFFSET + $8b9e == $e29e"
  8633                          }
  8634                          !if (MOVE_OFFSET + $8ba1) != $e2a1 {
  8635                              !error "Assertion failed: MOVE_OFFSET + $8ba1 == $e2a1"
  8636                          }
  8637                          !if (MOVE_OFFSET + $8bb0) != $e2b0 {
  8638                              !error "Assertion failed: MOVE_OFFSET + $8bb0 == $e2b0"
  8639                          }
  8640                          !if (MOVE_OFFSET + $8bb3) != $e2b3 {
  8641                              !error "Assertion failed: MOVE_OFFSET + $8bb3 == $e2b3"
  8642                          }
  8643                          !if (MOVE_OFFSET + $8bb6) != $e2b6 {
  8644                              !error "Assertion failed: MOVE_OFFSET + $8bb6 == $e2b6"
  8645                          }
  8646                          !if (MOVE_OFFSET + $8bcd) != $e2cd {
  8647                              !error "Assertion failed: MOVE_OFFSET + $8bcd == $e2cd"
  8648                          }
  8649                          !if (MOVE_OFFSET + $8bd0) != $e2d0 {
  8650                              !error "Assertion failed: MOVE_OFFSET + $8bd0 == $e2d0"
  8651                          }
  8652                          !if (MOVE_OFFSET + $8bd5) != $e2d5 {
  8653                              !error "Assertion failed: MOVE_OFFSET + $8bd5 == $e2d5"
  8654                          }
  8655                          !if (MOVE_OFFSET + $8bd8) != $e2d8 {
  8656                              !error "Assertion failed: MOVE_OFFSET + $8bd8 == $e2d8"
  8657                          }
  8658                          !if (MOVE_OFFSET + $8bff) != $e2ff {
  8659                              !error "Assertion failed: MOVE_OFFSET + $8bff == $e2ff"
  8660                          }
  8661                          !if (MOVE_OFFSET + $8c04) != $e304 {
  8662                              !error "Assertion failed: MOVE_OFFSET + $8c04 == $e304"
  8663                          }
  8664                          !if (MOVE_OFFSET + $8c12) != $e312 {
  8665                              !error "Assertion failed: MOVE_OFFSET + $8c12 == $e312"
  8666                          }
  8667                          !if (MOVE_OFFSET + $8c15) != $e315 {
  8668                              !error "Assertion failed: MOVE_OFFSET + $8c15 == $e315"
  8669                          }
  8670                          !if (MOVE_OFFSET + $8c23) != $e323 {
  8671                              !error "Assertion failed: MOVE_OFFSET + $8c23 == $e323"
  8672                          }
  8673                          !if (MOVE_OFFSET + $8c26) != $e326 {
  8674                              !error "Assertion failed: MOVE_OFFSET + $8c26 == $e326"
  8675                          }
  8676                          !if (MOVE_OFFSET + $8c2b) != $e32b {
  8677                              !error "Assertion failed: MOVE_OFFSET + $8c2b == $e32b"
  8678                          }
  8679                          !if (MOVE_OFFSET + $8c33) != $e333 {
  8680                              !error "Assertion failed: MOVE_OFFSET + $8c33 == $e333"
  8681                          }
  8682                          !if (MOVE_OFFSET + $8c37) != $e337 {
  8683                              !error "Assertion failed: MOVE_OFFSET + $8c37 == $e337"
  8684                          }
  8685                          !if (MOVE_OFFSET + $8c3a) != $e33a {
  8686                              !error "Assertion failed: MOVE_OFFSET + $8c3a == $e33a"
  8687                          }
  8688                          !if (MOVE_OFFSET + $8c4f) != $e34f {
  8689                              !error "Assertion failed: MOVE_OFFSET + $8c4f == $e34f"
  8690                          }
  8691                          !if (MOVE_OFFSET + $8c56) != $e356 {
  8692                              !error "Assertion failed: MOVE_OFFSET + $8c56 == $e356"
  8693                          }
  8694                          !if (MOVE_OFFSET + $8c6c) != $e36c {
  8695                              !error "Assertion failed: MOVE_OFFSET + $8c6c == $e36c"
  8696                          }
  8697                          !if (MOVE_OFFSET + $8c87) != $e387 {
  8698                              !error "Assertion failed: MOVE_OFFSET + $8c87 == $e387"
  8699                          }
  8700                          !if (MOVE_OFFSET + $8cab) != $e3ab {
  8701                              !error "Assertion failed: MOVE_OFFSET + $8cab == $e3ab"
  8702                          }
  8703                          !if (MOVE_OFFSET + $8ccc) != $e3cc {
  8704                              !error "Assertion failed: MOVE_OFFSET + $8ccc == $e3cc"
  8705                          }
  8706                          !if (MOVE_OFFSET + $8ccf) != $e3cf {
  8707                              !error "Assertion failed: MOVE_OFFSET + $8ccf == $e3cf"
  8708                          }
  8709                          !if (MOVE_OFFSET + $8cd2) != $e3d2 {
  8710                              !error "Assertion failed: MOVE_OFFSET + $8cd2 == $e3d2"
  8711                          }
  8712                          !if (MOVE_OFFSET + $8cdf) != $e3df {
  8713                              !error "Assertion failed: MOVE_OFFSET + $8cdf == $e3df"
  8714                          }
  8715                          !if (MOVE_OFFSET + $8cf4) != $e3f4 {
  8716                              !error "Assertion failed: MOVE_OFFSET + $8cf4 == $e3f4"
  8717                          }
  8718                          !if (MOVE_OFFSET + $8cf7) != $e3f7 {
  8719                              !error "Assertion failed: MOVE_OFFSET + $8cf7 == $e3f7"
  8720                          }
  8721                          !if (MOVE_OFFSET + $8d16) != $e416 {
  8722                              !error "Assertion failed: MOVE_OFFSET + $8d16 == $e416"
  8723                          }
  8724                          !if (MOVE_OFFSET + $8d27) != $e427 {
  8725                              !error "Assertion failed: MOVE_OFFSET + $8d27 == $e427"
  8726                          }
  8727                          !if (MOVE_OFFSET + $8d2e) != $e42e {
  8728                              !error "Assertion failed: MOVE_OFFSET + $8d2e == $e42e"
  8729                          }
  8730                          !if (MOVE_OFFSET + $8d31) != $e431 {
  8731                              !error "Assertion failed: MOVE_OFFSET + $8d31 == $e431"
  8732                          }
  8733                          !if (MOVE_OFFSET + $8d3a) != $e43a {
  8734                              !error "Assertion failed: MOVE_OFFSET + $8d3a == $e43a"
  8735                          }
  8736                          !if (MOVE_OFFSET + $8d43) != $e443 {
  8737                              !error "Assertion failed: MOVE_OFFSET + $8d43 == $e443"
  8738                          }
  8739                          !if (MOVE_OFFSET + $8d4c) != $e44c {
  8740                              !error "Assertion failed: MOVE_OFFSET + $8d4c == $e44c"
  8741                          }
  8742                          !if (MOVE_OFFSET + $8d4f) != $e44f {
  8743                              !error "Assertion failed: MOVE_OFFSET + $8d4f == $e44f"
  8744                          }
  8745                          !if (MOVE_OFFSET + $8d52) != $e452 {
  8746                              !error "Assertion failed: MOVE_OFFSET + $8d52 == $e452"
  8747                          }
  8748                          !if (MOVE_OFFSET + $8daf) != $e4af {
  8749                              !error "Assertion failed: MOVE_OFFSET + $8daf == $e4af"
  8750                          }
  8751                          !if (MOVE_OFFSET + $8dbe) != $e4be {
  8752                              !error "Assertion failed: MOVE_OFFSET + $8dbe == $e4be"
  8753                          }
  8754                          !if (MOVE_OFFSET + $8dc3) != $e4c3 {
  8755                              !error "Assertion failed: MOVE_OFFSET + $8dc3 == $e4c3"
  8756                          }
  8757                          !if (MOVE_OFFSET + $8dc6) != $e4c6 {
  8758                              !error "Assertion failed: MOVE_OFFSET + $8dc6 == $e4c6"
  8759                          }
  8760                          !if (MOVE_OFFSET + $8dde) != $e4de {
  8761                              !error "Assertion failed: MOVE_OFFSET + $8dde == $e4de"
  8762                          }
  8763                          !if (MOVE_OFFSET + $8de1) != $e4e1 {
  8764                              !error "Assertion failed: MOVE_OFFSET + $8de1 == $e4e1"
  8765                          }
  8766                          !if (MOVE_OFFSET + $8de8) != $e4e8 {
  8767                              !error "Assertion failed: MOVE_OFFSET + $8de8 == $e4e8"
  8768                          }
  8769                          !if (MOVE_OFFSET + $8def) != $e4ef {
  8770                              !error "Assertion failed: MOVE_OFFSET + $8def == $e4ef"
  8771                          }
  8772                          !if (MOVE_OFFSET + $8df2) != $e4f2 {
  8773                              !error "Assertion failed: MOVE_OFFSET + $8df2 == $e4f2"
  8774                          }
  8775                          !if (MOVE_OFFSET + $8df9) != $e4f9 {
  8776                              !error "Assertion failed: MOVE_OFFSET + $8df9 == $e4f9"
  8777                          }
  8778                          !if (MOVE_OFFSET + $8e12) != $e512 {
  8779                              !error "Assertion failed: MOVE_OFFSET + $8e12 == $e512"
  8780                          }
  8781                          !if (MOVE_OFFSET + $8e1d) != $e51d {
  8782                              !error "Assertion failed: MOVE_OFFSET + $8e1d == $e51d"
  8783                          }
  8784                          !if (MOVE_OFFSET + $8e20) != $e520 {
  8785                              !error "Assertion failed: MOVE_OFFSET + $8e20 == $e520"
  8786                          }
  8787                          !if (MOVE_OFFSET + $8e33) != $e533 {
  8788                              !error "Assertion failed: MOVE_OFFSET + $8e33 == $e533"
  8789                          }
  8790                          !if (MOVE_OFFSET + $8e36) != $e536 {
  8791                              !error "Assertion failed: MOVE_OFFSET + $8e36 == $e536"
  8792                          }
  8793                          !if (MOVE_OFFSET + $8e39) != $e539 {
  8794                              !error "Assertion failed: MOVE_OFFSET + $8e39 == $e539"
  8795                          }
  8796                          !if (MOVE_OFFSET + $8e3c) != $e53c {
  8797                              !error "Assertion failed: MOVE_OFFSET + $8e3c == $e53c"
  8798                          }
  8799                          !if (MOVE_OFFSET + $8e49) != $e549 {
  8800                              !error "Assertion failed: MOVE_OFFSET + $8e49 == $e549"
  8801                          }
  8802                          !if (MOVE_OFFSET + $8e4c) != $e54c {
  8803                              !error "Assertion failed: MOVE_OFFSET + $8e4c == $e54c"
  8804                          }
  8805                          !if (MOVE_OFFSET + $8e5a) != $e55a {
  8806                              !error "Assertion failed: MOVE_OFFSET + $8e5a == $e55a"
  8807                          }
  8808                          !if (MOVE_OFFSET + $8e7a) != $e57a {
  8809                              !error "Assertion failed: MOVE_OFFSET + $8e7a == $e57a"
  8810                          }
  8811                          !if (MOVE_OFFSET + $8ea2) != $e5a2 {
  8812                              !error "Assertion failed: MOVE_OFFSET + $8ea2 == $e5a2"
  8813                          }
  8814                          !if (MOVE_OFFSET + $8ea5) != $e5a5 {
  8815                              !error "Assertion failed: MOVE_OFFSET + $8ea5 == $e5a5"
  8816                          }
  8817                          !if (MOVE_OFFSET + $8ebf) != $e5bf {
  8818                              !error "Assertion failed: MOVE_OFFSET + $8ebf == $e5bf"
  8819                          }
  8820                          !if (MOVE_OFFSET + $8ecc) != $e5cc {
  8821                              !error "Assertion failed: MOVE_OFFSET + $8ecc == $e5cc"
  8822                          }
  8823                          !if (MOVE_OFFSET + $8ee7) != $e5e7 {
  8824                              !error "Assertion failed: MOVE_OFFSET + $8ee7 == $e5e7"
  8825                          }
  8826                          !if (MOVE_OFFSET + $8eea) != $e5ea {
  8827                              !error "Assertion failed: MOVE_OFFSET + $8eea == $e5ea"
  8828                          }
  8829                          !if (MOVE_OFFSET + $8f09) != $e609 {
  8830                              !error "Assertion failed: MOVE_OFFSET + $8f09 == $e609"
  8831                          }
  8832                          !if (MOVE_OFFSET + $8f1e) != $e61e {
  8833                              !error "Assertion failed: MOVE_OFFSET + $8f1e == $e61e"
  8834                          }
  8835                          !if (MOVE_OFFSET + $8f21) != $e621 {
  8836                              !error "Assertion failed: MOVE_OFFSET + $8f21 == $e621"
  8837                          }
  8838                          !if (MOVE_OFFSET + $8f5e) != $e65e {
  8839                              !error "Assertion failed: MOVE_OFFSET + $8f5e == $e65e"
  8840                          }
  8841                          !if (MOVE_OFFSET + $8f73) != $e673 {
  8842                              !error "Assertion failed: MOVE_OFFSET + $8f73 == $e673"
  8843                          }
  8844                          !if (MOVE_OFFSET + $8f76) != $e676 {
  8845                              !error "Assertion failed: MOVE_OFFSET + $8f76 == $e676"
  8846                          }
  8847                          !if (MOVE_OFFSET + $8f79) != $e679 {
  8848                              !error "Assertion failed: MOVE_OFFSET + $8f79 == $e679"
  8849                          }
  8850                          !if (MOVE_OFFSET + $8f7c) != $e67c {
  8851                              !error "Assertion failed: MOVE_OFFSET + $8f7c == $e67c"
  8852                          }
  8853                          !if (MOVE_OFFSET + $8f7f) != $e67f {
  8854                              !error "Assertion failed: MOVE_OFFSET + $8f7f == $e67f"
  8855                          }
  8856                          !if (MOVE_OFFSET + $8f8b) != $e68b {
  8857                              !error "Assertion failed: MOVE_OFFSET + $8f8b == $e68b"
  8858                          }
  8859                          !if (MOVE_OFFSET + $8fbc) != $e6bc {
  8860                              !error "Assertion failed: MOVE_OFFSET + $8fbc == $e6bc"
  8861                          }
  8862                          !if (MOVE_OFFSET + $8fcb) != $e6cb {
  8863                              !error "Assertion failed: MOVE_OFFSET + $8fcb == $e6cb"
  8864                          }
  8865                          !if (MOVE_OFFSET + $8fcd) != $e6cd {
  8866                              !error "Assertion failed: MOVE_OFFSET + $8fcd == $e6cd"
  8867                          }
  8868                          !if (MOVE_OFFSET + $8fd9) != $e6d9 {
  8869                              !error "Assertion failed: MOVE_OFFSET + $8fd9 == $e6d9"
  8870                          }
  8871                          !if (MOVE_OFFSET + $8fe6) != $e6e6 {
  8872                              !error "Assertion failed: MOVE_OFFSET + $8fe6 == $e6e6"
  8873                          }
  8874                          !if (MOVE_OFFSET + $8fe9) != $e6e9 {
  8875                              !error "Assertion failed: MOVE_OFFSET + $8fe9 == $e6e9"
  8876                          }
  8877                          !if (MOVE_OFFSET + $8ff8) != $e6f8 {
  8878                              !error "Assertion failed: MOVE_OFFSET + $8ff8 == $e6f8"
  8879                          }
  8880                          !if (MOVE_OFFSET + $8ffb) != $e6fb {
  8881                              !error "Assertion failed: MOVE_OFFSET + $8ffb == $e6fb"
  8882                          }
  8883                          !if (MOVE_OFFSET + $9006) != $e706 {
  8884                              !error "Assertion failed: MOVE_OFFSET + $9006 == $e706"
  8885                          }
  8886                          !if (MOVE_OFFSET + $9013) != $e713 {
  8887                              !error "Assertion failed: MOVE_OFFSET + $9013 == $e713"
  8888                          }
  8889                          !if (MOVE_OFFSET + $9037) != $e737 {
  8890                              !error "Assertion failed: MOVE_OFFSET + $9037 == $e737"
  8891                          }
  8892                          !if (MOVE_OFFSET + $903c) != $e73c {
  8893                              !error "Assertion failed: MOVE_OFFSET + $903c == $e73c"
  8894                          }
  8895                          !if (MOVE_OFFSET + $9054) != $e754 {
  8896                              !error "Assertion failed: MOVE_OFFSET + $9054 == $e754"
  8897                          }
  8898                          !if (MOVE_OFFSET + $9074) != $e774 {
  8899                              !error "Assertion failed: MOVE_OFFSET + $9074 == $e774"
  8900                          }
  8901                          !if (MOVE_OFFSET + $9097) != $e797 {
  8902                              !error "Assertion failed: MOVE_OFFSET + $9097 == $e797"
  8903                          }
  8904                          !if (MOVE_OFFSET + $909a) != $e79a {
  8905                              !error "Assertion failed: MOVE_OFFSET + $909a == $e79a"
  8906                          }
  8907                          !if (MOVE_OFFSET + $90a5) != $e7a5 {
  8908                              !error "Assertion failed: MOVE_OFFSET + $90a5 == $e7a5"
  8909                          }
  8910                          !if (MOVE_OFFSET + $90bd) != $e7bd {
  8911                              !error "Assertion failed: MOVE_OFFSET + $90bd == $e7bd"
  8912                          }
  8913                          !if (MOVE_OFFSET + $9109) != $e809 {
  8914                              !error "Assertion failed: MOVE_OFFSET + $9109 == $e809"
  8915                          }
  8916                          !if (MOVE_OFFSET + $910e) != $e80e {
  8917                              !error "Assertion failed: MOVE_OFFSET + $910e == $e80e"
  8918                          }
  8919                          !if (MOVE_OFFSET + $9119) != $e819 {
  8920                              !error "Assertion failed: MOVE_OFFSET + $9119 == $e819"
  8921                          }
  8922                          !if (MOVE_OFFSET + $9120) != $e820 {
  8923                              !error "Assertion failed: MOVE_OFFSET + $9120 == $e820"
  8924                          }
  8925                          !if (MOVE_OFFSET + $9123) != $e823 {
  8926                              !error "Assertion failed: MOVE_OFFSET + $9123 == $e823"
  8927                          }
  8928                          !if (MOVE_OFFSET + $912c) != $e82c {
  8929                              !error "Assertion failed: MOVE_OFFSET + $912c == $e82c"
  8930                          }
  8931                          !if (MOVE_OFFSET + $913c) != $e83c {
  8932                              !error "Assertion failed: MOVE_OFFSET + $913c == $e83c"
  8933                          }
  8934                          !if (MOVE_OFFSET + $9176) != $e876 {
  8935                              !error "Assertion failed: MOVE_OFFSET + $9176 == $e876"
  8936                          }
  8937                          !if (MOVE_OFFSET + $9179) != $e879 {
  8938                              !error "Assertion failed: MOVE_OFFSET + $9179 == $e879"
  8939                          }
  8940                          !if (MOVE_OFFSET + $9184) != $e884 {
  8941                              !error "Assertion failed: MOVE_OFFSET + $9184 == $e884"
  8942                          }
  8943                          !if (MOVE_OFFSET + $918d) != $e88d {
  8944                              !error "Assertion failed: MOVE_OFFSET + $918d == $e88d"
  8945                          }
  8946                          !if (MOVE_OFFSET + $91a7) != $e8a7 {
  8947                              !error "Assertion failed: MOVE_OFFSET + $91a7 == $e8a7"
  8948                          }
  8949                          !if (MOVE_OFFSET + $91b0) != $e8b0 {
  8950                              !error "Assertion failed: MOVE_OFFSET + $91b0 == $e8b0"
  8951                          }
  8952                          !if (MOVE_OFFSET + $91c0) != $e8c0 {
  8953                              !error "Assertion failed: MOVE_OFFSET + $91c0 == $e8c0"
  8954                          }
  8955                          !if (MOVE_OFFSET + $91c3) != $e8c3 {
  8956                              !error "Assertion failed: MOVE_OFFSET + $91c3 == $e8c3"
  8957                          }
  8958                          !if (MOVE_OFFSET + $91c6) != $e8c6 {
  8959                              !error "Assertion failed: MOVE_OFFSET + $91c6 == $e8c6"
  8960                          }
  8961                          !if (MOVE_OFFSET + $91db) != $e8db {
  8962                              !error "Assertion failed: MOVE_OFFSET + $91db == $e8db"
  8963                          }
  8964                          !if (MOVE_OFFSET + $91de) != $e8de {
  8965                              !error "Assertion failed: MOVE_OFFSET + $91de == $e8de"
  8966                          }
  8967                          !if (MOVE_OFFSET + $91f1) != $e8f1 {
  8968                              !error "Assertion failed: MOVE_OFFSET + $91f1 == $e8f1"
  8969                          }
  8970                          !if (MOVE_OFFSET + $91f4) != $e8f4 {
  8971                              !error "Assertion failed: MOVE_OFFSET + $91f4 == $e8f4"
  8972                          }
  8973                          !if (MOVE_OFFSET + $91f7) != $e8f7 {
  8974                              !error "Assertion failed: MOVE_OFFSET + $91f7 == $e8f7"
  8975                          }
  8976                          !if (MOVE_OFFSET + $91ff) != $e8ff {
  8977                              !error "Assertion failed: MOVE_OFFSET + $91ff == $e8ff"
  8978                          }
  8979                          !if (MOVE_OFFSET + $9202) != $e902 {
  8980                              !error "Assertion failed: MOVE_OFFSET + $9202 == $e902"
  8981                          }
  8982                          !if (MOVE_OFFSET + $922b) != $e92b {
  8983                              !error "Assertion failed: MOVE_OFFSET + $922b == $e92b"
  8984                          }
  8985                          !if (MOVE_OFFSET + $922e) != $e92e {
  8986                              !error "Assertion failed: MOVE_OFFSET + $922e == $e92e"
  8987                          }
  8988                          !if (MOVE_OFFSET + $925c) != $e95c {
  8989                              !error "Assertion failed: MOVE_OFFSET + $925c == $e95c"
  8990                          }
  8991                          !if (MOVE_OFFSET + $925f) != $e95f {
  8992                              !error "Assertion failed: MOVE_OFFSET + $925f == $e95f"
  8993                          }
  8994                          !if (MOVE_OFFSET + $9288) != $e988 {
  8995                              !error "Assertion failed: MOVE_OFFSET + $9288 == $e988"
  8996                          }
  8997                          !if (MOVE_OFFSET + $929b) != $e99b {
  8998                              !error "Assertion failed: MOVE_OFFSET + $929b == $e99b"
  8999                          }
  9000                          !if (MOVE_OFFSET + $92a6) != $e9a6 {
  9001                              !error "Assertion failed: MOVE_OFFSET + $92a6 == $e9a6"
  9002                          }
  9003                          !if (MOVE_OFFSET + $92b4) != $e9b4 {
  9004                              !error "Assertion failed: MOVE_OFFSET + $92b4 == $e9b4"
  9005                          }
  9006                          !if (MOVE_OFFSET + $92b7) != $e9b7 {
  9007                              !error "Assertion failed: MOVE_OFFSET + $92b7 == $e9b7"
  9008                          }
  9009                          !if (MOVE_OFFSET + $92d3) != $e9d3 {
  9010                              !error "Assertion failed: MOVE_OFFSET + $92d3 == $e9d3"
  9011                          }
  9012                          !if (MOVE_OFFSET + $92df) != $e9df {
  9013                              !error "Assertion failed: MOVE_OFFSET + $92df == $e9df"
  9014                          }
  9015                          !if (MOVE_OFFSET + $92e2) != $e9e2 {
  9016                              !error "Assertion failed: MOVE_OFFSET + $92e2 == $e9e2"
  9017                          }
  9018                          !if (MOVE_OFFSET + $92ee) != $e9ee {
  9019                              !error "Assertion failed: MOVE_OFFSET + $92ee == $e9ee"
  9020                          }
  9021                          !if (MOVE_OFFSET + $930a) != $ea0a {
  9022                              !error "Assertion failed: MOVE_OFFSET + $930a == $ea0a"
  9023                          }
  9024                          !if (MOVE_OFFSET + $930d) != $ea0d {
  9025                              !error "Assertion failed: MOVE_OFFSET + $930d == $ea0d"
  9026                          }
  9027                          !if (MOVE_OFFSET + $9336) != $ea36 {
  9028                              !error "Assertion failed: MOVE_OFFSET + $9336 == $ea36"
  9029                          }
  9030                          !if (MOVE_OFFSET + $934f) != $ea4f {
  9031                              !error "Assertion failed: MOVE_OFFSET + $934f == $ea4f"
  9032                          }
  9033                          !if (MOVE_OFFSET + $9354) != $ea54 {
  9034                              !error "Assertion failed: MOVE_OFFSET + $9354 == $ea54"
  9035                          }
  9036                          !if (MOVE_OFFSET + $93be) != $eabe {
  9037                              !error "Assertion failed: MOVE_OFFSET + $93be == $eabe"
  9038                          }
  9039                          !if (MOVE_OFFSET + $93d5) != $ead5 {
  9040                              !error "Assertion failed: MOVE_OFFSET + $93d5 == $ead5"
  9041                          }
  9042                          !if (MOVE_OFFSET + $93d8) != $ead8 {
  9043                              !error "Assertion failed: MOVE_OFFSET + $93d8 == $ead8"
  9044                          }
  9045                          !if (MOVE_OFFSET + $93db) != $eadb {
  9046                              !error "Assertion failed: MOVE_OFFSET + $93db == $eadb"
  9047                          }
  9048                          !if (MOVE_OFFSET + $93eb) != $eaeb {
  9049                              !error "Assertion failed: MOVE_OFFSET + $93eb == $eaeb"
  9050                          }
  9051                          !if (MOVE_OFFSET + $93ee) != $eaee {
  9052                              !error "Assertion failed: MOVE_OFFSET + $93ee == $eaee"
  9053                          }
  9054                          !if (MOVE_OFFSET + $93f1) != $eaf1 {
  9055                              !error "Assertion failed: MOVE_OFFSET + $93f1 == $eaf1"
  9056                          }
  9057                          !if (MOVE_OFFSET + $9403) != $eb03 {
  9058                              !error "Assertion failed: MOVE_OFFSET + $9403 == $eb03"
  9059                          }
  9060                          !if (MOVE_OFFSET + $9406) != $eb06 {
  9061                              !error "Assertion failed: MOVE_OFFSET + $9406 == $eb06"
  9062                          }
  9063                          !if (MOVE_OFFSET + $9411) != $eb11 {
  9064                              !error "Assertion failed: MOVE_OFFSET + $9411 == $eb11"
  9065                          }
  9066                          !if (MOVE_OFFSET + $9449) != $eb49 {
  9067                              !error "Assertion failed: MOVE_OFFSET + $9449 == $eb49"
  9068                          }
  9069                          !if (MOVE_OFFSET + $944c) != $eb4c {
  9070                              !error "Assertion failed: MOVE_OFFSET + $944c == $eb4c"
  9071                          }
  9072                          !if (MOVE_OFFSET + $944f) != $eb4f {
  9073                              !error "Assertion failed: MOVE_OFFSET + $944f == $eb4f"
  9074                          }
  9075                          !if (MOVE_OFFSET + $9478) != $eb78 {
  9076                              !error "Assertion failed: MOVE_OFFSET + $9478 == $eb78"
  9077                          }
  9078                          !if (MOVE_OFFSET + $9486) != $eb86 {
  9079                              !error "Assertion failed: MOVE_OFFSET + $9486 == $eb86"
  9080                          }
  9081                          !if (MOVE_OFFSET + $94b5) != $ebb5 {
  9082                              !error "Assertion failed: MOVE_OFFSET + $94b5 == $ebb5"
  9083                          }
  9084                          !if (MOVE_OFFSET + $94b8) != $ebb8 {
  9085                              !error "Assertion failed: MOVE_OFFSET + $94b8 == $ebb8"
  9086                          }
  9087                          !if (MOVE_OFFSET + $94bb) != $ebbb {
  9088                              !error "Assertion failed: MOVE_OFFSET + $94bb == $ebbb"
  9089                          }
  9090                          !if (MOVE_OFFSET + $9538) != $ec38 {
  9091                              !error "Assertion failed: MOVE_OFFSET + $9538 == $ec38"
  9092                          }
  9093                          !if (MOVE_OFFSET + $9574) != $ec74 {
  9094                              !error "Assertion failed: MOVE_OFFSET + $9574 == $ec74"
  9095                          }
  9096                          !if (MOVE_OFFSET + $9577) != $ec77 {
  9097                              !error "Assertion failed: MOVE_OFFSET + $9577 == $ec77"
  9098                          }
  9099                          !if (MOVE_OFFSET + $957a) != $ec7a {
  9100                              !error "Assertion failed: MOVE_OFFSET + $957a == $ec7a"
  9101                          }
  9102                          !if (MOVE_OFFSET + $9594) != $ec94 {
  9103                              !error "Assertion failed: MOVE_OFFSET + $9594 == $ec94"
  9104                          }
  9105                          !if (MOVE_OFFSET + $9597) != $ec97 {
  9106                              !error "Assertion failed: MOVE_OFFSET + $9597 == $ec97"
  9107                          }
  9108                          !if (MOVE_OFFSET + $959c) != $ec9c {
  9109                              !error "Assertion failed: MOVE_OFFSET + $959c == $ec9c"
  9110                          }
  9111                          !if (MOVE_OFFSET + $959f) != $ec9f {
  9112                              !error "Assertion failed: MOVE_OFFSET + $959f == $ec9f"
  9113                          }
  9114                          !if (MOVE_OFFSET + $95a4) != $eca4 {
  9115                              !error "Assertion failed: MOVE_OFFSET + $95a4 == $eca4"
  9116                          }
  9117                          !if (MOVE_OFFSET + $95a7) != $eca7 {
  9118                              !error "Assertion failed: MOVE_OFFSET + $95a7 == $eca7"
  9119                          }
  9120                          !if (MOVE_OFFSET + $95ac) != $ecac {
  9121                              !error "Assertion failed: MOVE_OFFSET + $95ac == $ecac"
  9122                          }
  9123                          !if (MOVE_OFFSET + $95be) != $ecbe {
  9124                              !error "Assertion failed: MOVE_OFFSET + $95be == $ecbe"
  9125                          }
  9126                          !if (MOVE_OFFSET + $95c1) != $ecc1 {
  9127                              !error "Assertion failed: MOVE_OFFSET + $95c1 == $ecc1"
  9128                          }
  9129                          !if (MOVE_OFFSET + $95f6) != $ecf6 {
  9130                              !error "Assertion failed: MOVE_OFFSET + $95f6 == $ecf6"
  9131                          }
  9132                          !if (MOVE_OFFSET + $9604) != $ed04 {
  9133                              !error "Assertion failed: MOVE_OFFSET + $9604 == $ed04"
  9134                          }
  9135                          !if (MOVE_OFFSET + $960d) != $ed0d {
  9136                              !error "Assertion failed: MOVE_OFFSET + $960d == $ed0d"
  9137                          }
  9138                          !if (MOVE_OFFSET + $9610) != $ed10 {
  9139                              !error "Assertion failed: MOVE_OFFSET + $9610 == $ed10"
  9140                          }
  9141                          !if (MOVE_OFFSET + $9613) != $ed13 {
  9142                              !error "Assertion failed: MOVE_OFFSET + $9613 == $ed13"
  9143                          }
  9144                          !if (MOVE_OFFSET + $9624) != $ed24 {
  9145                              !error "Assertion failed: MOVE_OFFSET + $9624 == $ed24"
  9146                          }
  9147                          !if (MOVE_OFFSET + $962b) != $ed2b {
  9148                              !error "Assertion failed: MOVE_OFFSET + $962b == $ed2b"
  9149                          }
  9150                          !if (MOVE_OFFSET + $962e) != $ed2e {
  9151                              !error "Assertion failed: MOVE_OFFSET + $962e == $ed2e"
  9152                          }
  9153                          !if (MOVE_OFFSET + $9631) != $ed31 {
  9154                              !error "Assertion failed: MOVE_OFFSET + $9631 == $ed31"
  9155                          }
  9156                          !if (MOVE_OFFSET + $9634) != $ed34 {
  9157                              !error "Assertion failed: MOVE_OFFSET + $9634 == $ed34"
  9158                          }
  9159                          !if (MOVE_OFFSET + $9644) != $ed44 {
  9160                              !error "Assertion failed: MOVE_OFFSET + $9644 == $ed44"
  9161                          }
  9162                          !if (MOVE_OFFSET + $9647) != $ed47 {
  9163                              !error "Assertion failed: MOVE_OFFSET + $9647 == $ed47"
  9164                          }
  9165                          !if (MOVE_OFFSET + $966e) != $ed6e {
  9166                              !error "Assertion failed: MOVE_OFFSET + $966e == $ed6e"
  9167                          }
  9168                          !if (MOVE_OFFSET + $96ac) != $edac {
  9169                              !error "Assertion failed: MOVE_OFFSET + $96ac == $edac"
  9170                          }
  9171                          !if (MOVE_OFFSET + $96b9) != $edb9 {
  9172                              !error "Assertion failed: MOVE_OFFSET + $96b9 == $edb9"
  9173                          }
  9174                          !if (MOVE_OFFSET + $96d4) != $edd4 {
  9175                              !error "Assertion failed: MOVE_OFFSET + $96d4 == $edd4"
  9176                          }
  9177                          !if (MOVE_OFFSET + $96e7) != $ede7 {
  9178                              !error "Assertion failed: MOVE_OFFSET + $96e7 == $ede7"
  9179                          }
  9180                          !if (MOVE_OFFSET + $9704) != $ee04 {
  9181                              !error "Assertion failed: MOVE_OFFSET + $9704 == $ee04"
  9182                          }
  9183                          !if (MOVE_OFFSET + $9720) != $ee20 {
  9184                              !error "Assertion failed: MOVE_OFFSET + $9720 == $ee20"
  9185                          }
  9186                          !if (MOVE_OFFSET + $9751) != $ee51 {
  9187                              !error "Assertion failed: MOVE_OFFSET + $9751 == $ee51"
  9188                          }
  9189                          !if (MOVE_OFFSET + $9754) != $ee54 {
  9190                              !error "Assertion failed: MOVE_OFFSET + $9754 == $ee54"
  9191                          }
  9192                          !if (MOVE_OFFSET + $975f) != $ee5f {
  9193                              !error "Assertion failed: MOVE_OFFSET + $975f == $ee5f"
  9194                          }
  9195                          !if (MOVE_OFFSET + $9762) != $ee62 {
  9196                              !error "Assertion failed: MOVE_OFFSET + $9762 == $ee62"
  9197                          }
  9198                          !if (MOVE_OFFSET + $976f) != $ee6f {
  9199                              !error "Assertion failed: MOVE_OFFSET + $976f == $ee6f"
  9200                          }
  9201                          !if (MOVE_OFFSET + $9772) != $ee72 {
  9202                              !error "Assertion failed: MOVE_OFFSET + $9772 == $ee72"
  9203                          }
  9204                          !if (MOVE_OFFSET + $9775) != $ee75 {
  9205                              !error "Assertion failed: MOVE_OFFSET + $9775 == $ee75"
  9206                          }
  9207                          !if (MOVE_OFFSET + $978a) != $ee8a {
  9208                              !error "Assertion failed: MOVE_OFFSET + $978a == $ee8a"
  9209                          }
  9210                          !if (MOVE_OFFSET + $97d4) != $eed4 {
  9211                              !error "Assertion failed: MOVE_OFFSET + $97d4 == $eed4"
  9212                          }
  9213                          !if (MOVE_OFFSET + $97f2) != $eef2 {
  9214                              !error "Assertion failed: MOVE_OFFSET + $97f2 == $eef2"
  9215                          }
  9216                          !if (MOVE_OFFSET + $97f5) != $eef5 {
  9217                              !error "Assertion failed: MOVE_OFFSET + $97f5 == $eef5"
  9218                          }
  9219                          !if (MOVE_OFFSET + $980e) != $ef0e {
  9220                              !error "Assertion failed: MOVE_OFFSET + $980e == $ef0e"
  9221                          }
  9222                          !if (MOVE_OFFSET + $9812) != $ef12 {
  9223                              !error "Assertion failed: MOVE_OFFSET + $9812 == $ef12"
  9224                          }
  9225                          !if (MOVE_OFFSET + $9816) != $ef16 {
  9226                              !error "Assertion failed: MOVE_OFFSET + $9816 == $ef16"
  9227                          }
  9228                          !if (MOVE_OFFSET + $981a) != $ef1a {
  9229                              !error "Assertion failed: MOVE_OFFSET + $981a == $ef1a"
  9230                          }
  9231                          !if (MOVE_OFFSET + $981d) != $ef1d {
  9232                              !error "Assertion failed: MOVE_OFFSET + $981d == $ef1d"
  9233                          }
  9234                          !if (MOVE_OFFSET + $9822) != $ef22 {
  9235                              !error "Assertion failed: MOVE_OFFSET + $9822 == $ef22"
  9236                          }
  9237                          !if (MOVE_OFFSET + $9825) != $ef25 {
  9238                              !error "Assertion failed: MOVE_OFFSET + $9825 == $ef25"
  9239                          }
  9240                          !if (MOVE_OFFSET + $9849) != $ef49 {
  9241                              !error "Assertion failed: MOVE_OFFSET + $9849 == $ef49"
  9242                          }
  9243                          !if (MOVE_OFFSET + $9860) != $ef60 {
  9244                              !error "Assertion failed: MOVE_OFFSET + $9860 == $ef60"
  9245                          }
  9246                          !if (MOVE_OFFSET + $988a) != $ef8a {
  9247                              !error "Assertion failed: MOVE_OFFSET + $988a == $ef8a"
  9248                          }
  9249                          !if (MOVE_OFFSET + $988d) != $ef8d {
  9250                              !error "Assertion failed: MOVE_OFFSET + $988d == $ef8d"
  9251                          }
  9252                          !if (MOVE_OFFSET + $98c1) != $efc1 {
  9253                              !error "Assertion failed: MOVE_OFFSET + $98c1 == $efc1"
  9254                          }
  9255                          !if (MOVE_OFFSET + $98c4) != $efc4 {
  9256                              !error "Assertion failed: MOVE_OFFSET + $98c4 == $efc4"
  9257                          }
  9258                          !if (MOVE_OFFSET + $98c7) != $efc7 {
  9259                              !error "Assertion failed: MOVE_OFFSET + $98c7 == $efc7"
  9260                          }
  9261                          !if (MOVE_OFFSET + $98cb) != $efcb {
  9262                              !error "Assertion failed: MOVE_OFFSET + $98cb == $efcb"
  9263                          }
  9264                          !if (MOVE_OFFSET + $98d4) != $efd4 {
  9265                              !error "Assertion failed: MOVE_OFFSET + $98d4 == $efd4"
  9266                          }
  9267                          !if (MOVE_OFFSET + $98f0) != $eff0 {
  9268                              !error "Assertion failed: MOVE_OFFSET + $98f0 == $eff0"
  9269                          }
  9270                          !if (MOVE_OFFSET + $98f3) != $eff3 {
  9271                              !error "Assertion failed: MOVE_OFFSET + $98f3 == $eff3"
  9272                          }
  9273                          !if (MOVE_OFFSET + $98fe) != $effe {
  9274                              !error "Assertion failed: MOVE_OFFSET + $98fe == $effe"
  9275                          }
  9276                          !if (MOVE_OFFSET + $9910) != $f010 {
  9277                              !error "Assertion failed: MOVE_OFFSET + $9910 == $f010"
  9278                          }
  9279                          !if (MOVE_OFFSET + $9913) != $f013 {
  9280                              !error "Assertion failed: MOVE_OFFSET + $9913 == $f013"
  9281                          }
  9282                          !if (MOVE_OFFSET + $992f) != $f02f {
  9283                              !error "Assertion failed: MOVE_OFFSET + $992f == $f02f"
  9284                          }
  9285                          !if (MOVE_OFFSET + $993c) != $f03c {
  9286                              !error "Assertion failed: MOVE_OFFSET + $993c == $f03c"
  9287                          }
  9288                          !if (MOVE_OFFSET + $9946) != $f046 {
  9289                              !error "Assertion failed: MOVE_OFFSET + $9946 == $f046"
  9290                          }
  9291                          !if (MOVE_OFFSET + $9953) != $f053 {
  9292                              !error "Assertion failed: MOVE_OFFSET + $9953 == $f053"
  9293                          }
  9294                          !if (MOVE_OFFSET + $9959) != $f059 {
  9295                              !error "Assertion failed: MOVE_OFFSET + $9959 == $f059"
  9296                          }
  9297                          !if (MOVE_OFFSET + $9962) != $f062 {
  9298                              !error "Assertion failed: MOVE_OFFSET + $9962 == $f062"
  9299                          }
  9300                          !if (MOVE_OFFSET + $9965) != $f065 {
  9301                              !error "Assertion failed: MOVE_OFFSET + $9965 == $f065"
  9302                          }
  9303                          !if (MOVE_OFFSET + $9968) != $f068 {
  9304                              !error "Assertion failed: MOVE_OFFSET + $9968 == $f068"
  9305                          }
  9306                          !if (MOVE_OFFSET + $998b) != $f08b {
  9307                              !error "Assertion failed: MOVE_OFFSET + $998b == $f08b"
  9308                          }
  9309                          !if (MOVE_OFFSET + $999e) != $f09e {
  9310                              !error "Assertion failed: MOVE_OFFSET + $999e == $f09e"
  9311                          }
  9312                          !if (MOVE_OFFSET + $99a1) != $f0a1 {
  9313                              !error "Assertion failed: MOVE_OFFSET + $99a1 == $f0a1"
  9314                          }
  9315                          !if (MOVE_OFFSET + $99a4) != $f0a4 {
  9316                              !error "Assertion failed: MOVE_OFFSET + $99a4 == $f0a4"
  9317                          }
  9318                          !if (MOVE_OFFSET + $99c1) != $f0c1 {
  9319                              !error "Assertion failed: MOVE_OFFSET + $99c1 == $f0c1"
  9320                          }
  9321                          !if (MOVE_OFFSET + $99c4) != $f0c4 {
  9322                              !error "Assertion failed: MOVE_OFFSET + $99c4 == $f0c4"
  9323                          }
  9324                          !if (MOVE_OFFSET + $99cd) != $f0cd {
  9325                              !error "Assertion failed: MOVE_OFFSET + $99cd == $f0cd"
  9326                          }
  9327                          !if (MOVE_OFFSET + $99ea) != $f0ea {
  9328                              !error "Assertion failed: MOVE_OFFSET + $99ea == $f0ea"
  9329                          }
  9330                          !if (MOVE_OFFSET + $99f4) != $f0f4 {
  9331                              !error "Assertion failed: MOVE_OFFSET + $99f4 == $f0f4"
  9332                          }
  9333                          !if (MOVE_OFFSET + $9a06) != $f106 {
  9334                              !error "Assertion failed: MOVE_OFFSET + $9a06 == $f106"
  9335                          }
  9336                          !if (MOVE_OFFSET + $9a09) != $f109 {
  9337                              !error "Assertion failed: MOVE_OFFSET + $9a09 == $f109"
  9338                          }
  9339                          !if (MOVE_OFFSET + $9a2c) != $f12c {
  9340                              !error "Assertion failed: MOVE_OFFSET + $9a2c == $f12c"
  9341                          }
  9342                          !if (MOVE_OFFSET + $9a45) != $f145 {
  9343                              !error "Assertion failed: MOVE_OFFSET + $9a45 == $f145"
  9344                          }
  9345                          !if (MOVE_OFFSET + $9a48) != $f148 {
  9346                              !error "Assertion failed: MOVE_OFFSET + $9a48 == $f148"
  9347                          }
  9348                          !if (MOVE_OFFSET + $9a4b) != $f14b {
  9349                              !error "Assertion failed: MOVE_OFFSET + $9a4b == $f14b"
  9350                          }
  9351                          !if (MOVE_OFFSET + $9a5d) != $f15d {
  9352                              !error "Assertion failed: MOVE_OFFSET + $9a5d == $f15d"
  9353                          }
  9354                          !if (MOVE_OFFSET + $9a60) != $f160 {
  9355                              !error "Assertion failed: MOVE_OFFSET + $9a60 == $f160"
  9356                          }
  9357                          !if (MOVE_OFFSET + $9a63) != $f163 {
  9358                              !error "Assertion failed: MOVE_OFFSET + $9a63 == $f163"
  9359                          }
  9360                          !if (MOVE_OFFSET + $9a8d) != $f18d {
  9361                              !error "Assertion failed: MOVE_OFFSET + $9a8d == $f18d"
  9362                          }
  9363                          !if (MOVE_OFFSET + $9a90) != $f190 {
  9364                              !error "Assertion failed: MOVE_OFFSET + $9a90 == $f190"
  9365                          }
  9366                          !if (MOVE_OFFSET + $9a93) != $f193 {
  9367                              !error "Assertion failed: MOVE_OFFSET + $9a93 == $f193"
  9368                          }
  9369                          !if (MOVE_OFFSET + $9abd) != $f1bd {
  9370                              !error "Assertion failed: MOVE_OFFSET + $9abd == $f1bd"
  9371                          }
  9372                          !if (MOVE_OFFSET + $9aca) != $f1ca {
  9373                              !error "Assertion failed: MOVE_OFFSET + $9aca == $f1ca"
  9374                          }
  9375                          !if (MOVE_OFFSET + $9ad5) != $f1d5 {
  9376                              !error "Assertion failed: MOVE_OFFSET + $9ad5 == $f1d5"
  9377                          }
  9378                          !if (MOVE_OFFSET + $9b3a) != $f23a {
  9379                              !error "Assertion failed: MOVE_OFFSET + $9b3a == $f23a"
  9380                          }
  9381                          !if (MOVE_OFFSET + $9b45) != $f245 {
  9382                              !error "Assertion failed: MOVE_OFFSET + $9b45 == $f245"
  9383                          }
  9384                          !if (MOVE_OFFSET + $9b53) != $f253 {
  9385                              !error "Assertion failed: MOVE_OFFSET + $9b53 == $f253"
  9386                          }
  9387                          !if (MOVE_OFFSET + $9b71) != $f271 {
  9388                              !error "Assertion failed: MOVE_OFFSET + $9b71 == $f271"
  9389                          }
  9390                          !if (MOVE_OFFSET + $9b7c) != $f27c {
  9391                              !error "Assertion failed: MOVE_OFFSET + $9b7c == $f27c"
  9392                          }
  9393                          !if (MOVE_OFFSET + $9b82) != $f282 {
  9394                              !error "Assertion failed: MOVE_OFFSET + $9b82 == $f282"
  9395                          }
  9396                          !if (MOVE_OFFSET + $9b97) != $f297 {
  9397                              !error "Assertion failed: MOVE_OFFSET + $9b97 == $f297"
  9398                          }
  9399                          !if (MOVE_OFFSET + $9bac) != $f2ac {
  9400                              !error "Assertion failed: MOVE_OFFSET + $9bac == $f2ac"
  9401                          }
  9402                          !if (MOVE_OFFSET + $9bc2) != $f2c2 {
  9403                              !error "Assertion failed: MOVE_OFFSET + $9bc2 == $f2c2"
  9404                          }
  9405                          !if (MOVE_OFFSET + $9bd5) != $f2d5 {
  9406                              !error "Assertion failed: MOVE_OFFSET + $9bd5 == $f2d5"
  9407                          }
  9408                          !if (MOVE_OFFSET + $9bda) != $f2da {
  9409                              !error "Assertion failed: MOVE_OFFSET + $9bda == $f2da"
  9410                          }
  9411                          !if (MOVE_OFFSET + $9bf0) != $f2f0 {
  9412                              !error "Assertion failed: MOVE_OFFSET + $9bf0 == $f2f0"
  9413                          }
  9414                          !if (MOVE_OFFSET + $9bf3) != $f2f3 {
  9415                              !error "Assertion failed: MOVE_OFFSET + $9bf3 == $f2f3"
  9416                          }
  9417                          !if (MOVE_OFFSET + $9c05) != $f305 {
  9418                              !error "Assertion failed: MOVE_OFFSET + $9c05 == $f305"
  9419                          }
  9420                          !if (MOVE_OFFSET + $9c15) != $f315 {
  9421                              !error "Assertion failed: MOVE_OFFSET + $9c15 == $f315"
  9422                          }
  9423                          !if (MOVE_OFFSET + $9c19) != $f319 {
  9424                              !error "Assertion failed: MOVE_OFFSET + $9c19 == $f319"
  9425                          }
  9426                          !if (MOVE_OFFSET + $9c21) != $f321 {
  9427                              !error "Assertion failed: MOVE_OFFSET + $9c21 == $f321"
  9428                          }
  9429                          !if (MOVE_OFFSET + $9c2f) != $f32f {
  9430                              !error "Assertion failed: MOVE_OFFSET + $9c2f == $f32f"
  9431                          }
  9432                          !if (MOVE_OFFSET + $9c34) != $f334 {
  9433                              !error "Assertion failed: MOVE_OFFSET + $9c34 == $f334"
  9434                          }
  9435                          !if (MOVE_OFFSET + $9c52) != $f352 {
  9436                              !error "Assertion failed: MOVE_OFFSET + $9c52 == $f352"
  9437                          }
  9438                          !if (MOVE_OFFSET + $9ccb) != $f3cb {
  9439                              !error "Assertion failed: MOVE_OFFSET + $9ccb == $f3cb"
  9440                          }
  9441                          !if (MOVE_OFFSET + $9ceb) != $f3eb {
  9442                              !error "Assertion failed: MOVE_OFFSET + $9ceb == $f3eb"
  9443                          }
  9444                          !if (MOVE_OFFSET + $9cf4) != $f3f4 {
  9445                              !error "Assertion failed: MOVE_OFFSET + $9cf4 == $f3f4"
  9446                          }
  9447                          !if (MOVE_OFFSET + $9cf7) != $f3f7 {
  9448                              !error "Assertion failed: MOVE_OFFSET + $9cf7 == $f3f7"
  9449                          }
  9450                          !if (MOVE_OFFSET + $9d0f) != $f40f {
  9451                              !error "Assertion failed: MOVE_OFFSET + $9d0f == $f40f"
  9452                          }
  9453                          !if (MOVE_OFFSET + $9d12) != $f412 {
  9454                              !error "Assertion failed: MOVE_OFFSET + $9d12 == $f412"
  9455                          }
  9456                          !if (MOVE_OFFSET + $9d1f) != $f41f {
  9457                              !error "Assertion failed: MOVE_OFFSET + $9d1f == $f41f"
  9458                          }
  9459                          !if (MOVE_OFFSET + $9d31) != $f431 {
  9460                              !error "Assertion failed: MOVE_OFFSET + $9d31 == $f431"
  9461                          }
  9462                          !if (MOVE_OFFSET + $9d74) != $f474 {
  9463                              !error "Assertion failed: MOVE_OFFSET + $9d74 == $f474"
  9464                          }
  9465                          !if (MOVE_OFFSET + $9d81) != $f481 {
  9466                              !error "Assertion failed: MOVE_OFFSET + $9d81 == $f481"
  9467                          }
  9468                          !if (MOVE_OFFSET + $9da4) != $f4a4 {
  9469                              !error "Assertion failed: MOVE_OFFSET + $9da4 == $f4a4"
  9470                          }
  9471                          !if (MOVE_OFFSET + $9da9) != $f4a9 {
  9472                              !error "Assertion failed: MOVE_OFFSET + $9da9 == $f4a9"
  9473                          }
  9474                          !if (MOVE_OFFSET + $9dac) != $f4ac {
  9475                              !error "Assertion failed: MOVE_OFFSET + $9dac == $f4ac"
  9476                          }
  9477                          !if (MOVE_OFFSET + $9db1) != $f4b1 {
  9478                              !error "Assertion failed: MOVE_OFFSET + $9db1 == $f4b1"
  9479                          }
  9480                          !if (MOVE_OFFSET + $9dc3) != $f4c3 {
  9481                              !error "Assertion failed: MOVE_OFFSET + $9dc3 == $f4c3"
  9482                          }
  9483                          !if (MOVE_OFFSET + $9dc8) != $f4c8 {
  9484                              !error "Assertion failed: MOVE_OFFSET + $9dc8 == $f4c8"
  9485                          }
  9486                          !if (MOVE_OFFSET + $9e81) != $f581 {
  9487                              !error "Assertion failed: MOVE_OFFSET + $9e81 == $f581"
  9488                          }
  9489                          !if (MOVE_OFFSET + $9eaa) != $f5aa {
  9490                              !error "Assertion failed: MOVE_OFFSET + $9eaa == $f5aa"
  9491                          }
  9492                          !if (MOVE_OFFSET + $9ed2) != $f5d2 {
  9493                              !error "Assertion failed: MOVE_OFFSET + $9ed2 == $f5d2"
  9494                          }
  9495                          !if (MOVE_OFFSET + $9ed9) != $f5d9 {
  9496                              !error "Assertion failed: MOVE_OFFSET + $9ed9 == $f5d9"
  9497                          }
  9498                          !if (MOVE_OFFSET + $9ee2) != $f5e2 {
  9499                              !error "Assertion failed: MOVE_OFFSET + $9ee2 == $f5e2"
  9500                          }
  9501                          !if (MOVE_OFFSET + $9eeb) != $f5eb {
  9502                              !error "Assertion failed: MOVE_OFFSET + $9eeb == $f5eb"
  9503                          }
  9504                          !if (MOVE_OFFSET + $9efd) != $f5fd {
  9505                              !error "Assertion failed: MOVE_OFFSET + $9efd == $f5fd"
  9506                          }
  9507                          !if (MOVE_OFFSET + $9f1b) != $f61b {
  9508                              !error "Assertion failed: MOVE_OFFSET + $9f1b == $f61b"
  9509                          }
  9510                          !if (MOVE_OFFSET + $9f3b) != $f63b {
  9511                              !error "Assertion failed: MOVE_OFFSET + $9f3b == $f63b"
  9512                          }
  9513                          !if (MOVE_OFFSET + $9f42) != $f642 {
  9514                              !error "Assertion failed: MOVE_OFFSET + $9f42 == $f642"
  9515                          }
  9516                          !if (MOVE_OFFSET + $9f66) != $f666 {
  9517                              !error "Assertion failed: MOVE_OFFSET + $9f66 == $f666"
  9518                          }
  9519                          !if (MOVE_OFFSET + $9f69) != $f669 {
  9520                              !error "Assertion failed: MOVE_OFFSET + $9f69 == $f669"
  9521                          }
  9522                          !if (MOVE_OFFSET + $9f6e) != $f66e {
  9523                              !error "Assertion failed: MOVE_OFFSET + $9f6e == $f66e"
  9524                          }
  9525                          !if (MOVE_OFFSET + $9f73) != $f673 {
  9526                              !error "Assertion failed: MOVE_OFFSET + $9f73 == $f673"
  9527                          }
  9528                          !if (MOVE_OFFSET + $9f82) != $f682 {
  9529                              !error "Assertion failed: MOVE_OFFSET + $9f82 == $f682"
  9530                          }
  9531                          !if (MOVE_OFFSET + $9f91) != $f691 {
  9532                              !error "Assertion failed: MOVE_OFFSET + $9f91 == $f691"
  9533                          }
  9534                          !if (MOVE_OFFSET + $9f94) != $f694 {
  9535                              !error "Assertion failed: MOVE_OFFSET + $9f94 == $f694"
  9536                          }
  9537                          !if (MOVE_OFFSET + $9fa4) != $f6a4 {
  9538                              !error "Assertion failed: MOVE_OFFSET + $9fa4 == $f6a4"
  9539                          }
  9540                          !if (MOVE_OFFSET + $9fab) != $f6ab {
  9541                              !error "Assertion failed: MOVE_OFFSET + $9fab == $f6ab"
  9542                          }
  9543                          !if (MOVE_OFFSET + $9fb5) != $f6b5 {
  9544                              !error "Assertion failed: MOVE_OFFSET + $9fb5 == $f6b5"
  9545                          }
  9546                          !if (MOVE_OFFSET + $9fbf) != $f6bf {
  9547                              !error "Assertion failed: MOVE_OFFSET + $9fbf == $f6bf"
  9548                          }
  9549                          !if (MOVE_OFFSET + $9fc2) != $f6c2 {
  9550                              !error "Assertion failed: MOVE_OFFSET + $9fc2 == $f6c2"
  9551                          }
  9552                          !if (MOVE_OFFSET + $9fc6) != $f6c6 {
  9553                              !error "Assertion failed: MOVE_OFFSET + $9fc6 == $f6c6"
  9554                          }
  9555                          !if (MOVE_OFFSET + $9fc9) != $f6c9 {
  9556                              !error "Assertion failed: MOVE_OFFSET + $9fc9 == $f6c9"
  9557                          }
  9558                          !if (MOVE_OFFSET + $9fd7) != $f6d7 {
  9559                              !error "Assertion failed: MOVE_OFFSET + $9fd7 == $f6d7"
  9560                          }
  9561                          !if (MOVE_OFFSET + $9fda) != $f6da {
  9562                              !error "Assertion failed: MOVE_OFFSET + $9fda == $f6da"
  9563                          }
  9564                          !if (MOVE_OFFSET + $9fdd) != $f6dd {
  9565                              !error "Assertion failed: MOVE_OFFSET + $9fdd == $f6dd"
  9566                          }
  9567                          !if (MOVE_OFFSET + $9fe0) != $f6e0 {
  9568                              !error "Assertion failed: MOVE_OFFSET + $9fe0 == $f6e0"
  9569                          }
  9570                          !if (MOVE_OFFSET + $9fe3) != $f6e3 {
  9571                              !error "Assertion failed: MOVE_OFFSET + $9fe3 == $f6e3"
  9572                          }
  9573                          !if (MOVE_OFFSET + $a004) != $f704 {
  9574                              !error "Assertion failed: MOVE_OFFSET + $a004 == $f704"
  9575                          }
  9576                          !if (MOVE_OFFSET + $a02d) != $f72d {
  9577                              !error "Assertion failed: MOVE_OFFSET + $a02d == $f72d"
  9578                          }
  9579                          !if (NILOFF) != $19 {
  9580                              !error "Assertion failed: NILOFF == $19"
  9581                          }
  9582                          !if (NUMF) != $04 {
  9583                              !error "Assertion failed: NUMF == $04"
  9584                          }
  9585                          !if (RAMBS) != $7c {
  9586                              !error "Assertion failed: RAMBS == $7c"
  9587                          }
  9588                          !if (RAMBS+1) != $7d {
  9589                              !error "Assertion failed: RAMBS+1 == $7d"
  9590                          }
  9591                          !if (RELBS) != $7a {
  9592                              !error "Assertion failed: RELBS == $7a"
  9593                          }
  9594                          !if (RELBS+1) != $7b {
  9595                              !error "Assertion failed: RELBS+1 == $7b"
  9596                          }
  9597                          !if (RELOC) != $7c {
  9598                              !error "Assertion failed: RELOC == $7c"
  9599                          }
  9600                          !if (RELOC+1) != $7d {
  9601                              !error "Assertion failed: RELOC+1 == $7d"
  9602                          }
  9603                          !if (ROMBS) != $7a {
  9604                              !error "Assertion failed: ROMBS == $7a"
  9605                          }
  9606                          !if (ROMBS+1) != $7b {
  9607                              !error "Assertion failed: ROMBS+1 == $7b"
  9608                          }
  9609                          !if (SUBOFF) != $58 {
  9610                              !error "Assertion failed: SUBOFF == $58"
  9611                          }
  9612                          !if (SUBRF) != $08 {
  9613                              !error "Assertion failed: SUBRF == $08"
  9614                          }
  9615                          !if (TVS) != $30 {
  9616                              !error "Assertion failed: TVS == $30"
  9617                          }
  9618                          !if (TVS+1) != $31 {
  9619                              !error "Assertion failed: TVS+1 == $31"
  9620                          }
  9621                          !if (TVS+10) != $3a {
  9622                              !error "Assertion failed: TVS+10 == $3a"
  9623                          }
  9624                          !if (TVS-1) != $2f {
  9625                              !error "Assertion failed: TVS-1 == $2f"
  9626                          }
  9627                          !if (VALOFF) != $0d {
  9628                              !error "Assertion failed: VALOFF == $0d"
  9629                          }
  9630                          !if (WARMST) != $2a {
  9631                              !error "Assertion failed: WARMST == $2a"
  9632                          }
  9633                          !if (WRMOFF) != $72 {
  9634                              !error "Assertion failed: WRMOFF == $72"
  9635                          }
  9636                          !if (WSBOT) != $02 {
  9637                              !error "Assertion failed: WSBOT == $02"
  9638                          }
  9639                          !if (XTNDL) != $74 {
  9640                              !error "Assertion failed: XTNDL == $74"
  9641                          }
  9642                          !if (osbyte_acknowledge_escape) != $7e {
  9643                              !error "Assertion failed: osbyte_acknowledge_escape == $7e"
  9644                          }
  9645                          !if (osbyte_enter_language) != $8e {
  9646                              !error "Assertion failed: osbyte_enter_language == $8e"
  9647                          }
  9648                          !if (osbyte_inkey) != $81 {
  9649                              !error "Assertion failed: osbyte_inkey == $81"
  9650                          }
  9651                          !if (osbyte_read_adc_or_get_buffer_status) != $80 {
  9652                              !error "Assertion failed: osbyte_read_adc_or_get_buffer_status == $80"
  9653                          }
  9654                          !if (osbyte_read_high_order_address) != $82 {
  9655                              !error "Assertion failed: osbyte_read_high_order_address == $82"
  9656                          }
  9657                          !if (osbyte_read_himem) != $84 {
  9658                              !error "Assertion failed: osbyte_read_himem == $84"
  9659                          }
  9660                          !if (osbyte_read_himem_for_mode) != $85 {
  9661                              !error "Assertion failed: osbyte_read_himem_for_mode == $85"
  9662                          }
  9663                          !if (osbyte_read_oshwm) != $83 {
  9664                              !error "Assertion failed: osbyte_read_oshwm == $83"
  9665                          }
  9666                          !if (osbyte_read_tube_presence) != $ea {
  9667                              !error "Assertion failed: osbyte_read_tube_presence == $ea"
  9668                          }
  9669                          !if (osfile_load) != $ff {
  9670                              !error "Assertion failed: osfile_load == $ff"
  9671                          }
  9672                          !if (osfile_save) != $00 {
  9673                              !error "Assertion failed: osfile_save == $00"
  9674                          }
  9675                          !if (osfind_close) != $00 {
  9676                              !error "Assertion failed: osfind_close == $00"
  9677                          }
  9678                          !if (osfind_open_output) != $80 {
  9679                              !error "Assertion failed: osfind_open_output == $80"
  9680                          }
  9681                          !if (osword_read_clock) != $01 {
  9682                              !error "Assertion failed: osword_read_clock == $01"
  9683                          }
  9684                          !if (osword_read_interval_timer) != $03 {
  9685                              !error "Assertion failed: osword_read_interval_timer == $03"
  9686                          }
  9687                          !if (osword_read_io_memory) != $05 {
  9688                              !error "Assertion failed: osword_read_io_memory == $05"
  9689                          }
  9690                          !if (osword_read_line) != $00 {
  9691                              !error "Assertion failed: osword_read_line == $00"
  9692                          }
  9693                          !if (osword_read_pixel) != $09 {
  9694                              !error "Assertion failed: osword_read_pixel == $09"
  9695                          }
  9696                          !if (osword_sound) != $07 {
  9697                              !error "Assertion failed: osword_sound == $07"
  9698                          }
  9699                          !if (osword_write_clock) != $02 {
  9700                              !error "Assertion failed: osword_write_clock == $02"
  9701                          }
  9702                          !if (service_star_help_command) != $09 {
  9703                              !error "Assertion failed: service_star_help_command == $09"
  9704                          }
  9705                          !if (service_unrecognised_star_command) != $04 {
  9706                              !error "Assertion failed: service_unrecognised_star_command == $04"
  9707                          }
